
# time: 2022-01-26 12:04:23 UTC
# mode: r
+installed.packages()

# time: 2022-01-26 12:04:37 UTC
# mode: r
+library(Matrix)

# time: 2022-01-26 12:06:36 UTC
# mode: r
+source("~/repos/psyling/psycholinguistics/core/sentiment_training.R")

# time: 2022-01-26 12:06:48 UTC
# mode: r
+q()

# time: 2022-01-26 12:07:14 UTC
# mode: r
+source("sentiment_training.R")

# time: 2022-01-26 12:20:48 UTC
# mode: r
+readRDS("output/results.RDS")

# time: 2022-01-26 12:43:23 UTC
# mode: r
+source("valence_shifters.R")

# time: 2022-01-26 12:43:40 UTC
# mode: r
+source("sentiment_ML_evaluation.py")

# time: 2022-01-26 12:43:46 UTC
# mode: r
+source("sentiment_training.R")

# time: 2022-01-26 12:52:27 UTC
# mode: r
+library(tidyverse)

# time: 2022-01-26 15:52:53 UTC
# mode: r
+readRDS("output/results.RDS")

# time: 2022-01-26 15:53:11 UTC
# mode: r
+q()

# time: 2022-01-26 15:54:06 UTC
# mode: r
+source("sentiment_training.R")

# time: 2022-01-26 15:54:35 UTC
# mode: r
+readRDS("output/results.RDS")

# time: 2022-01-26 16:01:57 UTC
# mode: r
+?optim

# time: 2022-01-26 16:03:10 UTC
# mode: r
+readRDS("output/results.RDS")

# time: 2022-01-26 16:08:02 UTC
# mode: r
+library(tidyverse)

# time: 2022-01-26 16:08:23 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(test_ER)

# time: 2022-01-26 16:08:31 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-26 18:10:23 UTC
# mode: r
+readRDS("output/results.RDS")

# time: 2022-01-26 18:10:34 UTC
# mode: r
+readRDS("output/results.RDS") &>& tail()

# time: 2022-01-26 18:10:39 UTC
# mode: r
+readRDS("output/results.RDS") %>% tail()

# time: 2022-01-26 18:10:50 UTC
# mode: r
+readRDS("output/results.RDS") %>% head()

# time: 2022-01-26 18:10:56 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-26 19:22:38 UTC
# mode: r
+readRDS("output/results.RDS") %>% summary(test_ER)

# time: 2022-01-26 19:23:06 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-26 21:03:08 UTC
# mode: r
+readRDS("output/results.RDS") %>% summary(test_ER)

# time: 2022-01-26 21:09:06 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-26 21:09:09 UTC
# mode: r
+readRDS("output/results.RDS") %>% summary(test_ER)

# time: 2022-01-26 21:19:32 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-27 08:11:02 UTC
# mode: r
+sour

# time: 2022-01-27 08:11:12 UTC
# mode: r
+source("sentiment_training.R")

# time: 2022-01-27 09:04:36 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-27 09:04:48 UTC
# mode: r
+library(tidyverse)

# time: 2022-01-27 09:04:53 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-27 09:11:56 UTC
# mode: r
+source("sentiment_training.R")

# time: 2022-01-27 09:12:14 UTC
# mode: r
+librar("tidyverse")

# time: 2022-01-27 09:12:17 UTC
# mode: r
+library("tidyverse")

# time: 2022-01-27 09:12:20 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-27 09:52:31 UTC
# mode: r
+source("sentiment_training.R")

# time: 2022-01-27 09:52:38 UTC
# mode: r
+library("tidyverse")

# time: 2022-01-27 09:52:41 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-27 10:55:57 UTC
# mode: r
+library("tidyverse")

# time: 2022-01-27 10:56:00 UTC
# mode: r
+source("sentiment_training.R")

# time: 2022-01-27 10:56:03 UTC
# mode: r
+library("tidyverse")

# time: 2022-01-27 10:56:05 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-27 11:01:13 UTC
# mode: r
+source("sentiment_training.R")

# time: 2022-01-27 11:01:20 UTC
# mode: r
+library("tidyverse")

# time: 2022-01-27 11:01:24 UTC
# mode: r
+readRDS("output/results.RDS") %>% arrange(desc(test_ER))

# time: 2022-01-27 16:24:14 UTC
# mode: r
+q()

# time: 2022-04-08 07:46:45 UTC
# mode: r
+text <- read_file("../data/sample.txt")

# time: 2022-04-08 07:49:18 UTC
# mode: r
+use_python("/usr/bin/python3.9")

# time: 2022-04-12 19:28:34 UTC
# mode: r
+doc 

# time: 2022-04-12 19:41:37 UTC
# mode: r
+get_score(text, c("a", "az", "egy"), exclude=list('NOUN','ADJ'))

# time: 2022-04-26 20:15:28 UTC
# mode: r
+data <- readRDS("history_data.RDS")

# time: 2022-04-27 15:42:30 UTC
# mode: r
+    text <- read_csv(file)

# time: 2022-04-28 11:20:30 UTC
# mode: r
+res 

# time: 2022-04-28 11:24:24 UTC
# mode: r
+avg_l

# time: 2022-04-29 19:41:47 UTC
# mode: r
+RR

# time: 2022-05-04 19:51:14 UTC
# mode: r
+survey_data <- readxl::read_xlsx('../data/survey_data.xlsx')

# time: 2022-05-11 12:10:58 UTC
# mode: r
+population_data 

# time: 2022-05-12 13:24:07 UTC
# mode: r
+library(tibble)

# time: 2022-05-12 13:24:32 UTC
# mode: r
+library(WRS)

# time: 2022-05-12 13:24:33 UTC
# mode: r
+source("modules/stardog.R")

# time: 2022-05-12 13:24:49 UTC
# mode: r
+source("modules/summarization.R")

# time: 2022-05-12 13:24:50 UTC
# mode: r
+source("modules/anomalies.R")

# time: 2022-05-12 13:24:52 UTC
# mode: r
+source("modules/memoization.R")

# time: 2022-05-12 13:24:52 UTC
# mode: r
+dataset <- load("export/anomaly_tracking.feather")

# time: 2022-05-12 13:24:55 UTC
# mode: r
+top_users <- dataset %>% group_by(creator_name) %>% summarize(N=n()) %>% arrange(desc(N))

# time: 2022-05-12 13:24:55 UTC
# mode: r
+top_users <- head(top_users, 100)

# time: 2022-05-12 13:24:55 UTC
# mode: r
+save(data=top_users, path="store/top_anomaly_users.feather")

# time: 2022-05-12 13:24:58 UTC
# mode: r
+highest_variance  <- dataset %>%
+    group_by(name) %>%
+    summarize(V=var(daily, na.rm=TRUE)) %>%
+    top_n(9, V) %>%
+    ungroup() %>%
+    dplyr::select(name) %>%
+    unlist() %>%
+    unname()

# time: 2022-05-12 13:25:01 UTC
# mode: r
+saveRDS(highest_variance, "store/highest_variance.RDS")

# time: 2022-05-12 13:25:03 UTC
# mode: r
+population_trend <- dataset %>% filter(name %in% highest_variance)

# time: 2022-05-12 13:25:08 UTC
# mode: r
+population_trend <- population_trend %>% ungroup() %>% dplyr::select(name, day, daily, expected, expected_var, deviation, anomaly) %>% filter(daily<=1)

# time: 2022-05-12 13:25:08 UTC
# mode: r
+time_order <- population_trend %>%
+    arrange(day) %>%
+    ungroup() %>%
+    dplyr::select(day) %>%
+    unique() %>%
+    mutate(day_order = paste0(row_number(), " ", day))
+time_order$day_order <- factor(time_order$day_order)
+population_trend <- population_trend %>% left_join(time_order)
+
+daily_values <- population_trend %>% 
+                group_by(day_order, name) %>% 
+                summarize(M = winmean(expected, na.rm=TRUE),
+                          U = M + 2 * sqrt(max(expected_var)),
+                          L = M - 2 * sqrt(max(expected_var)
+    ))
+ 

# time: 2022-05-12 13:25:13 UTC
# mode: r
+personal_trend <- dataset %>% filter(creator_name == "claimcompanies") %>% 
+                    filter(name %in%highest_variance) %>% left_join(time_order)

# time: 2022-05-12 13:25:18 UTC
# mode: r
+personal_trend 

# time: 2022-05-12 13:25:34 UTC
# mode: r
+personal_trend

# time: 2022-05-12 14:16:48 UTC
# mode: r
+library(shiny)

# time: 2022-05-12 14:16:49 UTC
# mode: r
+library(shinydashboard)

# time: 2022-05-12 14:16:49 UTC
# mode: r
+library(dplyr)

# time: 2022-05-12 14:16:50 UTC
# mode: r
+library(readr)

# time: 2022-05-12 14:16:50 UTC
# mode: r
+library(lubridate)

# time: 2022-05-12 14:16:50 UTC
# mode: r
+library(tidyr)

# time: 2022-05-12 14:18:24 UTC
# mode: r
+?ggraph

# time: 2022-05-12 14:18:54 UTC
# mode: r
+?ggraph::layout

# time: 2022-05-12 14:19:57 UTC
# mode: r
+?create_layout

# time: 2022-05-13 11:03:53 UTC
# mode: r
+ target_day

# time: 2022-05-16 13:54:54 UTC
# mode: r
+library(fpc)

# time: 2022-05-16 13:54:56 UTC
# mode: r
+library(subspace)

# time: 2022-05-16 13:57:58 UTC
# mode: r
+library(fpc)

# time: 2022-05-16 13:57:59 UTC
# mode: r
+library(subspace)

# time: 2022-05-16 13:58:01 UTC
# mode: r
+library(fpc)

# time: 2022-05-16 13:58:02 UTC
# mode: r
+library(subspace)

# time: 2022-05-16 13:58:03 UTC
# mode: r
+source("modules/memoization.R")

# time: 2022-05-16 13:58:14 UTC
# mode: r
+population <- load("store/full_tweets.feather")

# time: 2022-05-16 13:58:14 UTC
# mode: r
+anomalies <- load("export/anomaly_tracking.feather")

# time: 2022-05-16 13:58:17 UTC
# mode: r
+vars <- readRDS("store/highest_variance.RDS")

# time: 2022-05-16 13:58:19 UTC
# mode: r
+vars 

# time: 2022-05-16 13:58:21 UTC
# mode: r
+anomalies 

# time: 2022-05-16 13:58:23 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 13:58:31 UTC
# mode: r
+cluster_data_mtx <- as.matrix(cluster_data[1:100,])

# time: 2022-05-16 13:58:34 UTC
# mode: r
+start <- proc.time()

# time: 2022-05-16 13:58:34 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi = 10, tau = 0.2)

# time: 2022-05-16 14:05:37 UTC
# mode: r
+library(fpc)

# time: 2022-05-16 14:05:38 UTC
# mode: r
+library(subspace)

# time: 2022-05-16 14:05:44 UTC
# mode: r
+source("modules/memoization.R")

# time: 2022-05-16 14:05:55 UTC
# mode: r
+population <- load("store/full_tweets.feather")

# time: 2022-05-16 14:05:55 UTC
# mode: r
+anomalies <- load("export/anomaly_tracking.feather")

# time: 2022-05-16 14:05:58 UTC
# mode: r
+vars <- readRDS("store/highest_variance.RDS")

# time: 2022-05-16 14:05:58 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:05:58 UTC
# mode: r
+cluster_data_mtx <- as.matrix(cluster_data[1:100,])

# time: 2022-05-16 14:06:10 UTC
# mode: r
+start <- proc.time()

# time: 2022-05-16 14:06:10 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi = 10, tau = 0.2)

# time: 2022-05-16 14:10:53 UTC
# mode: r
+library(fpc)

# time: 2022-05-16 14:10:55 UTC
# mode: r
+library(subspace)

# time: 2022-05-16 14:11:05 UTC
# mode: r
+source("modules/memoization.R")

# time: 2022-05-16 14:11:40 UTC
# mode: r
+population <- load("store/full_tweets.feather")

# time: 2022-05-16 14:11:40 UTC
# mode: r
+anomalies <- load("export/anomaly_tracking.feather")

# time: 2022-05-16 14:11:44 UTC
# mode: r
+vars <- readRDS("store/highest_variance.RDS")

# time: 2022-05-16 14:12:13 UTC
# mode: r
+cluster_data_mtx <- as.matrix(cluster_data[1:1000,])

# time: 2022-05-16 14:12:14 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:12:14 UTC
# mode: r
+cluster_data_mtx <- as.matrix(cluster_data[1:1000,])

# time: 2022-05-16 14:12:16 UTC
# mode: r
+cluster_data_mtx 

# time: 2022-05-16 14:12:20 UTC
# mode: r
+cluster_data_mtx <- as.matrix(cluster_data[1:100,])

# time: 2022-05-16 14:12:27 UTC
# mode: r
+cluster_data_mtx 

# time: 2022-05-16 14:12:49 UTC
# mode: r
+?CLIQUE

# time: 2022-05-16 14:13:02 UTC
# mode: r
+     data("subspace_dataset")

# time: 2022-05-16 14:13:03 UTC
# mode: r
+     CLIQUE(subspace_dataset,xi=40,tau=0.06)

# time: 2022-05-16 14:13:20 UTC
# mode: r
+subspace_dataset

# time: 2022-05-16 14:13:57 UTC
# mode: r
+typeof(subspace_dataset)

# time: 2022-05-16 14:14:01 UTC
# mode: r
+cluster_data_mtx <- as.matrix(cluster_data[1:100,])

# time: 2022-05-16 14:14:02 UTC
# mode: r
+cluster_data_mtx 

# time: 2022-05-16 14:14:21 UTC
# mode: r
+typeof(cluster_data_mtx)

# time: 2022-05-16 14:14:45 UTC
# mode: r
+dim(subspace_dataset)

# time: 2022-05-16 14:14:52 UTC
# mode: r
+cluster_data_mtx <- matrix(cluster_data[1:100,])

# time: 2022-05-16 14:14:54 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:14:54 UTC
# mode: r
+cluster_data_mtx <- matrix(cluster_data[1:100,])

# time: 2022-05-16 14:14:55 UTC
# mode: r
+cluster_data_mtx 

# time: 2022-05-16 14:15:08 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:15:08 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:100,])

# time: 2022-05-16 14:15:10 UTC
# mode: r
+cluster_data_mtx 

# time: 2022-05-16 14:15:14 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx)

# time: 2022-05-16 14:16:06 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-16 14:17:03 UTC
# mode: r
+source("modules/memoization.R")

# time: 2022-05-16 14:17:13 UTC
# mode: r
+population <- load("store/full_tweets.feather")

# time: 2022-05-16 14:17:13 UTC
# mode: r
+anomalies <- load("export/anomaly_tracking.feather")

# time: 2022-05-16 14:17:16 UTC
# mode: r
+vars <- readRDS("store/highest_variance.RDS")

# time: 2022-05-16 14:17:21 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:17:21 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:100,c(1,2,3,4,5)])

# time: 2022-05-16 14:17:22 UTC
# mode: r
+cluster_data_mtx 

# time: 2022-05-16 14:17:25 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx)

# time: 2022-05-16 14:17:28 UTC
# mode: r
+library(subspace)

# time: 2022-05-16 14:17:30 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx)

# time: 2022-05-16 14:17:34 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:17:45 UTC
# mode: r
+plot(clique_fit)

# time: 2022-05-16 14:17:50 UTC
# mode: r
+clique_fit

# time: 2022-05-16 14:18:18 UTC
# mode: r
+str(clique_fit[[1]]$subspace)

# time: 2022-05-16 14:18:19 UTC
# mode: r
+str(clique_fit[[1]]$objects)

# time: 2022-05-16 14:18:22 UTC
# mode: r
+str(clique_fit[[2]]$objects)

# time: 2022-05-16 14:18:23 UTC
# mode: r
+str(clique_fit[[2]]$subspace)

# time: 2022-05-16 14:18:46 UTC
# mode: r
+clique_fit

# time: 2022-05-16 14:19:00 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=10, tau=0.3)

# time: 2022-05-16 14:19:05 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:19:09 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=20, tau=0.3)

# time: 2022-05-16 14:19:12 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:19:16 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=20, tau=0.5)

# time: 2022-05-16 14:19:19 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:19:23 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=20, tau=0.8)

# time: 2022-05-16 14:19:26 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:19:35 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.8)

# time: 2022-05-16 14:19:38 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:19:44 UTC
# mode: r
+?CLIQUE

# time: 2022-05-16 14:19:57 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:20:07 UTC
# mode: r
+dim(cluster_data)

# time: 2022-05-16 14:20:15 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:100,1:10])

# time: 2022-05-16 14:20:16 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:20:17 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:100,1:10])

# time: 2022-05-16 14:20:18 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.8)

# time: 2022-05-16 14:20:21 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:20:27 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:100,1:20])

# time: 2022-05-16 14:20:30 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.8)

# time: 2022-05-16 14:20:33 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:20:39 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:20:39 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:100,1:40])

# time: 2022-05-16 14:20:41 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.8)

# time: 2022-05-16 14:20:44 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:20:50 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.9)

# time: 2022-05-16 14:20:52 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:21:00 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:21:00 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:100,1:56])

# time: 2022-05-16 14:21:03 UTC
# mode: r
+cluster_data_mtx 

# time: 2022-05-16 14:21:08 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.9)

# time: 2022-05-16 14:21:09 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:21:15 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:21:15 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:1000,1:56])

# time: 2022-05-16 14:21:17 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.9)

# time: 2022-05-16 14:21:20 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:21:25 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:21:25 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:10000,1:56])

# time: 2022-05-16 14:21:26 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.9)

# time: 2022-05-16 14:21:29 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:22:59 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:23:00 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data[1:10000,1:56])

# time: 2022-05-16 14:23:00 UTC
# mode: r
+cluster_data_mtx 

# time: 2022-05-16 14:23:05 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.9)

# time: 2022-05-16 14:23:07 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:23:15 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:23:15 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data)

# time: 2022-05-16 14:23:17 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=0.9)

# time: 2022-05-16 14:23:28 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:23:32 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=60, tau=0.9)

# time: 2022-05-16 14:23:37 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:24:03 UTC
# mode: r
+attributes(clique_fit)

# time: 2022-05-16 14:24:12 UTC
# mode: r
+dir(clique_fit)

# time: 2022-05-16 14:24:15 UTC
# mode: r
+help(clique_fit)

# time: 2022-05-16 14:24:24 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:24:42 UTC
# mode: r
+?subspace::SubClu

# time: 2022-05-16 14:25:07 UTC
# mode: r
+subspace:::subspace_cluster

# time: 2022-05-16 14:25:11 UTC
# mode: r
+?subspace:::subspace_cluster

# time: 2022-05-16 14:25:16 UTC
# mode: r
+subspace:::subspace_cluster

# time: 2022-05-16 14:25:42 UTC
# mode: r
+for (i in clique_fit){
+    print(i)
+}

# time: 2022-05-16 14:26:03 UTC
# mode: r
+for (i in clique_fit){
+    print(i$subspace)
+}

# time: 2022-05-16 14:26:18 UTC
# mode: r
+for (i in clique_fit){
+    print(i$subspace)
+    print(i$objects)
+}

# time: 2022-05-16 14:26:35 UTC
# mode: r
+for (i in clique_fit){
+    print(i$subspace)
+    print(length(i$objects))
+}

# time: 2022-05-16 14:26:41 UTC
# mode: r
+str(clique_fit[[1]]$subspace)

# time: 2022-05-16 14:26:42 UTC
# mode: r
+str(clique_fit[[1]]$objects)

# time: 2022-05-16 14:26:45 UTC
# mode: r
+str(clique_fit[[2]]$subspace)

# time: 2022-05-16 14:26:47 UTC
# mode: r
+str(clique_fit[[3]]$subspace)

# time: 2022-05-16 14:26:59 UTC
# mode: r
+str(clique_fit[[31]]$subspace)

# time: 2022-05-16 14:27:00 UTC
# mode: r
+str(clique_fit[[31]]$objects)

# time: 2022-05-16 14:27:04 UTC
# mode: r
+str(clique_fit[[10]]$subspace)

# time: 2022-05-16 14:27:05 UTC
# mode: r
+str(clique_fit[[10]]$objects)

# time: 2022-05-16 14:27:12 UTC
# mode: r
+str(clique_fit[[9]]$subspace)

# time: 2022-05-16 14:27:13 UTC
# mode: r
+str(clique_fit[[9]]$objects)

# time: 2022-05-16 14:27:25 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=60, tau=0.1)

# time: 2022-05-16 14:34:34 UTC
# mode: r
+library(fpc)

# time: 2022-05-16 14:34:35 UTC
# mode: r
+library(subspace)

# time: 2022-05-16 14:35:16 UTC
# mode: r
+source("modules/memoization.R")

# time: 2022-05-16 14:35:26 UTC
# mode: r
+population <- load("store/full_tweets.feather")

# time: 2022-05-16 14:35:39 UTC
# mode: r
+anomalies <- load("export/anomaly_tracking.feather")

# time: 2022-05-16 14:35:46 UTC
# mode: r
+vars <- readRDS("store/highest_variance.RDS")

# time: 2022-05-16 14:35:48 UTC
# mode: r
+cluster_data <- population %>% dplyr::select(i:formality)

# time: 2022-05-16 14:36:15 UTC
# mode: r
+cluster_data_mtx <- data.frame(cluster_data)

# time: 2022-05-16 14:36:42 UTC
# mode: r
+THAU <- 0.95

# time: 2022-05-16 14:36:43 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=40, tau=THAU)

# time: 2022-05-16 14:36:49 UTC
# mode: r
+clique_fit 

# time: 2022-05-16 14:36:56 UTC
# mode: r
+str(clique_fit[[1]]$subspace)

# time: 2022-05-16 14:36:57 UTC
# mode: r
+str(clique_fit[[1]]$objects)

# time: 2022-05-16 14:37:03 UTC
# mode: r
+str(clique_fit[[2]]$objects)

# time: 2022-05-16 14:37:05 UTC
# mode: r
+str(clique_fit[[1]]$objects)

# time: 2022-05-16 14:37:10 UTC
# mode: r
+str(clique_fit[[3]]$objects)

# time: 2022-05-16 14:37:12 UTC
# mode: r
+str(clique_fit[[5]]$objects)

# time: 2022-05-16 14:37:13 UTC
# mode: r
+str(clique_fit[[5]]$subspace)

# time: 2022-05-16 14:37:15 UTC
# mode: r
+str(clique_fit[[4]]$objects)

# time: 2022-05-16 14:37:20 UTC
# mode: r
+str(clique_fit[[3]]$objects)

# time: 2022-05-16 14:37:21 UTC
# mode: r
+str(clique_fit[[2]]$objects)

# time: 2022-05-16 14:37:24 UTC
# mode: r
+str(clique_fit[[1]]$objects)

# time: 2022-05-16 14:37:39 UTC
# mode: r
+?CLIQUE

# time: 2022-05-16 14:38:10 UTC
# mode: r
+str(clique_fit[[1]]$subspace)

# time: 2022-05-16 14:38:56 UTC
# mode: r
+clique_result <- clique_fit

# time: 2022-05-16 14:39:06 UTC
# mode: r
+feature_names <- colnames(cluster_data)

# time: 2022-05-16 14:39:08 UTC
# mode: r
+feature_names 

# time: 2022-05-16 14:39:39 UTC
# mode: r
+get_clique_results <- function(clique_result, feature_names) {
+    for (subspace in clique_result) {
+        print(feature_names[subspace$subspace])
+    }
+
+}

# time: 2022-05-16 14:39:42 UTC
# mode: r
+    for (subspace in clique_result) {
+        print(feature_names[subspace$subspace])
+    }

# time: 2022-05-16 14:39:53 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=20, tau=THAU)

# time: 2022-05-16 14:39:57 UTC
# mode: r
+clique_result <- clique_fit

# time: 2022-05-16 14:39:57 UTC
# mode: r
+feature_names <- colnames(cluster_data)

# time: 2022-05-16 14:39:59 UTC
# mode: r
+    for (subspace in clique_result) {
+        print(feature_names[subspace$subspace])
+    }

# time: 2022-05-16 14:40:38 UTC
# mode: r
+    results <- tibble()

# time: 2022-05-16 14:40:42 UTC
# mode: r
+results 

# time: 2022-05-16 14:43:27 UTC
# mode: r
+    results <- tibble()

# time: 2022-05-16 14:45:23 UTC
# mode: r
+typeof(clique_result[1])

# time: 2022-05-16 14:45:29 UTC
# mode: r
+typeof(clique_result[[1]])

# time: 2022-05-16 14:45:36 UTC
# mode: r
+clique_result[1]

# time: 2022-05-16 14:45:48 UTC
# mode: r
+clique_result[2]

# time: 2022-05-16 14:46:37 UTC
# mode: r
+            result <- tibble(objects = subspace$objects)

# time: 2022-05-16 14:46:39 UTC
# mode: r
+result 

# time: 2022-05-16 14:46:55 UTC
# mode: r
+            result <- tibble(objects = subspace$objects, feature = subspace$subspace)

# time: 2022-05-16 14:47:07 UTC
# mode: r
+            result <- tibble(objects = subspace$objects, feature = paste(subspace$subspace, collapse="_"))

# time: 2022-05-16 14:47:11 UTC
# mode: r
+result 

# time: 2022-05-16 14:47:40 UTC
# mode: r
+            result <- tibble(objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse="_"))

# time: 2022-05-16 14:47:43 UTC
# mode: r
+result 

# time: 2022-05-16 14:47:52 UTC
# mode: r
+            result <- tibble(objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "))

# time: 2022-05-16 14:47:54 UTC
# mode: r
+result 

# time: 2022-05-16 14:48:04 UTC
# mode: r
+ clique_result

# time: 2022-05-16 14:48:28 UTC
# mode: r
+            run <- run+1

# time: 2022-05-16 14:48:29 UTC
# mode: r
+            result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "))

# time: 2022-05-16 14:48:32 UTC
# mode: r
+            run <- run+1

# time: 2022-05-16 14:48:33 UTC
# mode: r
+    run <- 0

# time: 2022-05-16 14:48:34 UTC
# mode: r
+            run <- run+1

# time: 2022-05-16 14:48:34 UTC
# mode: r
+            result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "))

# time: 2022-05-16 14:48:35 UTC
# mode: r
+result 

# time: 2022-05-16 14:48:50 UTC
# mode: r
+    results <- tibble()

# time: 2022-05-16 14:48:50 UTC
# mode: r
+    run <- 0

# time: 2022-05-16 14:48:50 UTC
# mode: r
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "))
+            results <- bind_rows(results, result)
+        }
+    }

# time: 2022-05-16 14:48:54 UTC
# mode: r
+results 

# time: 2022-05-17 08:14:25 UTC
# mode: r
+library(subspace)

# time: 2022-05-17 08:14:26 UTC
# mode: r
+library(fpc)

# time: 2022-05-17 08:14:29 UTC
# mode: r
+THAU <- 0.95

# time: 2022-05-17 08:14:29 UTC
# mode: r
+source("modules/memoization.R")

# time: 2022-05-17 08:14:50 UTC
# mode: r
+source("modules/anomalies.R")

# time: 2022-05-17 08:14:52 UTC
# mode: r
+population <- load("store/full_tweets.feather")

# time: 2022-05-17 08:15:02 UTC
# mode: r
+anomalies <- load("export/anomaly_tracking.feather")
+vars <- readRDS("store/highest_variance.RDS")
+population_trend <- load("store/population_data.feather")
+daily_values <- load("store/daily_values.feather")
+dataset <- load("export/anomaly_tracking.feather")
+highest_variance <- readRDS("store/highest_variance.RDS")
+time_order <- load("store/time_order.feather")
+personal_trend <- dataset %>% filter(creator_name == "claimcompanies") %>% 
+                    filter(name %in%highest_variance) %>% left_join(time_order)
+
+cluster_data <- population %>% dplyr::select(i:formality)
+cluster_data_mtx <- data.frame(cluster_data)

# time: 2022-05-17 08:16:06 UTC
# mode: r
+THAU <- 0.95

# time: 2022-05-17 08:16:06 UTC
# mode: r
+clique_fit <- CLIQUE(cluster_data_mtx, xi=20, tau=THAU)

# time: 2022-05-17 08:18:43 UTC
# mode: r
+clique_result <- clique_fit

# time: 2022-05-17 08:18:43 UTC
# mode: r
+feature_names <- colnames(cluster_data)

# time: 2022-05-17 08:18:44 UTC
# mode: r
+clique_result 

# time: 2022-05-17 08:18:47 UTC
# mode: r
+feature_names 

# time: 2022-05-17 08:18:50 UTC
# mode: r
+    results <- tibble()

# time: 2022-05-17 08:18:50 UTC
# mode: r
+    run <- 0

# time: 2022-05-17 08:18:50 UTC
# mode: r
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "))
+            results <- bind_rows(results, result)
+        }
+    }

# time: 2022-05-17 08:18:52 UTC
# mode: r
+results 

# time: 2022-05-17 08:19:00 UTC
# mode: r
+population_trend

# time: 2022-05-17 08:19:35 UTC
# mode: r
+cluster_data_mtx

# time: 2022-05-17 08:19:40 UTC
# mode: r
+cluster_data 

# time: 2022-05-17 08:19:48 UTC
# mode: r
+population_trend 

# time: 2022-05-17 08:20:16 UTC
# mode: r
+dataset 

# time: 2022-05-17 08:20:21 UTC
# mode: r
+population_trend 

# time: 2022-05-17 08:21:39 UTC
# mode: r
+population 

# time: 2022-05-17 08:22:28 UTC
# mode: r
+            result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "))

# time: 2022-05-17 08:22:30 UTC
# mode: r
+result 

# time: 2022-05-17 08:22:41 UTC
# mode: r
+cluster_data 

# time: 2022-05-17 08:23:15 UTC
# mode: r
+    results <- tibble(objects = row_number())

# time: 2022-05-17 08:23:17 UTC
# mode: r
+results 

# time: 2022-05-17 08:23:18 UTC
# mode: r
+    results <- tibble(objects = row_number())

# time: 2022-05-17 08:23:43 UTC
# mode: r
+ cluster_data

# time: 2022-05-17 08:23:58 UTC
# mode: r
+    results <- tibble(objects = 1:nrow(cluster_data))

# time: 2022-05-17 08:24:14 UTC
# mode: r
+results 

# time: 2022-05-17 08:24:38 UTC
# mode: r
+    results <- tibble(objects = 1:nrow(cluster_data))

# time: 2022-05-17 08:24:39 UTC
# mode: r
+    run <- 0

# time: 2022-05-17 08:25:08 UTC
# mode: r
+            result <- tibble(run=run,objects = subspace$objects, anomaly = FALSE)

# time: 2022-05-17 08:25:09 UTC
# mode: r
+            results <- results %>% left_join(result)

# time: 2022-05-17 08:25:12 UTC
# mode: r
+results 

# time: 2022-05-17 08:25:18 UTC
# mode: r
+    results <- tibble(objects = 1:nrow(cluster_data))

# time: 2022-05-17 08:25:18 UTC
# mode: r
+    run <- 0

# time: 2022-05-17 08:25:19 UTC
# mode: r
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            # result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "), anomaly = FALSE)
+            result <- tibble(run=run,objects = subspace$objects, anomaly = FALSE)
+            results <- results %>% left_join(result)
+        }
+    }

# time: 2022-05-17 08:25:22 UTC
# mode: r
+results 

# time: 2022-05-17 08:25:51 UTC
# mode: r
+    results <- tibble(objects = 1:nrow(cluster_data))

# time: 2022-05-17 08:25:52 UTC
# mode: r
+    run <- 0

# time: 2022-05-17 08:25:52 UTC
# mode: r
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            # result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "), anomaly = FALSE)
+            result <- tibble(run=run,objects = subspace$objects, anomaly = FALSE)
+            results <- results %>% left_join(result, by=c('objects'='objects'))
+        }
+    }

# time: 2022-05-17 08:25:55 UTC
# mode: r
+results 

# time: 2022-05-17 08:27:02 UTC
# mode: r
+    results <- tibble(objects = 1:nrow(cluster_data))

# time: 2022-05-17 08:27:02 UTC
# mode: r
+    run <- 0

# time: 2022-05-17 08:27:06 UTC
# mode: r
+    results <- tibble(objects = 1:nrow(cluster_data))

# time: 2022-05-17 08:27:06 UTC
# mode: r
+    run <- 0

# time: 2022-05-17 08:27:06 UTC
# mode: r
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            # result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "), anomaly = FALSE)
+            result <- tibble(objects = subspace$objects, anomaly = FALSE)
+            results <- results %>% left_join(result, by=c('objects'='objects'))
+        }
+    }

# time: 2022-05-17 08:27:09 UTC
# mode: r
+results 

# time: 2022-05-17 08:27:31 UTC
# mode: r
+    results %>% pivot_longer(2:ncol(results))

# time: 2022-05-17 08:28:00 UTC
# mode: r
+    results %>% pivot_longer(2:ncol(results)) %>% group_by(objects) %>% summarize(detection=sum(value))

# time: 2022-05-17 08:28:10 UTC
# mode: r
+    results <- results %>% pivot_longer(2:ncol(results)) %>% group_by(objects) %>% summarize(detection=sum(value))

# time: 2022-05-17 08:28:12 UTC
# mode: r
+results 

# time: 2022-05-17 08:28:42 UTC
# mode: r
+    results %>% mutate(detection = if_else(is.na(detection), TRUE, FALSE))

# time: 2022-05-17 08:28:50 UTC
# mode: r
+get_clique_results <- function(clique_result, feature_names, cluster_data) {
+    results <- tibble(objects = 1:nrow(cluster_data))
+    run <- 0
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            # result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "), anomaly = FALSE)
+            result <- tibble(objects = subspace$objects, anomaly = FALSE)
+            results <- results %>% left_join(result, by=c('objects'='objects'))
+        }
+    }
+
+    results <- results %>% pivot_longer(2:ncol(results)) %>% group_by(objects) %>% summarize(detection=sum(value))
+    results %>% mutate(detection = if_else(is.na(detection), TRUE, FALSE))
+    results
+}

# time: 2022-05-17 08:29:16 UTC
# mode: r
+dataset 

# time: 2022-05-17 08:29:26 UTC
# mode: r
+population_trend 

# time: 2022-05-17 08:29:31 UTC
# mode: r
+anomalies 

# time: 2022-05-17 08:29:34 UTC
# mode: r
+population 

# time: 2022-05-17 08:29:41 UTC
# mode: r
+results

# time: 2022-05-17 08:29:53 UTC
# mode: r
+    results  <- results %>% mutate(detection = if_else(is.na(detection), TRUE, FALSE))

# time: 2022-05-17 08:29:54 UTC
# mode: r
+    results

# time: 2022-05-17 08:30:11 UTC
# mode: r
+population_trend

# time: 2022-05-17 08:30:22 UTC
# mode: r
+ daily_values

# time: 2022-05-17 08:30:26 UTC
# mode: r
+ personal_trend

# time: 2022-05-17 08:30:49 UTC
# mode: r
+results

# time: 2022-05-17 08:30:56 UTC
# mode: r
+population 

# time: 2022-05-17 08:31:09 UTC
# mode: r
+population_trend 

# time: 2022-05-17 08:31:29 UTC
# mode: r
+dataset 

# time: 2022-05-17 08:31:37 UTC
# mode: r
+ cluster_data

# time: 2022-05-17 08:32:06 UTC
# mode: r
+results <- get_clique_results(clique_result, feature_names, cluster_data)

# time: 2022-05-17 08:32:09 UTC
# mode: r
+results 

# time: 2022-05-17 08:32:12 UTC
# mode: r
+get_clique_results <- function(clique_result, feature_names, cluster_data) {
+    results <- tibble(objects = 1:nrow(cluster_data))
+    run <- 0
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            # result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "), anomaly = FALSE)
+            result <- tibble(objects = subspace$objects, anomaly = FALSE)
+            results <- results %>% left_join(result, by=c('objects'='objects'))
+        }
+    }
+
+    results <- results %>% pivot_longer(2:ncol(results)) %>% group_by(objects) %>% summarize(detection=sum(value))
+    results  <- results %>% mutate(detection = if_else(is.na(detection), TRUE, FALSE))
+    results
+}

# time: 2022-05-17 08:32:13 UTC
# mode: r
+results <- get_clique_results(clique_result, feature_names, cluster_data)

# time: 2022-05-17 08:32:14 UTC
# mode: r
+results 

# time: 2022-05-17 08:32:30 UTC
# mode: r
+dataset

# time: 2022-05-17 08:32:37 UTC
# mode: r
+population

# time: 2022-05-17 08:32:51 UTC
# mode: r
+results <- bind_cols(population$creator_name, results)

# time: 2022-05-17 08:32:54 UTC
# mode: r
+results 

# time: 2022-05-17 08:33:00 UTC
# mode: r
+results <- get_clique_results(clique_result, feature_names, cluster_data)

# time: 2022-05-17 08:33:01 UTC
# mode: r
+results <- bind_cols(user = population$creator_name, results)

# time: 2022-05-17 08:33:03 UTC
# mode: r
+results 

# time: 2022-05-17 08:33:21 UTC
# mode: r
+personal_trend

# time: 2022-05-17 08:33:43 UTC
# mode: r
+ population

# time: 2022-05-17 08:33:50 UTC
# mode: r
+results <- bind_cols(creator_name = population$creator_name, day= population$day, results)

# time: 2022-05-17 08:33:52 UTC
# mode: r
+results <- get_clique_results(clique_result, feature_names, cluster_data)

# time: 2022-05-17 08:33:52 UTC
# mode: r
+results <- bind_cols(creator_name = population$creator_name, day= population$day, results)

# time: 2022-05-17 08:33:53 UTC
# mode: r
+results 

# time: 2022-05-17 08:33:59 UTC
# mode: r
+personal_trend 

# time: 2022-05-17 08:34:10 UTC
# mode: r
+personal_trend <- personal_trend %>% left_join(results)

# time: 2022-05-17 08:34:13 UTC
# mode: r
+personal_trend 

# time: 2022-05-17 08:34:32 UTC
# mode: r
+personal_trend$detection

# time: 2022-05-17 08:35:20 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend, dotmapping) {
+    
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily, color=dotmapping), alpha = 1 / 10) +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection), alpha = 1 / 10) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name)) +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:35:40 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10) +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection), alpha = 1 / 10) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name)) +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:35:41 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 08:36:14 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10, color='grey70') +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection), alpha = 1 / 10) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name)) +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:36:15 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 08:36:44 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10, color='grey70') +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection)) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name)) +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:36:45 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 08:37:45 UTC
# mode: r
+ personal_trend

# time: 2022-05-17 08:37:48 UTC
# mode: r
+get_clique_results <- function(clique_result, feature_names, cluster_data) {
+    results <- tibble(objects = 1:nrow(cluster_data))
+    run <- 0
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            # result <- tibble(run=run,objects = subspace$objects, feature = paste(feature_names[subspace$subspace], collapse=" "), anomaly = FALSE)
+            result <- tibble(objects = subspace$objects, anomaly = FALSE)
+            results <- results %>% left_join(result, by=c('objects'='objects'))
+        }
+    }
+
+    results <- results %>% pivot_longer(2:ncol(results)) %>% group_by(objects) %>% summarize(detection=sum(value))
+    results  <- results %>% mutate(detection = if_else(is.na(detection), TRUE, FALSE))
+    results
+}

# time: 2022-05-17 08:38:00 UTC
# mode: r
+    results <- results %>% pivot_longer(2:ncol(results)) %>% group_by(objects) %>% summarize(detection=sum(value))

# time: 2022-05-17 08:38:00 UTC
# mode: r
+    results  <- results %>% mutate(detection = if_else(is.na(detection), TRUE, FALSE))

# time: 2022-05-17 08:38:01 UTC
# mode: r
+    results

# time: 2022-05-17 08:38:16 UTC
# mode: r
+personal_trend 

# time: 2022-05-17 08:39:43 UTC
# mode: r
+get_clique_results <- function(clique_result, feature_names, cluster_data) {
+    results <- tibble(objects = 1:nrow(cluster_data))
+    features <- c()
+    run <- 0
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            features <- c(features, paste(feature_names[subspace$subspace], collapse=" "))
+            result <- tibble(objects = subspace$objects, anomaly = FALSE)
+            results <- results %>% left_join(result, by=c('objects'='objects'))
+        }
+    }
+
+    results <- results %>% pivot_longer(2:ncol(results)) %>% group_by(objects) %>% summarize(detection=sum(value))
+    results  <- results %>% mutate(detection = if_else(is.na(detection), TRUE, FALSE))
+    list(results, feautes)
+}

# time: 2022-05-17 08:39:45 UTC
# mode: r
+results <- get_clique_results(clique_result, feature_names, cluster_data)

# time: 2022-05-17 08:39:57 UTC
# mode: r
+get_clique_results <- function(clique_result, feature_names, cluster_data) {
+    results <- tibble(objects = 1:nrow(cluster_data))
+    features <- c()
+    run <- 0
+    for (subspace in clique_result) {
+        if (length(feature_names[subspace$subspace]) > 1) {
+            run <- run+1
+            features <- c(features, paste(feature_names[subspace$subspace], collapse=" "))
+            result <- tibble(objects = subspace$objects, anomaly = FALSE)
+            results <- results %>% left_join(result, by=c('objects'='objects'))
+        }
+    }
+
+    results <- results %>% pivot_longer(2:ncol(results)) %>% group_by(objects) %>% summarize(detection=sum(value))
+    results  <- results %>% mutate(detection = if_else(is.na(detection), TRUE, FALSE))
+    list(results, features)
+}

# time: 2022-05-17 08:39:58 UTC
# mode: r
+results <- get_clique_results(clique_result, feature_names, cluster_data)

# time: 2022-05-17 08:39:59 UTC
# mode: r
+results 

# time: 2022-05-17 08:40:09 UTC
# mode: r
+results <- bind_cols(creator_name = population$creator_name, day= population$day, results[[1]])

# time: 2022-05-17 08:40:12 UTC
# mode: r
+results <- get_clique_results(clique_result, feature_names, cluster_data)

# time: 2022-05-17 08:40:23 UTC
# mode: r
+features <- results[[2]]

# time: 2022-05-17 08:40:25 UTC
# mode: r
+results <- bind_cols(creator_name = population$creator_name, day= population$day, results[[1]])

# time: 2022-05-17 08:40:27 UTC
# mode: r
+features 

# time: 2022-05-17 08:40:55 UTC
# mode: r
+features <- paste0(uniuqe(features), collapse=",")

# time: 2022-05-17 08:41:04 UTC
# mode: r
+features <- paste0(unique(features))

# time: 2022-05-17 08:41:06 UTC
# mode: r
+features 

# time: 2022-05-17 08:41:36 UTC
# mode: r
+features <- unlist(lapply(features), function(x){strsplit(x, " ")})

# time: 2022-05-17 08:41:44 UTC
# mode: r
+features <- unlist(lapply(features, function(x){strsplit(x, " ")}))

# time: 2022-05-17 08:41:47 UTC
# mode: r
+features 

# time: 2022-05-17 08:41:57 UTC
# mode: r
+results <- get_clique_results(clique_result, feature_names, cluster_data)

# time: 2022-05-17 08:41:58 UTC
# mode: r
+features <- results[[2]]

# time: 2022-05-17 08:41:59 UTC
# mode: r
+features <- unique(unlist(lapply(features, function(x){strsplit(x, " ")})))

# time: 2022-05-17 08:42:01 UTC
# mode: r
+features 

# time: 2022-05-17 08:42:04 UTC
# mode: r
+results <- bind_cols(creator_name = population$creator_name, day= population$day, results[[1]])

# time: 2022-05-17 08:42:14 UTC
# mode: r
+personal_trend <- dataset %>% filter(creator_name == "claimcompanies") %>% 
+                    filter(name %in% features) %>% left_join(time_order)

# time: 2022-05-17 08:42:21 UTC
# mode: r
+personal_trend <- personal_trend %>% left_join(results)

# time: 2022-05-17 08:42:23 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10, color='grey70') +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection)) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name)) +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:42:24 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 08:42:55 UTC
# mode: r
+population_trend

# time: 2022-05-17 08:43:09 UTC
# mode: r
+uniuqe(population_trend$name)

# time: 2022-05-17 08:43:14 UTC
# mode: r
+unique(population_trend$name)

# time: 2022-05-17 08:44:04 UTC
# mode: r
+population_trend <- dataset %>% filter(name %in% highest_variance)

# time: 2022-05-17 08:44:14 UTC
# mode: r
+population_trend <- dataset %>% filter(name %in% features)

# time: 2022-05-17 08:44:23 UTC
# mode: r
+population_trend <- population_trend %>% ungroup() %>% dplyr::select(name, day, daily, expected, expected_var, deviation, anomaly) %>% filter(daily<=1)

# time: 2022-05-17 08:44:23 UTC
# mode: r
+time_order <- population_trend %>%
+    arrange(day) %>%
+        ungroup() %>%
+            dplyr::select(day) %>%
+                unique() %>%
+                    mutate(day_order = paste0(row_number(), " ", day))

# time: 2022-05-17 08:44:25 UTC
# mode: r
+time_order$day_order <- factor(time_order$day_order)

# time: 2022-05-17 08:44:26 UTC
# mode: r
+population_trend <- population_trend %>% left_join(time_order)

# time: 2022-05-17 08:44:28 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10, color='grey70') +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection)) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name)) +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:44:29 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 08:56:45 UTC
# mode: r
+ personal_trend

# time: 2022-05-17 08:56:57 UTC
# mode: r
+results <- get_clique_results(clique_result, feature_names, cluster_data)

# time: 2022-05-17 08:56:58 UTC
# mode: r
+features <- results[[2]]

# time: 2022-05-17 08:56:58 UTC
# mode: r
+features <- unique(unlist(lapply(features, function(x){strsplit(x, " ")})))

# time: 2022-05-17 08:56:59 UTC
# mode: r
+results <- bind_cols(creator_name = population$creator_name, day= population$day, results[[1]])

# time: 2022-05-17 08:57:00 UTC
# mode: r
+personal_trend <- dataset %>% filter(creator_name == "claimcompanies") %>% 
+                    filter(name %in% features) %>% left_join(time_order)

# time: 2022-05-17 08:57:06 UTC
# mode: r
+personal_trend <- personal_trend %>% left_join(results)

# time: 2022-05-17 08:57:06 UTC
# mode: r
+results

# time: 2022-05-17 08:57:08 UTC
# mode: r
+population_trend <- dataset %>% filter(name %in% features)

# time: 2022-05-17 08:57:16 UTC
# mode: r
+population_trend <- population_trend %>% ungroup() %>% dplyr::select(name, day, daily, expected, expected_var, deviation, anomaly) %>% filter(daily<=1)

# time: 2022-05-17 08:57:16 UTC
# mode: r
+time_order <- population_trend %>%
+    arrange(day) %>%
+        ungroup() %>%
+            dplyr::select(day) %>%
+                unique() %>%
+                    mutate(day_order = paste0(row_number(), " ", day))

# time: 2022-05-17 08:57:16 UTC
# mode: r
+time_order$day_order <- factor(time_order$day_order)

# time: 2022-05-17 08:57:16 UTC
# mode: r
+population_trend <- population_trend %>% left_join(time_order)

# time: 2022-05-17 08:57:16 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10, color='grey70') +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection)) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name)) +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:57:22 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 08:57:33 UTC
# mode: r
+ daily_values

# time: 2022-05-17 08:57:55 UTC
# mode: r
+daily_values <- population_trend %>% 
+                group_by(day_order, name) %>% 
+                                summarize(M = winmean(expected, na.rm=TRUE),
+                          U = M + 2 * sqrt(max(expected_var)),
+                          L = M - 2 * sqrt(max(expected_var)
+    ))

# time: 2022-05-17 08:57:57 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10, color='grey70') +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection)) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name)) +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:57:59 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 08:58:22 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10, color='grey70') +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection)) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name), scales='free_y') +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:58:23 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 08:58:42 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    p <- ggplot() +
+        geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10, color='grey70') +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection)) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name), scales='free') +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 08:58:42 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 09:03:53 UTC
# mode: r
+anomaly_plot2 <- function(population_trend, daily_values, personal_trend) {
+    p <- ggplot() +
+        # geom_jitter(data = population_trend, aes(day_order, daily), alpha = 1 / 10, color='grey70') +
+        geom_jitter(data =personal_trend, aes(day_order, daily, color=detection, shape=detection)) +
+        geom_line(data = daily_values, aes(day_order, U), group = 1, color = "grey40", linetype = "dotted") +
+        geom_line(data = daily_values, aes(day_order, M), group = 1) +
+        geom_line(data = daily_values, aes(day_order, L), group = 1, color = "grey40", linetype = "dotted") +
+        geom_point(data = personal_trend, aes(day_order, daily, shape = anomaly), size = 3, show.legend = FALSE, fill = "orange", color = "navyblue") +
+        facet_wrap(~ beautify_text(name), scales='free') +
+        scale_shape_manual(values = c(20, 23)) +
+        theme_bw() +
+        labs(x = "Date of Encounter", y = "Rate of Indicator [0; 1]") +
+        theme(
+            panel.border = element_blank(),
+            panel.grid.minor = element_blank(),
+            axis.text = element_text(size = 11, family = "Helvetica Neue"),
+            axis.text.x = element_text(angle = 30),
+            axis.title = element_text(size = 11, family = "Helvetica Neue"),
+            text = element_text(size = 11, family = "Helvetica Neue"),
+            # panel.background = element_rect(fill='white'),
+            # panel.grid.major = element_line(color='grey70'),
+            # axis.title = element_text(family='Helvetica Neue', size =14),
+            strip.background = element_rect(fill = "white")
+        )
+    p
+}

# time: 2022-05-17 09:03:53 UTC
# mode: r
+anomaly_plot2(population_trend, daily_values, personal_trend)

# time: 2022-05-17 11:06:10 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 11:06:22 UTC
# mode: r
+wiki_search("victorian")

# time: 2022-05-17 11:06:36 UTC
# mode: r
+wiki_search("victorian house")

# time: 2022-05-17 11:07:59 UTC
# mode: r
+query <- 'SELECT ?itemLabel
+LIMIT 5'

# time: 2022-05-17 11:08:01 UTC
# mode: r
+wiki_query(query)

# time: 2022-05-17 11:08:16 UTC
# mode: r
+query <- 'SELECT ?'victorian' LIMIT 5'

# time: 2022-05-17 11:08:24 UTC
# mode: r
+query <- 'SELECT ?victorian LIMIT 5'

# time: 2022-05-17 11:08:25 UTC
# mode: r
+wiki_query(query)

# time: 2022-05-17 11:08:48 UTC
# mode: r
+query <- 'SELECT ?itemLabel WHERE {
+?item wdt:P31 wd:Q12136. #instance of disease
+SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
+}
+LIMIT 5'

# time: 2022-05-17 11:08:49 UTC
# mode: r
+wiki_query(query)

# time: 2022-05-17 11:09:49 UTC
# mode: r
+wiki_define(term='victorian house')

# time: 2022-05-17 11:10:22 UTC
# mode: r
+wiki_define(term='dog')

# time: 2022-05-17 11:10:26 UTC
# mode: r
+wiki_define(term='dog', 1000)

# time: 2022-05-17 11:10:34 UTC
# mode: r
+wiki_define(term='sherlock')

# time: 2022-05-17 11:10:38 UTC
# mode: r
+wiki_define(term='sherlock', 100)

# time: 2022-05-17 11:10:49 UTC
# mode: r
+wiki_define(term='sherlock',sentences=10)

# time: 2022-05-17 11:11:19 UTC
# mode: r
+wiki_randomfact()

# time: 2022-05-17 11:11:51 UTC
# mode: r
+wiki_randomfact(n_facts=1000)

# time: 2022-05-17 11:12:24 UTC
# mode: r
+wiki_randomfact(n_facts=100)

# time: 2022-05-17 11:12:33 UTC
# mode: r
+wiki_randomfact(n_facts=10)

# time: 2022-05-17 11:12:48 UTC
# mode: r
+wiki_define(term='victorian house')

# time: 2022-05-17 11:12:55 UTC
# mode: r
+wiki_define(term='victorian house',12)

# time: 2022-05-17 11:13:00 UTC
# mode: r
+wiki_define(term='victorian house',100)

# time: 2022-05-17 11:13:08 UTC
# mode: r
+wiki_define(term='queen',100)

# time: 2022-05-17 11:13:14 UTC
# mode: r
+wiki_define(term='Queen',100)

# time: 2022-05-17 11:13:19 UTC
# mode: r
+wiki_define(term='flower',100)

# time: 2022-05-17 11:13:29 UTC
# mode: r
+wiki_define(term='plant',100)

# time: 2022-05-17 11:14:04 UTC
# mode: r
+library(tidytext)

# time: 2022-05-17 11:14:10 UTC
# mode: r
+library(stringr)

# time: 2022-05-17 11:14:17 UTC
# mode: r
+library(readr)

# time: 2022-05-17 11:14:40 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-17 11:14:43 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 11:15:05 UTC
# mode: r
+reddit_data[1,]$comments

# time: 2022-05-17 11:27:04 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-17 11:27:08 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 11:27:12 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 11:27:31 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-17 11:27:33 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 11:30:20 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-17 11:30:22 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 11:30:37 UTC
# mode: r
+reddit_data[1,]$comments

# time: 2022-05-17 11:31:06 UTC
# mode: r
+unique(reddit_data$title)

# time: 2022-05-17 11:37:19 UTC
# mode: r
+to_investigate_title <- unique(reddit_data$title)[c(5, 10, 20, 32, 42, 45, 47, 48, 62, 67, 69, 78, 90, 138)]

# time: 2022-05-17 11:37:23 UTC
# mode: r
+to_investigate_title 

# time: 2022-05-17 11:38:05 UTC
# mode: r
+library(magrittr)

# time: 2022-05-17 11:38:10 UTC
# mode: r
+library(dplyr)

# time: 2022-05-17 11:38:21 UTC
# mode: r
+    sub <- reddit_data %>% filter(title == t)

# time: 2022-05-17 11:38:26 UTC
# mode: r
+t = to_investigate_title[1]

# time: 2022-05-17 11:38:28 UTC
# mode: r
+    sub <- reddit_data %>% filter(title == t)

# time: 2022-05-17 11:38:30 UTC
# mode: r
+sub 

# time: 2022-05-17 11:38:33 UTC
# mode: r
+sub

# time: 2022-05-17 11:38:43 UTC
# mode: r
+    print(sub$text)

# time: 2022-05-17 11:39:03 UTC
# mode: r
+    print(paste0(sub$text, collapse=" "))

# time: 2022-05-17 11:39:15 UTC
# mode: r
+    print(t)

# time: 2022-05-17 11:39:44 UTC
# mode: r
+    id <- seq(1, length(to_investigate_title))[to_investigate_title == t]

# time: 2022-05-17 11:39:47 UTC
# mode: r
+id 

# time: 2022-05-17 11:40:00 UTC
# mode: r
+to_investigate_title == t

# time: 2022-05-17 11:40:34 UTC
# mode: r
+    id <- seq(1, length(unique(reddit_data$title)))[unique(reddit_data$title)) == t]

# time: 2022-05-17 11:40:45 UTC
# mode: r
+    id <- seq(1, length(unique(reddit_data$title)))[unique(reddit_data$title) == t]

# time: 2022-05-17 11:40:48 UTC
# mode: r
+id 

# time: 2022-05-17 11:41:28 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-17 11:41:29 UTC
# mode: r
+to_investigate_title <- unique(reddit_data$title)[c(5, 10, 20, 32, 42, 45, 47, 48, 62, 67, 69, 78, 90, 138)]

# time: 2022-05-17 11:41:31 UTC
# mode: r
+for (t in to_investigate_title){
+    sub <- reddit_data %>% filter(title == t)
+    print(paste0(sub$text, collapse=" "))
+    print(t)
+    id <- seq(1, length(unique(reddit_data$title)))[unique(reddit_data$title) == t]
+    print(id)
+    readline(prompt="Press any key to continue")
+}

# time: 2022-05-17 11:42:30 UTC
# mode: r
+to_investigate_title <- unique(reddit_data$title)[c(5, 10, 20, 32, 43, 45, 47, 48, 62, 67, 69, 78, 90, 138)]

# time: 2022-05-17 11:42:30 UTC
# mode: r
+for (t in to_investigate_title){
+    sub <- reddit_data %>% filter(title == t)
+    print(paste0(sub$text, collapse=" "))
+    print(t)
+    id <- seq(1, length(unique(reddit_data$title)))[unique(reddit_data$title) == t]
+    print(id)
+    readline(prompt="Press any key to continue")
+}

# time: 2022-05-17 11:44:21 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-05-17 11:44:44 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-05-17 11:44:45 UTC
# mode: r
+to_exclude_title 

# time: 2022-05-17 11:45:03 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-05-17 11:45:05 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 11:51:15 UTC
# mode: r
+library(stringr)

# time: 2022-05-17 11:51:16 UTC
# mode: r
+library(tidytext)

# time: 2022-05-17 11:51:18 UTC
# mode: r
+library(readr)

# time: 2022-05-17 11:51:19 UTC
# mode: r
+library(magrittr)

# time: 2022-05-17 11:51:19 UTC
# mode: r
+library(dplyr)

# time: 2022-05-17 11:51:21 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-17 11:51:22 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-05-17 11:51:23 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-05-17 11:51:23 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-05-17 11:51:24 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 11:51:45 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(token, text)

# time: 2022-05-17 11:51:52 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 11:52:01 UTC
# mode: r
+tokens 

# time: 2022-05-17 11:52:23 UTC
# mode: r
+tokens <- tokens  %>% filter!(word in stop_words$word)

# time: 2022-05-17 11:52:31 UTC
# mode: r
+tokens <- tokens  %>% filter!(word %in% stop_words$word)

# time: 2022-05-17 11:52:37 UTC
# mode: r
+tokens <- tokens  %>% filter(!word %in% stop_words$word)

# time: 2022-05-17 11:52:40 UTC
# mode: r
+tokens 

# time: 2022-05-17 11:53:00 UTC
# mode: r
+tokens[,c(2,3)]

# time: 2022-05-17 11:53:10 UTC
# mode: r
+tokens[,c(3,4)]

# time: 2022-05-17 11:53:25 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 11:53:27 UTC
# mode: r
+wiki_define(term = "victorian house", 100)

# time: 2022-05-17 11:53:29 UTC
# mode: r
+wiki_define(term = "flower", 100)

# time: 2022-05-17 11:53:30 UTC
# mode: r
+wiki_define(term = "plant", 100)

# time: 2022-05-17 11:53:37 UTC
# mode: r
+query <- 'SELECT ?itemLabel WHERE {
+?item wdt:P31 wd:Q12136. #instance of disease
+SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
+}
+LIMIT 5'

# time: 2022-05-17 11:53:38 UTC
# mode: r
+wiki_query(query)

# time: 2022-05-17 11:53:45 UTC
# mode: r
+wiki_define(term = "victorian house", 100)

# time: 2022-05-17 11:53:46 UTC
# mode: r
+wiki_define(term = "flower", 100)

# time: 2022-05-17 11:53:47 UTC
# mode: r
+wiki_define(term = "plant", 100)

# time: 2022-05-17 11:55:31 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society")

# time: 2022-05-17 11:55:32 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 11:55:35 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 11:55:36 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society")

# time: 2022-05-17 11:55:36 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 11:55:42 UTC
# mode: r
+reference_text 

# time: 2022-05-17 11:55:56 UTC
# mode: r
+library(tibble)

# time: 2022-05-17 11:56:05 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 11:56:08 UTC
# mode: r
+reference_text 

# time: 2022-05-17 11:56:21 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text)

# time: 2022-05-17 11:56:41 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-05-17 11:57:00 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel")

# time: 2022-05-17 11:57:01 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 11:57:05 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 11:57:08 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel")

# time: 2022-05-17 11:57:08 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 11:57:13 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 11:57:14 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-05-17 11:57:51 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 11:57:52 UTC
# mode: r
+tokens <- tokens  %>% filter(!word %in% stop_words$word)

# time: 2022-05-17 11:58:16 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n())

# time: 2022-05-17 11:58:19 UTC
# mode: r
+tokens 

# time: 2022-05-17 11:58:45 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N))

# time: 2022-05-17 11:58:47 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 11:58:49 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 11:58:49 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N))

# time: 2022-05-17 11:58:53 UTC
# mode: r
+tokens 

# time: 2022-05-17 12:01:29 UTC
# mode: r
+library(text_clean)

# time: 2022-05-17 12:01:32 UTC
# mode: r
+library(textclean)

# time: 2022-05-17 12:01:33 UTC
# mode: r
+prefilter_text <- function(texts) {
+        texts <- unlist(texts)
+        texts <- unlist(lapply(texts, function(x) {
+            str_replace_all(x, "@\\w+", "")
+        }))
+        texts <- unlist(lapply(texts, function(x) {
+            remove_URL(x)
+        }))
+    unlist(texts)
+}

# time: 2022-05-17 12:01:53 UTC
# mode: r
+prefilter_text <- function(texts) {
+        texts <- unlist(texts)
+        texts <- unlist(lapply(texts, function(x) {
+            str_replace_all(x, "_", "")
+        }))
+        texts <- unlist(lapply(texts, function(x) {
+            remove_URL(x)
+        }))
+    unlist(texts)
+}

# time: 2022-05-17 12:01:58 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-17 12:01:58 UTC
# mode: r
+to_investigate_title <- unique(reddit_data$title)[c(5, 10, 20, 32, 43, 45, 47, 48, 62, 67, 69, 78, 90, 138)]

# time: 2022-05-17 12:02:00 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-05-17 12:02:00 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-05-17 12:02:01 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-05-17 12:02:02 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 12:02:17 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(text))

# time: 2022-05-17 12:03:01 UTC
# mode: r
+library(textclean)

# time: 2022-05-17 12:04:57 UTC
# mode: r
+prefilter_text <- function(texts) {
+        texts <- unlist(texts)
+        texts <- unlist(lapply(texts, function(x) {
+            str_replace_all(x, "_", "")
+        }))
+        texts <- unlist(lapply(texts, function(x) {
+            remove_URL(x)
+        }))
+    unlist(texts)
+}

# time: 2022-05-17 12:05:00 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-05-17 12:05:00 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-05-17 12:05:00 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-05-17 12:05:02 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 12:05:08 UTC
# mode: r
+to_exclude_title 

# time: 2022-05-17 12:05:10 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(text))

# time: 2022-05-17 12:06:11 UTC
# mode: r
+remove_URL <- function(text) {
+    text <- replace_url(text)[[1]]
+    text
+}

# time: 2022-05-17 12:06:13 UTC
# mode: r
+prefilter_text <- function(texts) {
+        texts <- unlist(texts)
+        texts <- unlist(lapply(texts, function(x) {
+            str_replace_all(x, "_", "")
+        }))
+        texts <- unlist(lapply(texts, function(x) {
+            remove_URL(x)
+        }))
+    unlist(texts)
+}

# time: 2022-05-17 12:06:16 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(text))

# time: 2022-05-17 12:06:33 UTC
# mode: r
+reddit_data 

# time: 2022-05-17 12:06:36 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:06:37 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 12:06:38 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N))

# time: 2022-05-17 12:06:40 UTC
# mode: r
+tokens 

# time: 2022-05-17 12:06:49 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:06:57 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:06:58 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 12:06:58 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:06:59 UTC
# mode: r
+tokens 

# time: 2022-05-17 12:07:24 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:07:25 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 12:07:25 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:07:25 UTC
# mode: r
+tokens  <- tokens %>% filter(N >=5)

# time: 2022-05-17 12:07:28 UTC
# mode: r
+tokens  

# time: 2022-05-17 12:08:02 UTC
# mode: r
+is.numeric(as.numeric('2345'))

# time: 2022-05-17 12:08:05 UTC
# mode: r
+is.numeric(as.numeric('tet'))

# time: 2022-05-17 12:08:21 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:08:23 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 12:08:23 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:08:23 UTC
# mode: r
+tokens  <- tokens %>% filter(N >=5) %>% filter(!is.numeric(as.numeric(word)))

# time: 2022-05-17 12:08:44 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:08:45 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 12:08:46 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:08:48 UTC
# mode: r
+tokens  <- tokens %>% filter(N >=5) %>% filter(!is.numeric(as.numeric(word)))

# time: 2022-05-17 12:08:51 UTC
# mode: r
+tokens  

# time: 2022-05-17 12:09:07 UTC
# mode: r
+as.numeric("test")

# time: 2022-05-17 12:09:18 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:09:19 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 12:09:19 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:09:19 UTC
# mode: r
+tokens  <- tokens %>% filter(N >=5)

# time: 2022-05-17 12:09:21 UTC
# mode: r
+tokens  

# time: 2022-05-17 12:10:37 UTC
# mode: r
+token= 'testing'

# time: 2022-05-17 12:10:42 UTC
# mode: r
+str_detect(token, '[0-9]')

# time: 2022-05-17 12:10:48 UTC
# mode: r
+token

# time: 2022-05-17 12:10:57 UTC
# mode: r
+token = "285"

# time: 2022-05-17 12:11:03 UTC
# mode: r
+str_detect(token, '[0-9]')

# time: 2022-05-17 12:11:27 UTC
# mode: r
+is_number <- function(token) {
+    if (str_detect(token, '[0-9]')) {
+        returned <- ""
+    } else {
+        returned <- token
+    }
+    returned
+}

# time: 2022-05-17 12:11:59 UTC
# mode: r
+remove_URL <- function(text) {
+    text <- replace_url(text)[[1]]
+    text
+}

# time: 2022-05-17 12:12:00 UTC
# mode: r
+prefilter_text <- function(texts) {
+        texts <- unlist(texts)
+        texts <- unlist(lapply(texts, function(x) {
+            str_replace_all(x, "_", "")
+        }))
+        texts <- unlist(lapply(texts, function(x) {
+            str_replace_all(x, "[0-9]", "")
+        }))
+        texts <- unlist(lapply(texts, function(x) {
+            remove_URL(x)
+        }))
+    unlist(texts)
+}

# time: 2022-05-17 12:12:01 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-17 12:12:03 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-05-17 12:12:04 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-05-17 12:12:04 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-05-17 12:12:04 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(text))

# time: 2022-05-17 12:13:01 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 12:13:05 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:13:06 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 12:13:07 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:13:08 UTC
# mode: r
+tokens  <- tokens %>% filter(N >=5)

# time: 2022-05-17 12:13:09 UTC
# mode: r
+tokens  

# time: 2022-05-17 12:13:17 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:13:17 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:13:38 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple")

# time: 2022-05-17 12:13:39 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 12:13:59 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:14:00 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-05-17 12:14:30 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:14:30 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:14:31 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure")

# time: 2022-05-17 12:14:31 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 12:14:57 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n())

# time: 2022-05-17 12:15:01 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:15:02 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n())

# time: 2022-05-17 12:15:10 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N %>% 5)

# time: 2022-05-17 12:15:14 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 5)

# time: 2022-05-17 12:15:25 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 5) %>% arrange(N)

# time: 2022-05-17 12:15:32 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 5) %>% arrange(desc(N))

# time: 2022-05-17 12:16:03 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:16:04 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:16:04 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist")

# time: 2022-05-17 12:16:05 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 12:16:44 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 5) %>% arrange(desc(N))

# time: 2022-05-17 12:16:46 UTC
# mode: r
+reference_text 

# time: 2022-05-17 12:16:48 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:16:49 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 5) %>% arrange(desc(N))

# time: 2022-05-17 12:16:51 UTC
# mode: r
+reference_text 

# time: 2022-05-17 12:16:53 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:16:55 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 5) %>% arrange(desc(N))

# time: 2022-05-17 12:16:58 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:16:58 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:16:59 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist")

# time: 2022-05-17 12:17:00 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 12:17:13 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:17:14 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 5) %>% arrange(desc(N))

# time: 2022-05-17 12:17:49 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-17 12:17:52 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:17:52 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word)

# time: 2022-05-17 12:17:53 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:17:54 UTC
# mode: r
+tokens  <- tokens %>% filter(N >=5)

# time: 2022-05-17 12:18:01 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:18:02 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 2) %>% arrange(desc(N))

# time: 2022-05-17 12:18:04 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:18:04 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:18:05 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist")

# time: 2022-05-17 12:18:09 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 12:18:21 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:18:23 UTC
# mode: r
+reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 2) %>% arrange(desc(N))

# time: 2022-05-17 12:18:27 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-17 12:18:30 UTC
# mode: r
+tokens  

# time: 2022-05-17 12:18:42 UTC
# mode: r
+tokens <- tokens %>% mutate(doc = "bsh")

# time: 2022-05-17 12:18:45 UTC
# mode: r
+tokens 

# time: 2022-05-17 12:19:06 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 12:19:11 UTC
# mode: r
+docs 

# time: 2022-05-17 12:19:20 UTC
# mode: r
+tokens 

# time: 2022-05-17 12:19:24 UTC
# mode: r
+reference_text 

# time: 2022-05-17 12:19:31 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:19:31 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:19:42 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:19:42 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:19:43 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist")

# time: 2022-05-17 12:19:44 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 12:21:40 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:21:40 UTC
# mode: r
+reference_text <- reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 2) %>% arrange(desc(N))

# time: 2022-05-17 12:21:41 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-17 12:21:42 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 12:21:43 UTC
# mode: r
+docs 

# time: 2022-05-17 12:22:37 UTC
# mode: r
+docs <- docs %>% bind_tf_idf()

# time: 2022-05-17 12:22:46 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-17 12:22:49 UTC
# mode: r
+docs 

# time: 2022-05-17 12:23:11 UTC
# mode: r
+library(ggplot2)

# time: 2022-05-17 12:23:38 UTC
# mode: r
+ggplot(docs, aes(word, tf_idf)) + geom_point()+facet_wrap(~doc)

# time: 2022-05-17 12:24:35 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh")

# time: 2022-05-17 12:24:38 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:24:47 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(desc(tf_idf))

# time: 2022-05-17 12:24:51 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:25:47 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:25:48 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word) %>% 
+        filter(word != "it’s")

# time: 2022-05-17 12:25:49 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:25:50 UTC
# mode: r
+tokens  <- tokens %>% filter(N >=5)

# time: 2022-05-17 12:25:51 UTC
# mode: r
+tokens <- tokens %>% mutate(doc = "bsh")

# time: 2022-05-17 12:25:52 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:25:53 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:25:53 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist")

# time: 2022-05-17 12:25:55 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 12:26:06 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:26:07 UTC
# mode: r
+reference_text <- reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 2) %>% arrange(desc(N))

# time: 2022-05-17 12:26:08 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-17 12:26:09 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 12:26:10 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-17 12:26:12 UTC
# mode: r
+docs 

# time: 2022-05-17 12:26:15 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(desc(tf_idf))

# time: 2022-05-17 12:26:17 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:26:50 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:26:51 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word) %>% 
+        filter(!word %in% c("it’s", "US","u.s"))

# time: 2022-05-17 12:26:52 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:26:52 UTC
# mode: r
+tokens  <- tokens %>% filter(N >=5)

# time: 2022-05-17 12:26:53 UTC
# mode: r
+tokens <- tokens %>% mutate(doc = "bsh")

# time: 2022-05-17 12:26:54 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:26:54 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:26:54 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist")

# time: 2022-05-17 12:26:55 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 12:27:06 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:27:06 UTC
# mode: r
+reference_text <- reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 2) %>% arrange(desc(N))

# time: 2022-05-17 12:27:14 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-17 12:27:15 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 12:27:16 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-17 12:27:18 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(desc(tf_idf))

# time: 2022-05-17 12:27:19 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:27:41 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-17 12:27:41 UTC
# mode: r
+tokens <- tokens  %>% 
+    filter(!word %in% stop_words$word) %>% 
+        filter(!word %in% c("it’s", "US","u.s", "miele", "bosch", "siemens", "sebo"))

# time: 2022-05-17 12:27:43 UTC
# mode: r
+tokens <- tokens %>% group_by(word) %>% summarize(N=n()) %>% arrange(N)

# time: 2022-05-17 12:27:43 UTC
# mode: r
+tokens  <- tokens %>% filter(N >=5)

# time: 2022-05-17 12:27:44 UTC
# mode: r
+tokens <- tokens %>% mutate(doc = "bsh")

# time: 2022-05-17 12:27:46 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 12:27:46 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-17 12:27:47 UTC
# mode: r
+ggplot(docs, aes(word, tf_idf)) + geom_point()+facet_wrap(~doc)

# time: 2022-05-17 12:27:53 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(desc(tf_idf))

# time: 2022-05-17 12:27:56 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:28:28 UTC
# mode: r
+docs  %>% pivot_wider(doc, tf_idf)

# time: 2022-05-17 12:28:34 UTC
# mode: r
+library(dplyr)

# time: 2022-05-17 12:28:34 UTC
# mode: r
+library(tibble)

# time: 2022-05-17 12:28:34 UTC
# mode: r
+library(url)

# time: 2022-05-17 12:28:35 UTC
# mode: r
+library(textclean)

# time: 2022-05-17 12:28:35 UTC
# mode: r
+library(ggplot2)

# time: 2022-05-17 12:28:39 UTC
# mode: r
+library(tidyr)

# time: 2022-05-17 12:28:43 UTC
# mode: r
+docs  %>% pivot_wider(doc, tf_idf)

# time: 2022-05-17 12:29:01 UTC
# mode: r
+docs  %>% pivot_wider(names_from=doc, values_from=tf_idf)

# time: 2022-05-17 12:29:48 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 12:29:49 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 12:29:49 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist", "movie", "device", "malfunction", "service", "physics", "particle", "informatics", "computer")

# time: 2022-05-17 12:29:51 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 12:30:05 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 12:30:05 UTC
# mode: r
+reference_text <- reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 2) %>% arrange(desc(N))

# time: 2022-05-17 12:30:06 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-17 12:30:08 UTC
# mode: r
+reference_text 

# time: 2022-05-17 12:30:10 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 12:30:11 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-17 12:30:12 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(desc(tf_idf))

# time: 2022-05-17 12:30:14 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:30:17 UTC
# mode: r
+docs  %>% pivot_wider(names_from=doc, values_from=tf_idf)

# time: 2022-05-17 12:30:51 UTC
# mode: r
+summary(bsh_words$tf_idf)

# time: 2022-05-17 12:31:11 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(tf_idf)

# time: 2022-05-17 12:31:14 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:31:28 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(tf_idf) %>% filter(tf_idf %>% 0)

# time: 2022-05-17 12:31:36 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(tf_idf) %>% filter(tf_idf > 0)

# time: 2022-05-17 12:31:39 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:31:47 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(tf_idf) %>% filter(tf_idf > 0)

# time: 2022-05-17 12:31:48 UTC
# mode: r
+summary(bsh_words$tf_idf)

# time: 2022-05-17 12:31:59 UTC
# mode: r
+threshold <- summary(bsh_words$tf_idf)[2]

# time: 2022-05-17 12:32:01 UTC
# mode: r
+threshold 

# time: 2022-05-17 12:32:19 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf > threshold)

# time: 2022-05-17 12:32:22 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:32:26 UTC
# mode: r
+threshold <- summary(bsh_words$tf_idf)[3]

# time: 2022-05-17 12:32:26 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf > threshold)

# time: 2022-05-17 12:32:29 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 12:36:15 UTC
# mode: r
+dtm <- docs %>% cast_dtm(doc, word, N)

# time: 2022-05-17 12:37:33 UTC
# mode: r
+dtm 

# time: 2022-05-17 12:38:18 UTC
# mode: r
+library(topicmodels)

# time: 2022-05-17 12:41:08 UTC
# mode: r
+dtm <- docs %>% cast_dtm(doc, word, N)

# time: 2022-05-17 12:41:16 UTC
# mode: r
+dtm 

# time: 2022-05-17 12:41:50 UTC
# mode: r
+topic_fit <- LDA(dtm, k=3, control=list(seed=42))

# time: 2022-05-17 12:41:53 UTC
# mode: r
+topic_fit 

# time: 2022-05-17 12:42:15 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 12:42:18 UTC
# mode: r
+topics 

# time: 2022-05-17 12:42:43 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 12:42:43 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-17 12:42:45 UTC
# mode: r
+docs 

# time: 2022-05-17 12:42:47 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 12:42:48 UTC
# mode: r
+docs 

# time: 2022-05-17 12:42:58 UTC
# mode: r
+summary(docs$N)

# time: 2022-05-17 12:43:10 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 12:43:10 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-17 12:43:10 UTC
# mode: r
+ggplot(docs, aes(word, tf_idf)) + geom_point()+facet_wrap(~doc)

# time: 2022-05-17 12:43:17 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(tf_idf) %>% filter(tf_idf > 0)

# time: 2022-05-17 12:43:17 UTC
# mode: r
+threshold <- summary(bsh_words$tf_idf)[3]

# time: 2022-05-17 12:43:18 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf > threshold)

# time: 2022-05-17 12:43:20 UTC
# mode: r
+dtm <- docs %>% cast_dtm(doc, word, N)

# time: 2022-05-17 12:43:20 UTC
# mode: r
+topic_fit <- LDA(dtm, k=3, control=list(seed=42))

# time: 2022-05-17 12:43:22 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 12:43:24 UTC
# mode: r
+topics 

# time: 2022-05-17 12:43:57 UTC
# mode: r
+topics %>% left_join(docs)

# time: 2022-05-17 12:43:59 UTC
# mode: r
+docs

# time: 2022-05-17 12:44:11 UTC
# mode: r
+topics %>% left_join(bind_cols(tokens, reference_text))

# time: 2022-05-17 12:44:17 UTC
# mode: r
+bind_cols(tokens, reference_text)

# time: 2022-05-17 12:44:31 UTC
# mode: r
+topics %>% left_join(bind_rows(tokens, reference_text))

# time: 2022-05-17 12:44:36 UTC
# mode: r
+bind_rows(tokens, reference_text)

# time: 2022-05-17 12:44:47 UTC
# mode: r
+topics %>% left_join(bind_rows(tokens, reference_text)[,c(1,3)])

# time: 2022-05-17 12:44:53 UTC
# mode: r
+topics 

# time: 2022-05-17 12:45:06 UTC
# mode: r
+bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 12:45:21 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 12:45:43 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 12:45:44 UTC
# mode: r
+topics %>% left_join(refTable)

# time: 2022-05-17 12:46:55 UTC
# mode: r
+topics %>% pivot_wider(names_from=topic, values_from=beta)

# time: 2022-05-17 12:47:25 UTC
# mode: r
+topics 

# time: 2022-05-17 12:47:50 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta))

# time: 2022-05-17 12:47:53 UTC
# mode: r
+topics 

# time: 2022-05-17 12:48:04 UTC
# mode: r
+topics_sel <- topics %>% pivot_wider(names_from=topic, values_from=beta)

# time: 2022-05-17 12:48:05 UTC
# mode: r
+topics_sel 

# time: 2022-05-17 12:48:42 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 12:48:42 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE))

# time: 2022-05-17 12:48:43 UTC
# mode: r
+topics_sel <- topics %>% pivot_wider(names_from=topic, values_from=beta)

# time: 2022-05-17 12:48:46 UTC
# mode: r
+topics_sel 

# time: 2022-05-17 12:49:02 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE))

# time: 2022-05-17 12:49:03 UTC
# mode: r
+topics 

# time: 2022-05-17 13:04:43 UTC
# mode: r
+dtm <- docs %>% cast_dtm(doc, word, N)

# time: 2022-05-17 13:04:44 UTC
# mode: r
+topic_fit <- LDA(dtm, k=3, control=list(seed=42))

# time: 2022-05-17 13:04:44 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 13:04:44 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE))

# time: 2022-05-17 13:04:45 UTC
# mode: r
+topics 

# time: 2022-05-17 13:04:58 UTC
# mode: r
+topic_fit <- LDA(dtm, k=3, control=list(seed=42))

# time: 2022-05-17 13:04:58 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 13:04:58 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE)) %>% filter(match)

# time: 2022-05-17 13:05:01 UTC
# mode: r
+topics 

# time: 2022-05-17 13:05:15 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 13:05:15 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 13:05:18 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-17 13:05:20 UTC
# mode: r
+topics 

# time: 2022-05-17 13:06:37 UTC
# mode: r
+topics <- group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:06:44 UTC
# mode: r
+topics <- topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:06:49 UTC
# mode: r
+topics

# time: 2022-05-17 13:07:07 UTC
# mode: r
+dtm <- docs %>% cast_dtm(doc, word, N)

# time: 2022-05-17 13:07:07 UTC
# mode: r
+topic_fit <- LDA(dtm, k=2, control=list(seed=42))

# time: 2022-05-17 13:07:07 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 13:07:08 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE)) %>% filter(match)

# time: 2022-05-17 13:07:08 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 13:07:08 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 13:07:09 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-17 13:07:09 UTC
# mode: r
+topics <- topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:07:11 UTC
# mode: r
+topics 

# time: 2022-05-17 13:07:25 UTC
# mode: r
+dtm <- docs %>% cast_dtm(doc, word, N)

# time: 2022-05-17 13:07:25 UTC
# mode: r
+topic_fit <- LDA(dtm, k=4, control=list(seed=42))

# time: 2022-05-17 13:07:25 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 13:07:26 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE)) %>% filter(match)

# time: 2022-05-17 13:07:26 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 13:07:26 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 13:07:27 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-17 13:07:27 UTC
# mode: r
+topics <- topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:07:29 UTC
# mode: r
+topics 

# time: 2022-05-17 13:12:46 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist", "movie", "device", "malfunction", "service", "physics", "particle", "informatics", "computer", "nature", "space", "time", "star")

# time: 2022-05-17 13:12:47 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 13:12:48 UTC
# mode: r
+    text <- wiki_define(w,1000)

# time: 2022-05-17 13:12:49 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 13:13:04 UTC
# mode: r
+reference_text <- tibble(text = reference_text)

# time: 2022-05-17 13:13:21 UTC
# mode: r
+reference_text <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-17 13:13:25 UTC
# mode: r
+reference_text 

# time: 2022-05-17 13:13:28 UTC
# mode: r
+reference_text <- reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 2) %>% arrange(desc(N))

# time: 2022-05-17 13:13:34 UTC
# mode: r
+reference_text 

# time: 2022-05-17 13:13:36 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-17 13:13:38 UTC
# mode: r
+reference_text 

# time: 2022-05-17 13:13:42 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-17 13:13:42 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-17 13:13:42 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist", "movie", "device", "malfunction", "service", "physics", "particle", "informatics", "computer", "nature", "space", "time", "star")

# time: 2022-05-17 13:13:44 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w,1000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-17 13:13:59 UTC
# mode: r
+reference_text <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-17 13:14:02 UTC
# mode: r
+reference_text <- reference_text %>% unnest_tokens(word, text) %>% filter(!word %in% stop_words$word) %>% group_by(word) %>% summarize(N=n()) %>% filter(N > 2) %>% arrange(desc(N))

# time: 2022-05-17 13:14:05 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-17 13:14:08 UTC
# mode: r
+reference_text 

# time: 2022-05-17 13:14:10 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 13:14:10 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-17 13:14:32 UTC
# mode: r
+docs_adjusted

# time: 2022-05-17 13:14:37 UTC
# mode: r
+docs 

# time: 2022-05-17 13:15:12 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(tf_idf) %>% top_n(tf_idf, 1000)

# time: 2022-05-17 13:15:20 UTC
# mode: r
+docs %>% filter(doc=="bsh")

# time: 2022-05-17 13:15:29 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% top_n(tf_idf, 10)

# time: 2022-05-17 13:15:33 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 13:15:38 UTC
# mode: r
+docs %>% filter(doc=="bsh") 

# time: 2022-05-17 13:15:47 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% top_n(tf_idf, 2000)

# time: 2022-05-17 13:15:56 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh")

# time: 2022-05-17 13:16:05 UTC
# mode: r
+summary(bsh_words$tf_idf)

# time: 2022-05-17 13:16:39 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[3])

# time: 2022-05-17 13:16:43 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 13:16:44 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh")

# time: 2022-05-17 13:16:44 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[3])

# time: 2022-05-17 13:16:47 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh")

# time: 2022-05-17 13:16:47 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[4])

# time: 2022-05-17 13:16:51 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 13:17:40 UTC
# mode: r
+reference_words <- docs %>% filter(doc=="reference")

# time: 2022-05-17 13:17:41 UTC
# mode: r
+reference_words <- reference_words %>% filter(tf_idf >= summary(reference_words$tf_idf)[4])

# time: 2022-05-17 13:17:43 UTC
# mode: r
+reference_words 

# time: 2022-05-17 13:17:57 UTC
# mode: r
+docs_adjusted <- bind_rows(bsh_words, reference_words)

# time: 2022-05-17 13:17:59 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-17 13:18:00 UTC
# mode: r
+topic_fit <- LDA(dtm, k=4, control=list(seed=42))

# time: 2022-05-17 13:18:00 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 13:18:02 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE)) %>% filter(match)

# time: 2022-05-17 13:18:02 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 13:18:02 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 13:18:03 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-17 13:18:04 UTC
# mode: r
+topics <- topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:18:08 UTC
# mode: r
+topics 

# time: 2022-05-17 13:18:23 UTC
# mode: r
+topic_fit <- LDA(dtm, k=3, control=list(seed=42))

# time: 2022-05-17 13:18:23 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 13:18:23 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE)) %>% filter(match)

# time: 2022-05-17 13:18:24 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 13:18:24 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 13:18:24 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-17 13:18:25 UTC
# mode: r
+topics <- topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:18:27 UTC
# mode: r
+topics 

# time: 2022-05-17 13:18:50 UTC
# mode: r
+topic_fit <- LDA(dtm, k=3, control=list(seed=42))

# time: 2022-05-17 13:18:52 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-17 13:18:58 UTC
# mode: r
+topic_fit <- LDA(dtm, k=3, control=list(seed=42))

# time: 2022-05-17 13:18:58 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 13:18:59 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE)) %>% filter(match)

# time: 2022-05-17 13:18:59 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 13:19:00 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 13:19:00 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-17 13:19:06 UTC
# mode: r
+topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:19:07 UTC
# mode: r
+topics 

# time: 2022-05-17 13:20:14 UTC
# mode: r
+topic_lists <- list()

# time: 2022-05-17 13:20:14 UTC
# mode: r
+for (topic in c(1,2,3)) {
+    topic_lists[topic] <- topics %>% filter(topic == topic) %>% dplyr::select(term)
+}

# time: 2022-05-17 13:20:17 UTC
# mode: r
+topic_lists

# time: 2022-05-17 13:20:43 UTC
# mode: r
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term)

# time: 2022-05-17 13:20:45 UTC
# mode: r
+    selection

# time: 2022-05-17 13:20:57 UTC
# mode: r
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term)  %>%  ungroup()

# time: 2022-05-17 13:21:05 UTC
# mode: r
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term, source)  %>%  ungroup()

# time: 2022-05-17 13:21:08 UTC
# mode: r
+selection 

# time: 2022-05-17 13:21:22 UTC
# mode: r
+topic_lists <- list()

# time: 2022-05-17 13:21:22 UTC
# mode: r
+for (topic in c(1,2,3)) {
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term, source)  %>%  ungroup()
+    topic_lists[topc] <- selection
+}

# time: 2022-05-17 13:21:28 UTC
# mode: r
+topic_lists <- list()

# time: 2022-05-17 13:21:28 UTC
# mode: r
+for (topic in c(1,2,3)) {
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term, source)  %>%  ungroup()
+    topic_lists[topic] <- selection
+}

# time: 2022-05-17 13:21:30 UTC
# mode: r
+topic_lists

# time: 2022-05-17 13:21:59 UTC
# mode: r
+    listnames <- topics %>% filter(topic == topic) %>% dplyr::select(source)  %>%  ungroup()

# time: 2022-05-17 13:22:16 UTC
# mode: r
+topic_lists <- list()

# time: 2022-05-17 13:22:16 UTC
# mode: r
+for (topic in c(1,2,3)) {
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term)  %>%  ungroup() %>% unlist()
+    listnames <- topics %>% filter(topic == topic) %>% dplyr::select(source)  %>%  ungroup() %>% unlist()
+    names(selection) <- listnames
+
+    topic_lists[topic] <- selection
+}

# time: 2022-05-17 13:22:21 UTC
# mode: r
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term)  %>%  ungroup() %>% unlist()

# time: 2022-05-17 13:22:22 UTC
# mode: r
+selection 

# time: 2022-05-17 13:22:25 UTC
# mode: r
+    listnames <- topics %>% filter(topic == topic) %>% dplyr::select(source)  %>%  ungroup() %>% unlist()

# time: 2022-05-17 13:22:26 UTC
# mode: r
+    names(selection) <- listnames

# time: 2022-05-17 13:22:34 UTC
# mode: r
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term)  %>%  ungroup() %>% unlist()

# time: 2022-05-17 13:22:35 UTC
# mode: r
+selection 

# time: 2022-05-17 13:22:41 UTC
# mode: r
+topics %>% filter(topic == topic) %>% dplyr::select(term)

# time: 2022-05-17 13:22:47 UTC
# mode: r
+topics %>% filter(topic == topic) %>% dplyr::select(source)

# time: 2022-05-17 13:22:50 UTC
# mode: r
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term)  %>%  ungroup() %>% unlist()

# time: 2022-05-17 13:22:50 UTC
# mode: r
+    listnames <- topics %>% filter(topic == topic) %>% dplyr::select(source)  %>%  ungroup() %>% unlist()

# time: 2022-05-17 13:22:52 UTC
# mode: r
+selection 

# time: 2022-05-17 13:22:55 UTC
# mode: r
+    selection <- topics %>% filter(topic == topic) %>% dplyr::select(term)  %>%  ungroup() %>% unlist()

# time: 2022-05-17 13:22:56 UTC
# mode: r
+    listnames <- topics %>% filter(topic == topic) %>% dplyr::select(source)  %>%  ungroup() %>% unlist()

# time: 2022-05-17 13:23:20 UTC
# mode: r
+topic_lists <- list()

# time: 2022-05-17 13:23:20 UTC
# mode: r
+for (topic in c(1,2,3)) {
+    selection <- topics %>% ungroup() %>%  filter(topic == topic) %>% dplyr::select(term)  %>% unlist()
+    listnames <- topics %>% ungroup() %>% filter(topic == topic) %>% dplyr::select(source) %>% unlist()
+    names(selection) <- listnames
+    topic_lists[topic] <- selection
+}

# time: 2022-05-17 13:23:22 UTC
# mode: r
+    selection <- topics %>% ungroup() %>%  filter(topic == topic) %>% dplyr::select(term)  %>% unlist()

# time: 2022-05-17 13:23:22 UTC
# mode: r
+    listnames <- topics %>% ungroup() %>% filter(topic == topic) %>% dplyr::select(source) %>% unlist()

# time: 2022-05-17 13:23:24 UTC
# mode: r
+    names(selection) <- listnames

# time: 2022-05-17 13:23:25 UTC
# mode: r
+    topic_lists[topic] <- selection

# time: 2022-05-17 13:23:28 UTC
# mode: r
+selection

# time: 2022-05-17 13:23:30 UTC
# mode: r
+    topic_lists[topic] <- selection

# time: 2022-05-17 13:23:39 UTC
# mode: r
+    topic_lists[topic] <- list(selection)

# time: 2022-05-17 13:23:41 UTC
# mode: r
+topic_lists <- list()

# time: 2022-05-17 13:23:41 UTC
# mode: r
+for (topic in c(1,2,3)) {
+    selection <- topics %>% ungroup() %>%  filter(topic == topic) %>% dplyr::select(term)  %>% unlist()
+    listnames <- topics %>% ungroup() %>% filter(topic == topic) %>% dplyr::select(source) %>% unlist()
+    names(selection) <- listnames
+    topic_lists[topic] <- list(selection)
+}

# time: 2022-05-17 13:23:43 UTC
# mode: r
+topic_lists 

# time: 2022-05-17 13:24:52 UTC
# mode: r
+topics 

# time: 2022-05-17 13:25:21 UTC
# mode: r
+bsh_spec_words <- topics  %>% filter(source == "bsh")

# time: 2022-05-17 13:25:23 UTC
# mode: r
+bsh_spec_words 

# time: 2022-05-17 13:25:36 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[5])

# time: 2022-05-17 13:25:37 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh")

# time: 2022-05-17 13:25:37 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[5])

# time: 2022-05-17 13:25:40 UTC
# mode: r
+bsh_words 

# time: 2022-05-17 13:25:48 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh")

# time: 2022-05-17 13:25:49 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[4])

# time: 2022-05-17 13:25:49 UTC
# mode: r
+reference_words <- docs %>% filter(doc=="reference")

# time: 2022-05-17 13:25:49 UTC
# mode: r
+reference_words <- reference_words %>% filter(tf_idf >= summary(reference_words$tf_idf)[4])

# time: 2022-05-17 13:25:49 UTC
# mode: r
+docs_adjusted <- bind_rows(bsh_words, reference_words)

# time: 2022-05-17 13:25:50 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-17 13:25:50 UTC
# mode: r
+topic_fit <- LDA(dtm, k=3, control=list(seed=42))

# time: 2022-05-17 13:25:50 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 13:25:51 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE)) %>% filter(match)

# time: 2022-05-17 13:25:51 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 13:25:51 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 13:25:52 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-17 13:25:52 UTC
# mode: r
+topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:25:52 UTC
# mode: r
+topic_lists <- list()

# time: 2022-05-17 13:25:53 UTC
# mode: r
+for (topic in c(1,2,3)) {
+    selection <- topics %>% ungroup() %>%  filter(topic == topic) %>% dplyr::select(term)  %>% unlist()
+    listnames <- topics %>% ungroup() %>% filter(topic == topic) %>% dplyr::select(source) %>% unlist()
+    names(selection) <- listnames
+    topic_lists[topic] <- list(selection)
+}

# time: 2022-05-17 13:25:54 UTC
# mode: r
+bsh_spec_words <- topics  %>% filter(source == "bsh")

# time: 2022-05-17 13:25:57 UTC
# mode: r
+bsh_spec_words 

# time: 2022-05-17 13:28:29 UTC
# mode: r
+bsh_spec_words <- topics  %>% filter(source == "bsh")

# time: 2022-05-17 13:28:30 UTC
# mode: r
+bsh_spec_words 

# time: 2022-05-17 13:28:39 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-17 13:28:40 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-17 13:28:40 UTC
# mode: r
+ggplot(docs, aes(word, tf_idf)) + geom_point()+facet_wrap(~doc)

# time: 2022-05-17 13:28:47 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh") %>% arrange(tf_idf) %>% filter(tf_idf > 0)

# time: 2022-05-17 13:28:48 UTC
# mode: r
+threshold <- summary(bsh_words$tf_idf)[3]

# time: 2022-05-17 13:28:48 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf > threshold)

# time: 2022-05-17 13:28:49 UTC
# mode: r
+bsh_words <- docs %>% filter(doc=="bsh")

# time: 2022-05-17 13:28:49 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[4])

# time: 2022-05-17 13:28:49 UTC
# mode: r
+reference_words <- docs %>% filter(doc=="reference")

# time: 2022-05-17 13:28:50 UTC
# mode: r
+reference_words <- reference_words %>% filter(tf_idf >= summary(reference_words$tf_idf)[4])

# time: 2022-05-17 13:28:51 UTC
# mode: r
+docs_adjusted <- bind_rows(bsh_words, reference_words)

# time: 2022-05-17 13:28:52 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-17 13:28:56 UTC
# mode: r
+topic_fit <- LDA(dtm, k=2, control=list(seed=42))

# time: 2022-05-17 13:29:04 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE)) %>% filter(match)

# time: 2022-05-17 13:29:04 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 13:29:05 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 13:29:05 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-17 13:29:06 UTC
# mode: r
+topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:29:08 UTC
# mode: r
+topic_lists <- list()

# time: 2022-05-17 13:29:08 UTC
# mode: r
+for (topic in c(1,2,3)) {
+    selection <- topics %>% ungroup() %>%  filter(topic == topic) %>% dplyr::select(term)  %>% unlist()
+    listnames <- topics %>% ungroup() %>% filter(topic == topic) %>% dplyr::select(source) %>% unlist()
+    names(selection) <- listnames
+    topic_lists[topic] <- list(selection)
+}

# time: 2022-05-17 13:29:14 UTC
# mode: r
+topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-17 13:29:21 UTC
# mode: r
+topic_fit <- LDA(dtm, k=2, control=list(seed=42))

# time: 2022-05-17 13:29:22 UTC
# mode: r
+topics <- tidy(topic_fit, matrix='beta')

# time: 2022-05-17 13:29:23 UTC
# mode: r
+topics <- topics %>% group_by(term) %>% mutate(top = max(beta)) %>% mutate(match = if_else(top == beta, TRUE, FALSE)) %>% filter(match)

# time: 2022-05-17 13:29:24 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[,c(1,3)]

# time: 2022-05-17 13:29:24 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-17 13:29:25 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-17 13:29:25 UTC
# mode: r
+topics %>% group_by(source, topic) %>% summarize(N=n())

# time: 2022-05-18 14:57:27 UTC
# mode: r
+library(chronicler)

# time: 2022-05-18 14:58:03 UTC
# mode: r
+do_something <- function(x){x^3 + 2}

# time: 2022-05-18 14:58:14 UTC
# mode: r
+do_r <- chronicler::record(do_something())

# time: 2022-05-18 14:58:21 UTC
# mode: r
+do_r <- chronicler::record(do_something)

# time: 2022-05-18 14:58:29 UTC
# mode: r
+do_r(3)

# time: 2022-05-18 14:58:44 UTC
# mode: r
+x <- do_r(3)

# time: 2022-05-18 14:58:50 UTC
# mode: r
+read_log(x)

# time: 2022-05-18 15:14:28 UTC
# mode: r
+library(chronicler)

# time: 2022-05-18 15:14:29 UTC
# mode: r
+do_something <- function(x){x^3 + 2}

# time: 2022-05-18 15:14:29 UTC
# mode: r
+do_r <- chronicler::record(do_something)

# time: 2022-05-18 15:14:30 UTC
# mode: r
+x <- do_r(3)

# time: 2022-05-18 15:14:30 UTC
# mode: r
+read_log(x)

# time: 2022-05-18 15:14:38 UTC
# mode: r
+x <- x+3 * X

# time: 2022-05-18 15:14:41 UTC
# mode: r
+x <- x+3 * x

# time: 2022-05-18 15:14:46 UTC
# mode: r
+x <- x+ 3 * x

# time: 2022-05-18 15:14:49 UTC
# mode: r
+x

# time: 2022-05-18 15:15:20 UTC
# mode: r
+x <- pick(x, "value") + 3 * pick(x, "value")

# time: 2022-05-18 15:15:24 UTC
# mode: r
+x

# time: 2022-05-18 15:15:26 UTC
# mode: r
+read_log(x)

# time: 2022-05-18 15:15:33 UTC
# mode: r
+record

# time: 2022-05-18 20:05:43 UTC
# mode: r
+0.16/0.36

# time: 2022-05-19 07:17:06 UTC
# mode: r
+source('src/RunningProportion.R')

# time: 2022-05-19 07:17:28 UTC
# mode: r
+N = 500 # Specify the total number of flips, denoted N.

# time: 2022-05-19 07:17:29 UTC
# mode: r
+pHeads = 0.5 # Specify underlying probability of heads.

# time: 2022-05-19 07:17:41 UTC
# mode: r
+flipSequence = sample( x=c(0,1), prob=c(1-pHeads,pHeads), size=N, replace=TRUE )

# time: 2022-05-19 07:17:43 UTC
# mode: r
+flipSequence 

# time: 2022-05-19 07:17:45 UTC
# mode: r
+r = cumsum( flipSequence ) # Cumulative sum: Number of heads at each step.

# time: 2022-05-19 07:17:47 UTC
# mode: r
+r

# time: 2022-05-19 07:17:55 UTC
# mode: r
+n = 1:N                    # Number of flips at each step.

# time: 2022-05-19 07:17:56 UTC
# mode: r
+runProp = r / n            # Component by component division.

# time: 2022-05-19 07:17:58 UTC
# mode: r
+runProp 

# time: 2022-05-19 07:18:41 UTC
# mode: r
+flipLetters <- paste(c("T", "H")[flipSequence[1:10] + 1], collapse = "")

# time: 2022-05-19 07:18:44 UTC
# mode: r
+flipLetters 

# time: 2022-05-19 07:18:45 UTC
# mode: r
+displayString <- paste0("Flip Sequence = ", flipLetters, "...")

# time: 2022-05-19 07:18:46 UTC
# mode: r
+displayString 

# time: 2022-05-19 07:18:50 UTC
# mode: r
+text(N, .9, displayString, adj = c(1, 0.5), cex = 1.3)

# time: 2022-05-19 07:19:01 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 08:25:05 UTC
# mode: r
+library(stringr)

# time: 2022-05-19 08:25:06 UTC
# mode: r
+library(tidytext)

# time: 2022-05-19 08:25:08 UTC
# mode: r
+library(readr)

# time: 2022-05-19 08:25:08 UTC
# mode: r
+library(magrittr)

# time: 2022-05-19 08:25:08 UTC
# mode: r
+library(tibble)

# time: 2022-05-19 08:25:08 UTC
# mode: r
+library(url)

# time: 2022-05-19 08:25:08 UTC
# mode: r
+library(textclean)

# time: 2022-05-19 08:25:08 UTC
# mode: r
+library(tidyr)

# time: 2022-05-19 08:25:09 UTC
# mode: r
+library(topicmodels)

# time: 2022-05-19 08:25:10 UTC
# mode: r
+remove_URL <- function(text) {
+    text <- replace_url(text)[[1]]
+    text
+}

# time: 2022-05-19 08:31:54 UTC
# mode: r
+prefilter_text <- function(texts) {
+    texts <- unlist(texts)
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "_", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "[0-9]", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        remove_URL(x)
+    }))
+    unlist(texts)
+}

# time: 2022-05-19 08:31:55 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-19 08:31:55 UTC
# mode: r
+to_investigate_title <- unique(reddit_data$title)[c(5, 10, 20, 32, 43, 45, 47, 48, 62, 67, 69, 78, 90, 138)]

# time: 2022-05-19 08:31:56 UTC
# mode: r
+for (t in to_investigate_title) {
+    sub <- reddit_data %>% filter(title == t)
+    print(paste0(sub$text, collapse = " "))
+    print(t)
+    id <- seq(1, length(unique(reddit_data$title)))[unique(reddit_data$title) == t]
+    print(id)
+    readline(prompt = "Press any key to continue")
+}

# time: 2022-05-19 08:31:58 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-05-19 08:31:58 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-05-19 08:31:59 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-05-19 08:31:59 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 08:32:00 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-19 08:32:01 UTC
# mode: r
+tokens <- tokens %>%
+    filter(!word %in% stop_words$word) %>%
+        filter(!word %in% c("it’s", "US", "u.s", "miele", "bosch", "siemens", "sebo"))

# time: 2022-05-19 08:32:02 UTC
# mode: r
+tokens <- tokens %>%
+    group_by(word) %>%
+        summarize(N = n()) %>%
+            arrange(N)

# time: 2022-05-19 08:32:03 UTC
# mode: r
+tokens <- tokens %>% filter(N >= 5)

# time: 2022-05-19 08:32:04 UTC
# mode: r
+tokens <- tokens %>% mutate(doc = "bsh")

# time: 2022-05-19 08:32:07 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-19 08:32:07 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-19 08:32:08 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist", "movie", "device", "malfunction", "service", "physics", "particle", "informatics", "computer", "nature", "space", "time", "star")

# time: 2022-05-19 08:32:11 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 08:32:34 UTC
# mode: r
+reference_text <- reference_text %>%
+    unnest_tokens(word, text) %>%
+        filter(!word %in% stop_words$word) %>%
+            group_by(word) %>%
+                summarize(N = n()) %>%
+                    filter(N > 2) %>%
+                        arrange(desc(N))

# time: 2022-05-19 08:32:35 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-19 08:32:39 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:32:41 UTC
# mode: r
+library(stringr)

# time: 2022-05-19 08:32:44 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 08:34:43 UTC
# mode: r
+library(stringr)

# time: 2022-05-19 08:34:44 UTC
# mode: r
+library(tidytext)

# time: 2022-05-19 08:34:44 UTC
# mode: r
+library(readr)

# time: 2022-05-19 08:34:44 UTC
# mode: r
+library(magrittr)

# time: 2022-05-19 08:34:45 UTC
# mode: r
+library(dplyr)

# time: 2022-05-19 08:34:45 UTC
# mode: r
+library(tibble)

# time: 2022-05-19 08:34:46 UTC
# mode: r
+library(textclean)

# time: 2022-05-19 08:34:46 UTC
# mode: r
+library(ggplot2)

# time: 2022-05-19 08:34:47 UTC
# mode: r
+library(tidyr)

# time: 2022-05-19 08:34:47 UTC
# mode: r
+library(topicmodels)

# time: 2022-05-19 08:34:48 UTC
# mode: r
+remove_URL <- function(text) {
+    text <- replace_url(text)[[1]]
+    text
+}

# time: 2022-05-19 08:34:48 UTC
# mode: r
+prefilter_text <- function(texts) {
+    texts <- unlist(texts)
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "_", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "[0-9]", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        remove_URL(x)
+    }))
+    unlist(texts)
+}

# time: 2022-05-19 08:34:49 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-19 08:34:50 UTC
# mode: r
+to_investigate_title <- unique(reddit_data$title)[c(5, 10, 20, 32, 43, 45, 47, 48, 62, 67, 69, 78, 90, 138)]

# time: 2022-05-19 08:34:50 UTC
# mode: r
+for (t in to_investigate_title) {
+    sub <- reddit_data %>% filter(title == t)
+    print(paste0(sub$text, collapse = " "))
+    print(t)
+    id <- seq(1, length(unique(reddit_data$title)))[unique(reddit_data$title) == t]
+    print(id)
+    readline(prompt = "Press any key to continue")
+}

# time: 2022-05-19 08:34:59 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-19 08:35:01 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-05-19 08:35:01 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-05-19 08:35:01 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-05-19 08:35:02 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 08:35:13 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-19 08:35:14 UTC
# mode: r
+tokens <- tokens %>%
+    filter(!word %in% stop_words$word) %>%
+        filter(!word %in% c("it’s", "US", "u.s", "miele", "bosch", "siemens", "sebo"))

# time: 2022-05-19 08:35:14 UTC
# mode: r
+tokens <- tokens %>%
+    group_by(word) %>%
+        summarize(N = n()) %>%
+            arrange(N)

# time: 2022-05-19 08:35:14 UTC
# mode: r
+tokens <- tokens %>% filter(N >= 5)

# time: 2022-05-19 08:35:14 UTC
# mode: r
+tokens <- tokens %>% mutate(doc = "bsh")

# time: 2022-05-19 08:35:14 UTC
# mode: r
+tokens 

# time: 2022-05-19 08:35:24 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-19 08:35:24 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-19 08:35:25 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist", "movie", "device", "malfunction", "service", "physics", "particle", "informatics", "computer", "nature", "space", "time", "star")

# time: 2022-05-19 08:35:28 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 08:35:45 UTC
# mode: r
+reference_text <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 08:35:48 UTC
# mode: r
+reference_text <- reference_text %>%
+    unnest_tokens(word, text) %>%
+        filter(!word %in% stop_words$word) %>%
+            group_by(word) %>%
+                summarize(N = n()) %>%
+                    filter(N > 2) %>%
+                        arrange(desc(N))

# time: 2022-05-19 08:35:50 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-19 08:35:51 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:35:59 UTC
# mode: r
+library(gutenbergr)

# time: 2022-05-19 08:36:06 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 08:36:26 UTC
# mode: r
+reference_text <- gutenbergr::gutenberg_works("Moby")

# time: 2022-05-19 08:36:40 UTC
# mode: r
+gutenbergr::gutenberg_authors

# time: 2022-05-19 08:36:55 UTC
# mode: r
+gutenbergr::gutenberg_authors %>% filter(author == "Melville, Hermann")

# time: 2022-05-19 08:36:59 UTC
# mode: r
+gutenbergr::gutenberg_authors %>% filter(author == "Melville, Herman")

# time: 2022-05-19 08:37:16 UTC
# mode: r
+gutenbergr::gutenberg_authors %>% filter(author == "Melville, Herman") %>% dplyr::select(gutenberg_author_id)

# time: 2022-05-19 08:37:33 UTC
# mode: r
+gutenbergr::gutenberg_works

# time: 2022-05-19 08:37:36 UTC
# mode: r
+gutenbergr::gutenberg_works()

# time: 2022-05-19 08:37:50 UTC
# mode: r
+gutenbergr::gutenberg_works() %>% filter(gutenberg_author_id == 9)

# time: 2022-05-19 08:38:09 UTC
# mode: r
+gutenbergr::gutenberg_works() %>% filter(gutenberg_author_id == 9) %>% dplyr::select(gutenberg_id)

# time: 2022-05-19 08:38:52 UTC
# mode: r
+gutenbergr::gutenberg_works() %>% filter(gutenberg_author_id == 9) %>% filter(title=="Moby Dick; Ir, The Whale") %>% dplyr::select(gutenberg_id)

# time: 2022-05-19 08:39:00 UTC
# mode: r
+gutenbergr::gutenberg_works() %>% filter(gutenberg_author_id == 9) %>% filter(title=="Moby Dick; Or, The Whale") %>% dplyr::select(gutenberg_id)

# time: 2022-05-19 08:39:13 UTC
# mode: r
+ID <- gutenbergr::gutenberg_works() %>% filter(gutenberg_author_id == 9) %>% filter(title=="Moby Dick; Or, The Whale") %>% dplyr::select(gutenberg_id) %>% unlist()

# time: 2022-05-19 08:39:35 UTC
# mode: r
+reference_text <- gutenbergr::gutenberg_download(ID)

# time: 2022-05-19 08:39:40 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:40:01 UTC
# mode: r
+reference_text <- gutenbergr::gutenberg_download(gutenberg_id = ID)

# time: 2022-05-19 08:40:07 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:40:11 UTC
# mode: r
+ID <- gutenbergr::gutenberg_works() %>% filter(gutenberg_author_id == 9) %>% filter(title=="Moby Dick; Or, The Whale") %>% dplyr::select(gutenberg_id) %>% unlist()

# time: 2022-05-19 08:40:14 UTC
# mode: r
+ID

# time: 2022-05-19 08:40:22 UTC
# mode: r
+ID <- gutenbergr::gutenberg_works() %>% filter(gutenberg_author_id == 9) %>% filter(title=="Moby Dick") %>% dplyr::select(gutenberg_id) %>% unlist()

# time: 2022-05-19 08:40:24 UTC
# mode: r
+reference_text <- gutenbergr::gutenberg_download(gutenberg_id = ID)

# time: 2022-05-19 08:40:29 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:40:50 UTC
# mode: r
+ID

# time: 2022-05-19 08:40:57 UTC
# mode: r
+reference_text <- gutenbergr::gutenberg_download(gutenberg_id = ID[[1]])

# time: 2022-05-19 08:41:01 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:41:14 UTC
# mode: r
+ID <- gutenbergr::gutenberg_works() %>% filter(gutenberg_author_id == 9) %>% filter(title=="Moby Dick; Or, The Whale") %>% dplyr::select(gutenberg_id) %>% unlist() 

# time: 2022-05-19 08:41:16 UTC
# mode: r
+ID

# time: 2022-05-19 08:41:18 UTC
# mode: r
+reference_text <- gutenbergr::gutenberg_download(gutenberg_id = ID[[1]])

# time: 2022-05-19 08:41:21 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:41:26 UTC
# mode: r
+ID[[1]]

# time: 2022-05-19 08:41:36 UTC
# mode: r
+ID <- ID[[1]]

# time: 2022-05-19 08:41:37 UTC
# mode: r
+ID

# time: 2022-05-19 08:41:41 UTC
# mode: r
+reference_text <- gutenbergr::gutenberg_download(gutenberg_id = ID)

# time: 2022-05-19 08:41:46 UTC
# mode: r
+gutenbergr::gutenberg_download(gutenberg_id = ID)

# time: 2022-05-19 08:41:50 UTC
# mode: r
+reference_text <- gutenbergr::gutenberg_download(gutenberg_id = 1)

# time: 2022-05-19 08:45:09 UTC
# mode: r
+reference_text <- read_file("moby.txt")

# time: 2022-05-19 08:45:11 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:45:21 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 08:45:25 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:45:40 UTC
# mode: r
+reference_text <- read_file("moby.txt")

# time: 2022-05-19 08:45:42 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 08:45:46 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:45:55 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-19 08:45:57 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:46:19 UTC
# mode: r
+reference_text <- read_file("moby.txt")

# time: 2022-05-19 08:46:24 UTC
# mode: r
+reference_text <- prefilter_text(reference_text) %>% 
+tibble(text=reference_text) %>%
+    unnest_tokens(word, text) %>%
+        filter(!word %in% stop_words$word) %>%
+            group_by(word) %>%
+                summarize(N = n()) %>%
+                    filter(N > 2) %>%
+                        arrange(desc(N))

# time: 2022-05-19 08:46:25 UTC
# mode: r
+reference_text <- reference_text %>% mutate(doc = "reference")

# time: 2022-05-19 08:46:28 UTC
# mode: r
+reference_text 

# time: 2022-05-19 08:46:42 UTC
# mode: r
+docs <- bind_rows(tokens, reference_text)

# time: 2022-05-19 08:46:43 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-19 08:46:44 UTC
# mode: r
+ggplot(docs, aes(word, tf_idf)) +
+    geom_point() +
+        facet_wrap(~doc)

# time: 2022-05-19 08:46:56 UTC
# mode: r
+bsh_words <- docs %>% filter(doc == "bsh")

# time: 2022-05-19 08:46:57 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[4])

# time: 2022-05-19 08:46:59 UTC
# mode: r
+reference_words <- docs %>% filter(doc == "reference")

# time: 2022-05-19 08:47:01 UTC
# mode: r
+reference_words 

# time: 2022-05-19 08:47:03 UTC
# mode: r
+reference_words <- reference_words %>% filter(tf_idf >= summary(reference_words$tf_idf)[4])

# time: 2022-05-19 08:47:04 UTC
# mode: r
+reference_words 

# time: 2022-05-19 08:47:11 UTC
# mode: r
+docs_adjusted <- bind_rows(bsh_words, reference_words)

# time: 2022-05-19 08:47:13 UTC
# mode: r
+docs_adjusted 

# time: 2022-05-19 08:47:17 UTC
# mode: r
+bsh_words <- docs %>% filter(doc == "bsh")

# time: 2022-05-19 08:47:18 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[4])

# time: 2022-05-19 08:47:18 UTC
# mode: r
+reference_words <- docs %>% filter(doc == "reference")

# time: 2022-05-19 08:47:18 UTC
# mode: r
+reference_words <- reference_words %>% filter(tf_idf >= summary(reference_words$tf_idf)[4])

# time: 2022-05-19 08:47:19 UTC
# mode: r
+docs_adjusted <- bind_rows(bsh_words, reference_words)

# time: 2022-05-19 08:47:19 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-19 08:47:21 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 2, control = list(seed = 42))

# time: 2022-05-19 08:47:22 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 08:47:26 UTC
# mode: r
+topics <- topics %>%
+    group_by(term) %>%
+        mutate(top = max(beta)) %>%
+            mutate(match = if_else(top == beta, TRUE, FALSE)) %>%
+                filter(match)

# time: 2022-05-19 08:47:30 UTC
# mode: r
+topics 

# time: 2022-05-19 08:47:33 UTC
# mode: r
+refTable <- bind_rows(tokens, reference_text)[, c(1, 3)]

# time: 2022-05-19 08:47:34 UTC
# mode: r
+colnames(refTable) <- c("term", "source")

# time: 2022-05-19 08:47:34 UTC
# mode: r
+topics <- topics %>% left_join(refTable)

# time: 2022-05-19 08:47:36 UTC
# mode: r
+topics %>%
+    group_by(source, topic) %>%
+        summarize(N = n())

# time: 2022-05-19 08:47:50 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 08:48:05 UTC
# mode: r
+topics 

# time: 2022-05-19 08:48:41 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 08:48:44 UTC
# mode: r
+topics 

# time: 2022-05-19 08:48:57 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 08:49:09 UTC
# mode: r
+topics 

# time: 2022-05-19 08:49:55 UTC
# mode: r
+topics %>% ggplot(aes(term, beta))+geom_col() +facet_wrap(topic)

# time: 2022-05-19 08:50:12 UTC
# mode: r
+topics %>% ggplot(aes(term, beta))+geom_col() +facet_wrap(~topic)

# time: 2022-05-19 08:50:24 UTC
# mode: r
+topics 

# time: 2022-05-19 08:50:30 UTC
# mode: r
+topics %>% ggplot(aes(term, beta))+geom_col() +facet_wrap(~topic) + coord_flip()

# time: 2022-05-19 08:52:21 UTC
# mode: r
+topic_lists <- list()

# time: 2022-05-19 08:52:22 UTC
# mode: r
+for (topic in c(1, 2, 3)) {
+    selection <- topics %>%
+        ungroup() %>%
+        filter(topic == topic) %>%
+        dplyr::select(term) %>%
+        unlist()
+    listnames <- topics %>%
+        ungroup() %>%
+        filter(topic == topic) %>%
+        dplyr::select(source) %>%
+        unlist()
+    names(selection) <- listnames
+    topic_lists[topic] <- list(selection)
+}

# time: 2022-05-19 08:52:27 UTC
# mode: r
+topic_lists 

# time: 2022-05-19 08:53:11 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 08:53:22 UTC
# mode: r
+topics %>%
+    desc(beta) %>% 
+        mutate(term=factor(term, levels=rev(unique(term)))) %>% 
+            ggplot(aes(term, beta)) +
+                geom_col() +
+                    facet_wrap(~topic) +
+                        coord_flip()

# time: 2022-05-19 08:53:26 UTC
# mode: r
+topics 

# time: 2022-05-19 08:53:40 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:01:22 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 09:01:24 UTC
# mode: r
+per_topics 

# time: 2022-05-19 09:01:48 UTC
# mode: r
+docs 

# time: 2022-05-19 09:02:53 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:04:33 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-19 09:04:37 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:34:20 UTC
# mode: r
+technical <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:34:21 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:34:27 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-19 09:34:29 UTC
# mode: r
+technical <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:34:29 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:34:45 UTC
# mode: r
+reference_text 

# time: 2022-05-19 09:35:22 UTC
# mode: r
+reference_text <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 09:35:24 UTC
# mode: r
+reference_text 

# time: 2022-05-19 09:35:34 UTC
# mode: r
+technical <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:35:34 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(technical, " ", text)
+}

# time: 2022-05-19 09:35:41 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-19 09:35:43 UTC
# mode: r
+technical <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:35:52 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-19 09:35:53 UTC
# mode: r
+library(gutenbergr)

# time: 2022-05-19 09:35:53 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-19 09:35:54 UTC
# mode: r
+keywords<- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:36:03 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(keywords, " ", text)
+}

# time: 2022-05-19 09:36:08 UTC
# mode: r
+reference_text 

# time: 2022-05-19 09:36:44 UTC
# mode: r
+keywords<- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:36:45 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(w, " ", text)
+}

# time: 2022-05-19 09:36:51 UTC
# mode: r
+reference_text <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 09:36:53 UTC
# mode: r
+reference_text 

# time: 2022-05-19 09:36:55 UTC
# mode: r
+keywords<- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:36:55 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(w, " ", text)
+}

# time: 2022-05-19 09:37:00 UTC
# mode: r
+reference_text 

# time: 2022-05-19 09:37:03 UTC
# mode: r
+keywords<- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:37:06 UTC
# mode: r
+ keywords

# time: 2022-05-19 09:37:09 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-19 09:37:18 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-19 09:37:18 UTC
# mode: r
+library(gutenbergr)

# time: 2022-05-19 09:37:18 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-19 09:37:20 UTC
# mode: r
+keywords<- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:37:20 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:37:23 UTC
# mode: r
+reference_text 

# time: 2022-05-19 09:37:31 UTC
# mode: r
+reference_text <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 09:37:33 UTC
# mode: r
+reference_text 

# time: 2022-05-19 09:37:40 UTC
# mode: r
+keywords<- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:37:44 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:37:48 UTC
# mode: r
+reference_text <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 09:39:44 UTC
# mode: r
+keywords<- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "warranty", "repair")

# time: 2022-05-19 09:39:44 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:40:04 UTC
# mode: r
+keywords<- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair")

# time: 2022-05-19 09:40:04 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:40:08 UTC
# mode: r
+reference_text 

# time: 2022-05-19 09:40:30 UTC
# mode: r
+keywords<- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:40:30 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:40:32 UTC
# mode: r
+technical <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 09:40:32 UTC
# mode: r
+keywords<- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair")

# time: 2022-05-19 09:40:33 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:40:39 UTC
# mode: r
+keywords<- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair")

# time: 2022-05-19 09:40:39 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:40:41 UTC
# mode: r
+faults <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 09:40:41 UTC
# mode: r
+faults 

# time: 2022-05-19 09:40:44 UTC
# mode: r
+technical 

# time: 2022-05-19 09:40:46 UTC
# mode: r
+keywords<- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household")

# time: 2022-05-19 09:40:46 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:40:50 UTC
# mode: r
+technical <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 09:40:54 UTC
# mode: r
+keywords<- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair")

# time: 2022-05-19 09:40:54 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:40:57 UTC
# mode: r
+faults <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 09:41:03 UTC
# mode: r
+technical 

# time: 2022-05-19 09:41:06 UTC
# mode: r
+faults 

# time: 2022-05-19 09:41:18 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:52:26 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-19 09:52:26 UTC
# mode: r
+library(gutenbergr)

# time: 2022-05-19 09:52:27 UTC
# mode: r
+# neutral

# time: 2022-05-19 09:52:27 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-19 09:52:27 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist", "movie", "device", "malfunction", "service", "physics", "particle", "informatics", "computer", "nature", "space", "time", "star")

# time: 2022-05-19 09:52:30 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:52:47 UTC
# mode: r
+neutral <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))

# time: 2022-05-19 09:53:51 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:55:18 UTC
# mode: r
+tokens

# time: 2022-05-19 09:55:27 UTC
# mode: r
+faults 

# time: 2022-05-19 09:56:27 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:56:31 UTC
# mode: r
+neutral 

# time: 2022-05-19 09:56:43 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:56:50 UTC
# mode: r
+netural %>% prefilter_text(text) 

# time: 2022-05-19 09:56:57 UTC
# mode: r
+neutral %>% prefilter_text(text)

# time: 2022-05-19 09:57:06 UTC
# mode: r
+neutral 

# time: 2022-05-19 09:57:22 UTC
# mode: r
+neutral %>% mutate(text =prefilter_text(text))

# time: 2022-05-19 09:57:29 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:57:38 UTC
# mode: r
+neutral 

# time: 2022-05-19 09:57:55 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:57:58 UTC
# mode: r
+technical 

# time: 2022-05-19 09:58:17 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:58:21 UTC
# mode: r
+faults 

# time: 2022-05-19 09:59:01 UTC
# mode: r
+keywords<- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair", "damage", "harm", "misuse", "injury", "wound", "stop")

# time: 2022-05-19 09:59:02 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-19 09:59:04 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-19 09:59:07 UTC
# mode: r
+faults <- tibble(text = reference_text) %>% mutate(text = prefilter_text(text))%>% mutate(doc="faults")

# time: 2022-05-19 09:59:12 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 09:59:14 UTC
# mode: r
+faults 

# time: 2022-05-19 09:59:57 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 10:00:21 UTC
# mode: r
+faults 

# time: 2022-05-19 10:00:32 UTC
# mode: r
+tokens

# time: 2022-05-19 10:00:44 UTC
# mode: r
+docs_adjusted <- bind_rows(tokens, neutral, technical, faults)

# time: 2022-05-19 10:00:51 UTC
# mode: r
+docs_adjusted 

# time: 2022-05-19 10:00:53 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-19 10:00:55 UTC
# mode: r
+dtm 

# time: 2022-05-19 10:00:57 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 6, control = list(seed = 42))

# time: 2022-05-19 10:01:00 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 10:01:03 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 10:01:04 UTC
# mode: r
+per_topics 

# time: 2022-05-19 10:01:10 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 2, control = list(seed = 42))

# time: 2022-05-19 10:01:12 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 10:01:13 UTC
# mode: r
+per_topics 

# time: 2022-05-19 10:01:37 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 3, control = list(seed = 42))

# time: 2022-05-19 10:01:38 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 10:01:40 UTC
# mode: r
+per_topics 

# time: 2022-05-19 10:02:04 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 4, control = list(seed = 42))

# time: 2022-05-19 10:02:04 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 10:02:05 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 10:02:07 UTC
# mode: r
+per_topics 

# time: 2022-05-19 10:03:54 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(topic, gamma)) +
+        facet_wrap(~document)
+
+}

# time: 2022-05-19 10:04:02 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 10:04:44 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(document, gamma)) +
+        facet_wrap(~topic)
+
+}

# time: 2022-05-19 10:04:45 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 10:05:22 UTC
# mode: r
+docs_adjusted <- bind_rows(tokens, technical, faults)

# time: 2022-05-19 10:05:22 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-19 10:05:26 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 3, control = list(seed = 42))

# time: 2022-05-19 10:05:27 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 10:05:27 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 10:05:28 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(document, gamma)) +
+        facet_wrap(~topic)
+
+}

# time: 2022-05-19 10:05:28 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:37:09 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 11:37:10 UTC
# mode: r
+topics 

# time: 2022-05-19 11:37:13 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 11:37:32 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(document, gamma, fill=document), color='black') +
+        facet_wrap(~topic)
+
+}

# time: 2022-05-19 11:37:33 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:37:55 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(document, gamma, fill=document), color='black') +
+        facet_wrap(~topic) +
+        scale_fill_manual(values=c("orange", "navyblue", "cornflowerblue"))
+
+}

# time: 2022-05-19 11:37:56 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:38:19 UTC
# mode: r
+coding <- factor(1,2,3)

# time: 2022-05-19 11:38:25 UTC
# mode: r
+coding 

# time: 2022-05-19 11:38:32 UTC
# mode: r
+coding <- factor(c(1,2,3))

# time: 2022-05-19 11:38:34 UTC
# mode: r
+coding 

# time: 2022-05-19 11:38:49 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:39:11 UTC
# mode: r
+coding <- factor(c(1,2,3), labels=c("bsh", "faults", "technical"))

# time: 2022-05-19 11:39:15 UTC
# mode: r
+coding 

# time: 2022-05-19 11:39:33 UTC
# mode: r
+topics 

# time: 2022-05-19 11:40:15 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:40:21 UTC
# mode: r
+coding <- tribble(
+    ~topic, ~topic_label,
+    1, "bsh",
+    2,"faults",
+    3,"technical"
+)

# time: 2022-05-19 11:40:22 UTC
# mode: r
+coding 

# time: 2022-05-19 11:40:45 UTC
# mode: r
+topics_identified <- topics %>% left_join(coding)

# time: 2022-05-19 11:40:56 UTC
# mode: r
+topics_identified 

# time: 2022-05-19 11:41:56 UTC
# mode: r
+topics_identified <- topics %>% group_by((term)) %>% mutate(top = max(beta)) %>% ungroup() %>% filter(beta==top) %>%  left_join(coding)

# time: 2022-05-19 11:42:00 UTC
# mode: r
+topics_identified 

# time: 2022-05-19 11:42:37 UTC
# mode: r
+topics_identified <- topics %>% group_by((term)) %>% mutate(top = max(beta)) %>% ungroup() %>% filter(beta==top) %>%  left_join(coding) %>% dplyr::select(-`(term)`)

# time: 2022-05-19 11:42:40 UTC
# mode: r
+topics_identified 

# time: 2022-05-19 11:42:46 UTC
# mode: r
+topics_identified <- topics %>% group_by((term)) %>% mutate(top = max(beta)) %>% ungroup() %>% filter(beta==top) %>%  left_join(coding) %>% dplyr::select(-`(term)`, -top)

# time: 2022-05-19 11:42:49 UTC
# mode: r
+topics_identified 

# time: 2022-05-19 11:42:53 UTC
# mode: r
+topics 

# time: 2022-05-19 11:43:13 UTC
# mode: r
+tokens

# time: 2022-05-19 11:43:35 UTC
# mode: r
+topics_identified <- topics %>%filter(word %in% tokens$word) %>%  group_by((term)) %>% mutate(top = max(beta)) %>% ungroup() %>% filter(beta==top) %>%  left_join(coding) %>% dplyr::select(-`(term)`, -top)

# time: 2022-05-19 11:43:44 UTC
# mode: r
+tokens$word

# time: 2022-05-19 11:43:49 UTC
# mode: r
+topics_identified <- topics %>%filter(term %in% tokens$word) %>%  group_by((term)) %>% mutate(top = max(beta)) %>% ungroup() %>% filter(beta==top) %>%  left_join(coding) %>% dplyr::select(-`(term)`, -top)

# time: 2022-05-19 11:43:51 UTC
# mode: r
+topics_identified 

# time: 2022-05-19 11:43:58 UTC
# mode: r
+topics 

# time: 2022-05-19 11:44:13 UTC
# mode: r
+docs_adjusted <- bind_rows(tokens, technical, faults)

# time: 2022-05-19 11:44:14 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-19 11:44:14 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 3, control = list(seed = 42))

# time: 2022-05-19 11:44:15 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 11:44:18 UTC
# mode: r
+topics 

# time: 2022-05-19 11:44:24 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 11:44:25 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(document, gamma, fill=document), color='black') +
+        facet_wrap(~topic) +
+        scale_fill_manual(values=c("orange", "navyblue", "cornflowerblue"))
+
+}

# time: 2022-05-19 11:44:26 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:44:34 UTC
# mode: r
+coding <- tribble(
+    ~topic, ~topic_label,
+    1, "bsh",
+    2,"faults",
+    3,"technical"
+)

# time: 2022-05-19 11:44:35 UTC
# mode: r
+topics_identified <- topics %>%filter(term %in% tokens$word) %>%  group_by((term)) %>% mutate(top = max(beta)) %>% ungroup() %>% filter(beta==top) %>%  left_join(coding) %>% dplyr::select(-`(term)`, -top)

# time: 2022-05-19 11:44:36 UTC
# mode: r
+topics_identified 

# time: 2022-05-19 11:45:46 UTC
# mode: r
+topics_final <- topics_identified %>% dplyr::select(-beta, -topic) %>% pivot_wider(names_from=topic_label)

# time: 2022-05-19 11:46:06 UTC
# mode: r
+topics_final <- topics_identified %>% dplyr::select(-topic) %>% pivot_wider(names_from=topic_label, values_from=beta)

# time: 2022-05-19 11:46:09 UTC
# mode: r
+topics_final 

# time: 2022-05-19 11:46:43 UTC
# mode: r
+topics_final <- topics_identified %>% dplyr::select(-topic) %>% arrange(desc(beta)) %>%  pivot_wider(names_from=topic_label, values_from=beta)

# time: 2022-05-19 11:46:46 UTC
# mode: r
+topics_final 

# time: 2022-05-19 11:47:16 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 11:48:10 UTC
# mode: r
+topics_final 

# time: 2022-05-19 11:48:52 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 11:49:54 UTC
# mode: r
+docs_adjusted <- bind_rows(tokens, technical, faults)

# time: 2022-05-19 11:49:54 UTC
# mode: r
+saveRDS(docs_adjusted, "docs.RDS")

# time: 2022-05-19 11:49:57 UTC
# mode: r
+docs_adjusted <- readRDS("docs_adjusted.RDS")

# time: 2022-05-19 11:50:04 UTC
# mode: r
+docs_adjusted <- readRDS("docs.RDS")

# time: 2022-05-19 11:50:07 UTC
# mode: r
+docs_adjusted 

# time: 2022-05-19 11:50:09 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-19 11:50:09 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 3, control = list(seed = 42))

# time: 2022-05-19 11:50:09 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 11:50:10 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 11:50:10 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(document, gamma, fill=document), color='black') +
+        facet_wrap(~topic) +
+        scale_fill_manual(values=c("orange", "navyblue", "cornflowerblue"))
+
+}

# time: 2022-05-19 11:50:11 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:50:20 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 3, control = list(seed = 42))

# time: 2022-05-19 11:50:20 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 11:50:21 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 11:50:21 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(document, gamma, fill=document), color='black') +
+        facet_wrap(~topic) +
+        scale_fill_manual(values=c("orange", "navyblue", "cornflowerblue"))
+
+}

# time: 2022-05-19 11:50:22 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:50:50 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 11:51:21 UTC
# mode: r
+docs_adjusted <- bind_rows(tokens, technical, faults)

# time: 2022-05-19 11:51:25 UTC
# mode: r
+docs_adjusted 

# time: 2022-05-19 11:51:26 UTC
# mode: r
+saveRDS(docs_adjusted, "docs.RDS")

# time: 2022-05-19 11:51:27 UTC
# mode: r
+docs_adjusted <- readRDS("docs.RDS")

# time: 2022-05-19 11:51:28 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-19 11:51:28 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 3, control = list(seed = 42))

# time: 2022-05-19 11:51:29 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 11:51:29 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 11:51:30 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(document, gamma, fill=document), color='black') +
+        facet_wrap(~topic) +
+        scale_fill_manual(values=c("orange", "navyblue", "cornflowerblue"))
+
+}

# time: 2022-05-19 11:51:31 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:51:43 UTC
# mode: r
+docs_adjusted <- readRDS("docs.RDS")

# time: 2022-05-19 11:51:44 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-19 11:51:44 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 3, control = list(seed = 42))

# time: 2022-05-19 11:51:44 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-19 11:51:45 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-19 11:51:45 UTC
# mode: r
+plot_topics <- function(per_topics_gammas){
+    ggplot(per_topics_gammas) +
+        geom_col(aes(document, gamma, fill=document), color='black') +
+        facet_wrap(~topic) +
+        scale_fill_manual(values=c("orange", "navyblue", "cornflowerblue"))
+
+}

# time: 2022-05-19 11:51:46 UTC
# mode: r
+coding <- tribble(
+    ~topic, ~topic_label,
+    1, "bsh",
+    2,"faults",
+    3,"technical"
+)

# time: 2022-05-19 11:51:48 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 11:51:56 UTC
# mode: r
+coding <- tribble(
+    ~topic, ~topic_label,
+    1, "bsh",
+    2,"faults",
+    3,"technical"
+)

# time: 2022-05-19 11:51:57 UTC
# mode: r
+topics_identified <- topics %>%filter(term %in% tokens$word) %>%  group_by((term)) %>% mutate(top = max(beta)) %>% ungroup() %>% filter(beta==top) %>%  left_join(coding) %>% dplyr::select(-`(term)`, -top)

# time: 2022-05-19 11:51:59 UTC
# mode: r
+topics_final <- topics_identified %>% dplyr::select(-topic) %>% arrange(desc(beta)) %>%  pivot_wider(names_from=topic_label, values_from=beta)

# time: 2022-05-19 11:52:00 UTC
# mode: r
+topics_final 

# time: 2022-05-19 11:52:50 UTC
# mode: r
+na.action(topics_final, 0)

# time: 2022-05-19 11:52:53 UTC
# mode: r
+topics_final

# time: 2022-05-19 11:53:25 UTC
# mode: r
+?na.omit()

# time: 2022-05-19 11:53:52 UTC
# mode: r
+     options("na.action")

# time: 2022-05-19 11:54:48 UTC
# mode: r
+topics_final <- topics_identified %>% dplyr::select(-topic) %>% arrange(desc(beta)) %>%  pivot_wider(names_from=topic_label, values_from=beta) %>% 
+    mutate(bsh = if_else(is.na(bsh),0,1)) %>% 
+        mutate(technical = if_else(is.na(technical),0,1)) %>% 
+            mutate(faults = if_else(is.na(faults),0,1))

# time: 2022-05-19 11:54:52 UTC
# mode: r
+topics_final 

# time: 2022-05-19 11:55:21 UTC
# mode: r
+topics_final <- topics_identified %>% dplyr::select(-topic) %>% arrange(desc(beta)) %>%  pivot_wider(names_from=topic_label, values_from=beta) %>% 
+    mutate(bsh = if_else(is.na(bsh),0,bsh)) %>% 
+        mutate(technical = if_else(is.na(technical),0,technical)) %>% 
+            mutate(faults = if_else(is.na(faults),0,faults))

# time: 2022-05-19 11:55:26 UTC
# mode: r
+topics_final 

# time: 2022-05-19 11:56:32 UTC
# mode: r
+topics_graph <- topics %>%filter(term %in% tokens$word)%>%  left_join(coding) %>% dplyr::select(-`(term)`, -top)

# time: 2022-05-19 11:56:38 UTC
# mode: r
+topics_graph 

# time: 2022-05-19 11:56:40 UTC
# mode: r
+topics 

# time: 2022-05-19 11:56:50 UTC
# mode: r
+topics_graph <- topics %>%filter(term %in% tokens$word)%>%  left_join(coding)

# time: 2022-05-19 11:56:53 UTC
# mode: r
+topics_graph 

# time: 2022-05-19 11:57:28 UTC
# mode: r
+topics_graph <- topics_graph %>% dplyr::select(topic_label, term, beta)

# time: 2022-05-19 11:57:47 UTC
# mode: r
+colnames(topics_graph) <- c("from", "to", "strength")

# time: 2022-05-19 11:57:51 UTC
# mode: r
+topics_graph 

# time: 2022-05-19 11:58:03 UTC
# mode: r
+g <- graph_from_data_frame(topics_graph)

# time: 2022-05-19 11:58:51 UTC
# mode: r
+g <-igraph::from_data_frame(topics_graph)

# time: 2022-05-19 11:58:53 UTC
# mode: r
+g

# time: 2022-05-19 11:58:59 UTC
# mode: r
+plot(g)

# time: 2022-05-19 11:59:00 UTC
# mode: r
+g <-igraph::from_data_frame(topics_graph)

# time: 2022-05-19 11:59:01 UTC
# mode: r
+plot(g)

# time: 2022-05-19 11:59:03 UTC
# mode: r
+g

# time: 2022-05-19 11:59:09 UTC
# mode: r
+igraph::from_data_frame(topics_graph)

# time: 2022-05-19 11:59:12 UTC
# mode: r
+topics_graph

# time: 2022-05-19 11:59:34 UTC
# mode: r
+topics_graph <- topics %>%filter(term %in% tokens$word)%>%  left_join(coding)

# time: 2022-05-19 11:59:34 UTC
# mode: r
+topics_graph <- topics_graph %>% dplyr::select(topic_label, term, beta) %>% top_n(100, beta)

# time: 2022-05-19 11:59:35 UTC
# mode: r
+colnames(topics_graph) <- c("from", "to", "strength")

# time: 2022-05-19 11:59:38 UTC
# mode: r
+topics_graph

# time: 2022-05-19 12:00:14 UTC
# mode: r
+colnames(topics_graph) <- c("from", "to", "strength")

# time: 2022-05-19 12:00:15 UTC
# mode: r
+g <-igraph::from_data_frame(topics_graph)

# time: 2022-05-19 12:00:21 UTC
# mode: r
+gr <-igraph::from_data_frame(topics_graph)

# time: 2022-05-19 12:00:23 UTC
# mode: r
+gr

# time: 2022-05-19 12:00:30 UTC
# mode: r
+gr <-igraph::from_data_frame(topics_graph)

# time: 2022-05-19 12:00:31 UTC
# mode: r
+plot(g)

# time: 2022-05-19 12:01:21 UTC
# mode: r
+gr <-igraph::graph_from_data_frame(topics_graph)

# time: 2022-05-19 12:01:23 UTC
# mode: r
+plot(g)

# time: 2022-05-19 12:01:25 UTC
# mode: r
+plot(gr)

# time: 2022-05-19 12:02:02 UTC
# mode: r
+E(gr)

# time: 2022-05-19 12:02:04 UTC
# mode: r
+gr <-igraph::graph_from_data_frame(topics_graph)

# time: 2022-05-19 12:02:05 UTC
# mode: r
+E(gr)

# time: 2022-05-19 12:02:08 UTC
# mode: r
+library(igraph)

# time: 2022-05-19 12:02:08 UTC
# mode: r
+library(ggraph)

# time: 2022-05-19 12:02:13 UTC
# mode: r
+E(gr)

# time: 2022-05-19 12:02:30 UTC
# mode: r
+E(gr)$strength <- topics_graph$strength

# time: 2022-05-19 12:02:48 UTC
# mode: r
+plot(gr, edge.width=E(gr)$stength)

# time: 2022-05-19 12:03:26 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 12:04:30 UTC
# mode: r
+?geom_edge_link

# time: 2022-05-19 12:05:06 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 12:07:34 UTC
# mode: r
+V(gr)$name

# time: 2022-05-19 12:07:47 UTC
# mode: r
+ggraph::geom_node_text

# time: 2022-05-19 12:07:56 UTC
# mode: r
+?ggraph::geom_node_text

# time: 2022-05-19 12:08:21 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 12:09:29 UTC
# mode: r
+V(gr)$label

# time: 2022-05-19 12:10:04 UTC
# mode: r
+V(gr) %in% c("bsh", "technical", "faults")

# time: 2022-05-19 12:10:06 UTC
# mode: r
+V(gr)$text_aes <- V(gr) %in% c("bsh", "technical", "faults") 

# time: 2022-05-19 12:10:22 UTC
# mode: r
+gr <-igraph::graph_from_data_frame(topics_graph)

# time: 2022-05-19 12:10:22 UTC
# mode: r
+E(gr)$strength <- topics_graph$strength

# time: 2022-05-19 12:10:22 UTC
# mode: r
+V(gr)$text_aes <- V(gr) %in% c("bsh", "technical", "faults") 

# time: 2022-05-19 12:10:25 UTC
# mode: r
+ggraph(gr, layout='fr') +
+    geom_edge_link(aes(edge_width = strength, edge_alpha=strength), show.legend=FALSE, color='gray60')+
+        geom_node_point(color='black', size=3) +
+            geom_node_point(color='skyblue', size=2) +
+                geom_node_text(aes(label=name, color = text_aes), nudge_y=-0.5)

# time: 2022-05-19 12:10:40 UTC
# mode: r
+V(gr)$text_aes <- V(gr)$name %in% c("bsh", "technical", "faults") 

# time: 2022-05-19 12:10:41 UTC
# mode: r
+plot(gr, edge.width=E(gr)$stength)

# time: 2022-05-19 12:10:46 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 12:12:29 UTC
# mode: r
+?ggplot::face

# time: 2022-05-19 12:12:37 UTC
# mode: r
+?ggplot::fontface

# time: 2022-05-19 12:12:44 UTC
# mode: r
+?ggplot::geom_text

# time: 2022-05-19 12:12:48 UTC
# mode: r
+?ggplot2::geom_text

# time: 2022-05-19 12:13:27 UTC
# mode: r
+V(gr)$name %in% c("bsh", "technical", "faults")

# time: 2022-05-19 12:14:00 UTC
# mode: r
+V(gr)$face <- rep("bold", vcount(gr))[V(gr)$name %in% c("bsh", "technical", "faults")]

# time: 2022-05-19 12:14:07 UTC
# mode: r
+rep("bold", vcount(gr))[V(gr)$name %in% c("bsh", "technical", "faults")]

# time: 2022-05-19 12:14:28 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("bsh", "technical", "faults")], rep(NA, vcount(gr)-3))

# time: 2022-05-19 12:14:30 UTC
# mode: r
+plot(gr, edge.width=E(gr)$stength)

# time: 2022-05-19 12:14:41 UTC
# mode: r
+ggraph(gr, layout='fr') +
+    geom_edge_link(aes(edge_width = strength, edge_alpha=strength), show.legend=FALSE, color='gray60')+
+        geom_node_point(color='black', size=3) +
+            geom_node_point(color='skyblue', size=2) +
+                geom_node_text(aes(label=name, color = text_aes, fontface=face), nudge_y=-0.5)+
+                    scale_color_manual(values=c("grey60", "black"))

# time: 2022-05-19 12:14:55 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("bsh", "technical", "faults")], rep("regular", vcount(gr)-3))

# time: 2022-05-19 12:14:58 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 12:16:16 UTC
# mode: r
+vignette("ggplot2-specs")

# time: 2022-05-19 12:16:55 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("bsh", "technical", "faults")], rep("sans", vcount(gr)-3))

# time: 2022-05-19 12:16:57 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 12:17:31 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("bsh", "technical", "faults")], rep("plain", vcount(gr)-3))

# time: 2022-05-19 12:17:33 UTC
# mode: r
+ggraph(gr, layout='fr') +
+    geom_edge_link(aes(edge_width = strength, edge_alpha=strength), show.legend=FALSE, color='gray60')+
+        geom_node_point(color='black', size=3) +
+            geom_node_point(color='skyblue', size=2) +
+                geom_node_text(aes(label=name, color = text_aes, fontface=face), nudge_y=-0.5)+
+                    scale_color_manual(values=c("grey60", "black"))

# time: 2022-05-19 12:18:02 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 12:25:35 UTC
# mode: r
+topics_final 

# time: 2022-05-19 12:25:45 UTC
# mode: r
+}

# time: 2022-05-19 12:25:47 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-19 12:26:38 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 19:37:29 UTC
# mode: r
+data(HairEyeColor)

# time: 2022-05-19 19:37:35 UTC
# mode: r
+HairEyeColor

# time: 2022-05-19 19:38:28 UTC
# mode: r
+EyeColorFreq = apply(HairEyeColor, c("Eye", "Hair"), sum)

# time: 2022-05-19 19:38:31 UTC
# mode: r
+EyeColorFreq 

# time: 2022-05-19 19:39:08 UTC
# mode: r
+EyeColorProp = EyeColorFreq / sum(EyeColorFreq)

# time: 2022-05-19 19:39:12 UTC
# mode: r
+EyeColorProp 

# time: 2022-05-19 19:39:16 UTC
# mode: r
+EyeColorFreq

# time: 2022-05-19 19:39:19 UTC
# mode: r
+ sum(EyeColorFreq)

# time: 2022-05-19 19:40:18 UTC
# mode: r
+HairFreq = apply(HairEyeColor, c("Hair"), sum)

# time: 2022-05-19 19:40:33 UTC
# mode: r
+HairProp = HairFreq / sum(HairFreq)

# time: 2022-05-19 19:40:45 UTC
# mode: r
+HairFreq 

# time: 2022-05-19 19:40:47 UTC
# mode: r
+HairProp 

# time: 2022-05-19 19:41:14 UTC
# mode: r
+EyeFreq = apply(HairEyeColor, c("eye"), sum)

# time: 2022-05-19 19:41:31 UTC
# mode: r
+EyeProp = EyeFreq / sum(EyeFreq)

# time: 2022-05-19 19:41:32 UTC
# mode: r
+EyeFreq = apply(HairEyeColor, c("Eye"), sum)

# time: 2022-05-19 19:41:32 UTC
# mode: r
+EyeProp = EyeFreq / sum(EyeFreq)

# time: 2022-05-19 19:41:34 UTC
# mode: r
+EyeFreq 

# time: 2022-05-19 19:41:35 UTC
# mode: r
+EyeProp 

# time: 2022-05-19 19:42:45 UTC
# mode: r
+HairEyeColor["Blue",]

# time: 2022-05-19 19:43:01 UTC
# mode: r
+EyeColorProp["Blue",]

# time: 2022-05-19 19:43:08 UTC
# mode: r
+EyeColorProp

# time: 2022-05-19 19:43:32 UTC
# mode: r
+EyeColorProp["Blue",] / EyeProp["Blue",]

# time: 2022-05-19 19:43:35 UTC
# mode: r
+ EyeProp["Blue",]

# time: 2022-05-19 19:43:38 UTC
# mode: r
+EyeProp

# time: 2022-05-19 19:43:44 UTC
# mode: r
+EyeColorProp["Blue",] / EyeProp["Blue"]

# time: 2022-05-19 19:43:47 UTC
# mode: r
+EyeProp["Blue"]

# time: 2022-05-19 19:43:58 UTC
# mode: r
+EyeColorProp

# time: 2022-05-19 19:44:32 UTC
# mode: r
+EyeColorFreq = apply(HairEyeColor, c("Eye", "Hair"), sum)

# time: 2022-05-19 19:44:34 UTC
# mode: r
+EyeColorFreq 

# time: 2022-05-19 19:44:48 UTC
# mode: r
+EyeColorProp["Blue",] / EyeProp["Blue"]

# time: 2022-05-19 19:45:40 UTC
# mode: r
+EyeColorProp

# time: 2022-05-19 19:45:44 UTC
# mode: r
+EyeColorProp["Blue",]

# time: 2022-05-19 19:46:07 UTC
# mode: r
+EyeColorProp["Brown",] / EyeProp["Brown"]

# time: 2022-05-19 19:46:14 UTC
# mode: r
+EyeColorProp["Brown",]

# time: 2022-05-19 19:46:17 UTC
# mode: r
+ EyeProp

# time: 2022-05-19 19:46:42 UTC
# mode: r
+EyeColorFreq

# time: 2022-05-19 19:46:54 UTC
# mode: r
+EyeColorFreq[, "Brown"] / HairFreq["Brown"]

# time: 2022-05-19 19:49:02 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 19:51:15 UTC
# mode: r
+4 * 2 * 6

# time: 2022-05-19 19:51:46 UTC
# mode: r
+1/24

# time: 2022-05-19 19:52:07 UTC
# mode: r
+1/24 + 1/24

# time: 2022-05-19 19:52:55 UTC
# mode: r
+A <- 1/24

# time: 2022-05-19 19:53:08 UTC
# mode: r
+B <- 2 * A

# time: 2022-05-19 19:53:11 UTC
# mode: r
+A

# time: 2022-05-19 19:53:14 UTC
# mode: r
+B

# time: 2022-05-19 19:57:45 UTC
# mode: r
+A <- ((2*sets)/total)

# time: 2022-05-19 19:57:48 UTC
# mode: r
+values <- 6

# time: 2022-05-19 19:57:48 UTC
# mode: r
+sets <- 4

# time: 2022-05-19 19:57:50 UTC
# mode: r
+A <- ((2*sets)/total)

# time: 2022-05-19 19:57:53 UTC
# mode: r
+total <- 48

# time: 2022-05-19 19:57:53 UTC
# mode: r
+values <- 6

# time: 2022-05-19 19:57:54 UTC
# mode: r
+sets <- 4

# time: 2022-05-19 19:57:54 UTC
# mode: r
+A <- ((2*sets)/total)

# time: 2022-05-19 19:57:55 UTC
# mode: r
+A

# time: 2022-05-19 19:57:57 UTC
# mode: r
+B <- 2 * A

# time: 2022-05-19 19:57:58 UTC
# mode: r
+B

# time: 2022-05-19 19:59:02 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 19:59:59 UTC
# mode: r
+meanval = 0.0               # Specify mean of distribution.

# time: 2022-05-19 20:00:10 UTC
# mode: r
+meanval <- 0.0 # Specify mean of distribution.

# time: 2022-05-19 20:00:13 UTC
# mode: r
+sdval <- 0.2 # Specify standard deviation of distribution.

# time: 2022-05-19 20:00:16 UTC
# mode: r
+xlow <- meanval - 3.5 * sdval # Specify low end of x-axis.

# time: 2022-05-19 20:00:17 UTC
# mode: r
+xhigh <- meanval + 3.5 * sdval # Specify high end of x-axis.

# time: 2022-05-19 20:00:21 UTC
# mode: r
+dx <- sdval / 10 # Specify interval width on x-axis

# time: 2022-05-19 20:00:23 UTC
# mode: r
+dx 

# time: 2022-05-19 20:00:30 UTC
# mode: r
+x <- seq(from = xlow, to = xhigh, by = dx)

# time: 2022-05-19 20:00:31 UTC
# mode: r
+x

# time: 2022-05-19 20:00:49 UTC
# mode: r
+y <- (1 / (sdval * sqrt(2 * pi))) * exp(-.5 * ((x - meanval) / sdval)^2)

# time: 2022-05-19 20:00:50 UTC
# mode: r
+y

# time: 2022-05-19 20:01:11 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 20:01:33 UTC
# mode: r
+area <- sum(dx * y)

# time: 2022-05-19 20:01:34 UTC
# mode: r
+area 

# time: 2022-05-19 20:02:18 UTC
# mode: r
+sdval 

# time: 2022-05-19 20:02:22 UTC
# mode: r
+ meanval

# time: 2022-05-19 20:02:26 UTC
# mode: r
+x

# time: 2022-05-19 20:02:29 UTC
# mode: r
+y <- (1 / (sdval * sqrt(2 * pi))) * exp(-.5 * ((x - meanval) / sdval)^2)

# time: 2022-05-19 20:02:31 UTC
# mode: r
+y

# time: 2022-05-19 20:03:12 UTC
# mode: r
+y <- 6 * x * (1-x)

# time: 2022-05-19 20:03:13 UTC
# mode: r
+y

# time: 2022-05-19 20:03:37 UTC
# mode: r
+dx

# time: 2022-05-19 20:03:41 UTC
# mode: r
+meanval 

# time: 2022-05-19 20:03:45 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 20:04:23 UTC
# mode: r
+area <- sum(dx * y)

# time: 2022-05-19 20:04:24 UTC
# mode: r
+area 

# time: 2022-05-19 20:05:15 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 20:08:24 UTC
# mode: r
+sdval 

# time: 2022-05-19 20:08:29 UTC
# mode: r
+xlow <- 0 # Specify low end of x-axis.

# time: 2022-05-19 20:08:29 UTC
# mode: r
+xhigh <-1 # Specify high end of x-axis.

# time: 2022-05-19 20:08:38 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 20:18:09 UTC
# mode: r
+meanval <- 0.0 # Specify mean of distribution.

# time: 2022-05-19 20:18:09 UTC
# mode: r
+sdval <- 0.2 # Specify standard deviation of distribution.

# time: 2022-05-19 20:18:18 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 20:20:05 UTC
# mode: r
+meanval <- 0.0 # Specify mean of distribution.

# time: 2022-05-19 20:20:06 UTC
# mode: r
+sdval <- 0.2 # Specify standard deviation of distribution.

# time: 2022-05-19 20:20:16 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-19 20:21:08 UTC
# mode: r
+simga <- 177-162

# time: 2022-05-19 20:21:11 UTC
# mode: r
+simga 

# time: 2022-05-20 06:22:57 UTC
# mode: r
+mu <- 162

# time: 2022-05-20 06:22:57 UTC
# mode: r
+simga <- 177-162

# time: 2022-05-20 06:22:59 UTC
# mode: r
+simga 

# time: 2022-05-23 07:32:38 UTC
# mode: r
+library(fpc)

# time: 2022-05-23 07:32:39 UTC
# mode: r
+library(subspace)

# time: 2022-05-23 07:32:41 UTC
# mode: r
+THAU <- 0.95

# time: 2022-05-23 07:32:41 UTC
# mode: r
+source("modules/memoization.R")

# time: 2022-05-23 07:33:23 UTC
# mode: r
+source("modules/anomalies.R")

# time: 2022-05-23 11:49:38 UTC
# mode: r
+library(ggraph)

# time: 2022-05-23 11:50:36 UTC
# mode: r
+library("depmixS4")

# time: 2022-05-23 11:50:51 UTC
# mode: r
+data("speed")

# time: 2022-05-23 11:50:55 UTC
# mode: r
+speed

# time: 2022-05-23 11:50:58 UTC
# mode: r
+set.seed(1)

# time: 2022-05-23 11:50:58 UTC
# mode: r
+mod <- depmix(response = rt ~ 1, data = speed, nstates = 2, trstart = runif(4))

# time: 2022-05-23 11:51:00 UTC
# mode: r
+mod 

# time: 2022-05-23 11:51:14 UTC
# mode: r
+plot(mod)

# time: 2022-05-23 11:51:22 UTC
# mode: r
+attributes(mod)

# time: 2022-05-23 11:51:45 UTC
# mode: r
+f <- fit(mod)

# time: 2022-05-23 11:51:49 UTC
# mode: r
+f 

# time: 2022-05-23 11:51:54 UTC
# mode: r
+plot(f)

# time: 2022-05-23 11:52:03 UTC
# mode: r
+attributes(f)

# time: 2022-05-23 19:58:49 UTC
# mode: r
+(0.99*0.001)/(0.99*0.001+0.05*(1-0.001))

# time: 2022-05-23 20:10:49 UTC
# mode: r
+install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))

# time: 2022-05-24 11:51:08 UTC
# mode: r
+library(dplyr)

# time: 2022-05-24 11:51:09 UTC
# mode: r
+library(readr)

# time: 2022-05-24 11:51:23 UTC
# mode: r
+train <- read_csv("data/train.csv")

# time: 2022-05-24 11:51:32 UTC
# mode: r
+test <- read_csv("data/test.csv")

# time: 2022-05-24 11:51:35 UTC
# mode: r
+train 

# time: 2022-05-24 11:51:38 UTC
# mode: r
+test 

# time: 2022-05-24 11:52:34 UTC
# mode: r
+library(magrittr)

# time: 2022-05-24 11:52:47 UTC
# mode: r
+train <- train %>% mutate(SET = 'train')

# time: 2022-05-24 11:52:56 UTC
# mode: r
+test <- test %>% mutate(SET = 'test')

# time: 2022-05-24 11:52:58 UTC
# mode: r
+test 

# time: 2022-05-24 11:53:13 UTC
# mode: r
+full_data <- bind_rows(train, test)

# time: 2022-05-24 11:53:15 UTC
# mode: r
+full_data 

# time: 2022-05-24 11:53:41 UTC
# mode: r
+summary(full_data)

# time: 2022-05-24 11:55:58 UTC
# mode: r
+librtary(Hmisc)

# time: 2022-05-24 11:56:03 UTC
# mode: r
+library(Hmisc)

# time: 2022-05-24 11:56:17 UTC
# mode: r
+Hmisc::describe(full_data)

# time: 2022-05-24 19:51:43 UTC
# mode: r
+# I.

# time: 2022-05-24 19:51:50 UTC
# mode: r
+flip <- function(theta = 0.5, N = 100) {
+    prob <- c(theta, 1 - theta)
+    sample(x = c("H", "T"), size = N, prob = prob, replace = TRUE)
+}

# time: 2022-05-24 19:52:15 UTC
# mode: r
+    flips <- flip(N=n)

# time: 2022-05-24 19:52:23 UTC
# mode: r
+N=1000

# time: 2022-05-24 19:52:36 UTC
# mode: r
+flip <- function(theta = 0.5, N = 100) {
+    prob <- c(theta, 1 - theta)
+    sample(x = c("H", "T"), size = N, prob = prob, replace = TRUE)
+}

# time: 2022-05-24 19:52:41 UTC
# mode: r
+    prob <- c(theta, 1 - theta)

# time: 2022-05-24 19:52:42 UTC
# mode: r
+    sample(x = c("H", "T"), size = N, prob = prob, replace = TRUE)

# time: 2022-05-24 19:52:43 UTC
# mode: r
+flip <- function(theta = 0.5, N = 100) {
+    prob <- c(theta, 1 - theta)
+    sample(x = c("H", "T"), size = N, prob = prob, replace = TRUE)
+}

# time: 2022-05-24 19:52:44 UTC
# mode: r
+bernoulli <- function(N=1000) {
+    flips <- flip(N=N)
+
+}

# time: 2022-05-24 19:52:47 UTC
# mode: r
+    flips <- flip(N=N)

# time: 2022-05-24 19:52:50 UTC
# mode: r
+flips

# time: 2022-05-24 19:53:07 UTC
# mode: r
+flip <- function(theta = 0.5, N = 100) {
+    prob <- c(theta, 1 - theta)
+    sample(x = c("H", "T"), size = N, prob = prob, replace = TRUE)
+}

# time: 2022-05-24 19:53:09 UTC
# mode: r
+    flips <- flip(N=N)

# time: 2022-05-24 19:53:13 UTC
# mode: r
+N=1000

# time: 2022-05-24 19:53:15 UTC
# mode: r
+    flips <- flip(N=N)

# time: 2022-05-24 19:53:17 UTC
# mode: r
+flips

# time: 2022-05-24 20:04:43 UTC
# mode: r
+prior_values <- seq(0,1, by=0.1)

# time: 2022-05-24 20:04:48 UTC
# mode: r
+prior_values 

# time: 2022-05-24 20:04:59 UTC
# mode: r
+length(prior_values)

# time: 2022-05-24 20:05:42 UTC
# mode: r
+prior_theta <- c(seq(0, 0.2, length.out=6))

# time: 2022-05-24 20:05:47 UTC
# mode: r
+prior_theta 

# time: 2022-05-24 20:05:47 UTC
# mode: r
+prior_theta 

# time: 2022-05-24 20:06:00 UTC
# mode: r
+flip <- function(theta = 0.5, N = 100) {
+    prob <- c(theta, 1 - theta)
+    sample(x = c("H", "T"), size = N, prob = prob, replace = TRUE)
+}

# time: 2022-05-24 20:06:01 UTC
# mode: r
+bernoulli <- function(N=1000) {
+    flips <- flip(N=N)
+
+}

# time: 2022-05-24 20:06:01 UTC
# mode: r
+prior_values <- seq(0,1, by=0.1)

# time: 2022-05-24 20:06:02 UTC
# mode: r
+prior_theta <- c(seq(0, 0.2, length.out=6))

# time: 2022-05-24 20:06:03 UTC
# mode: r
+prior_theta 

# time: 2022-05-24 20:06:31 UTC
# mode: r
+prior_theta <- c(seq(0, 0.2, length.out=6), seq(0.16, 0, length.out=5))

# time: 2022-05-24 20:06:37 UTC
# mode: r
+prior_theta

# time: 2022-05-24 20:06:53 UTC
# mode: r
+seq(0.01, 0.2, length.out=6)

# time: 2022-05-24 20:06:58 UTC
# mode: r
+prior_theta <- c(seq(0.01, 0.2, length.out=6), seq(0.162, 0.01, length.out=5))

# time: 2022-05-24 20:07:03 UTC
# mode: r
+prior_theta

# time: 2022-05-24 20:08:02 UTC
# mode: r
+bernoulli <- function(y=1, theta=0.5) {
+    theta^(y)*(1-theta)^(1-y)
+
+}

# time: 2022-05-24 20:08:08 UTC
# mode: r
+bernoulli

# time: 2022-05-24 20:08:11 UTC
# mode: r
+bernoulli()

# time: 2022-05-24 20:08:18 UTC
# mode: r
+bernoulli(y=1, theta=1)

# time: 2022-05-24 20:08:25 UTC
# mode: r
+bernoulli(y=0, theta=1)

# time: 2022-05-24 20:09:53 UTC
# mode: r
+bernoulli <- function(y=1, N=1) {
+    theta=sum(y)/N
+    theta^(y)*(1-theta)^(1-y)
+
+}

# time: 2022-05-24 20:10:03 UTC
# mode: r
+bernoulli()

# time: 2022-05-24 20:10:22 UTC
# mode: r
+bernoulli(y=c(1,1,1,1), N=12)

# time: 2022-05-24 20:10:45 UTC
# mode: r
+    theta=sum(y)/N

# time: 2022-05-24 20:10:52 UTC
# mode: r
+y=c(1,1,1,1)

# time: 2022-05-24 20:10:54 UTC
# mode: r
+    theta=sum(y)/N

# time: 2022-05-24 20:10:56 UTC
# mode: r
+N=12

# time: 2022-05-24 20:10:58 UTC
# mode: r
+    theta=sum(y)/N

# time: 2022-05-24 20:11:00 UTC
# mode: r
+theta

# time: 2022-05-24 20:11:12 UTC
# mode: r
+    theta^(y)*(1-theta)^(1-y)

# time: 2022-05-24 20:11:18 UTC
# mode: r
+theta^(y)

# time: 2022-05-24 20:11:36 UTC
# mode: r
+flip <- function(theta = 0.5, N = 100) {
+    prob <- c(theta, 1 - theta)
+    sample(x = c("H", "T"), size = N, prob = prob, replace = TRUE)
+}

# time: 2022-05-24 20:11:37 UTC
# mode: r
+bernoulli <- function(y=1, N=1) {
+    theta=sum(y)/N
+    theta^(y)*(1-theta)^(1-y)
+
+}

# time: 2022-05-24 20:11:37 UTC
# mode: r
+prior_values <- seq(0,1, by=0.1)

# time: 2022-05-24 20:11:38 UTC
# mode: r
+prior_theta <- c(seq(0.01, 0.2, length.out=6), seq(0.162, 0.01, length.out=5))

# time: 2022-05-24 20:11:39 UTC
# mode: r
+    theta=sum(y)/N

# time: 2022-05-24 20:11:43 UTC
# mode: r
+y=1

# time: 2022-05-24 20:11:44 UTC
# mode: r
+N=1

# time: 2022-05-24 20:11:45 UTC
# mode: r
+    theta=sum(y)/N

# time: 2022-05-24 20:11:46 UTC
# mode: r
+    theta^(y)*(1-theta)^(1-y)

# time: 2022-05-24 20:11:48 UTC
# mode: r
+    theta

# time: 2022-05-24 20:11:52 UTC
# mode: r
+theta^(y)*(1-theta)^(1-y)

# time: 2022-05-24 20:12:14 UTC
# mode: r
+bernoulli <- function(y=1, N=1) {
+    y=sum(y)
+    theta=y/N
+    theta^(y)*(1-theta)^(1-y)
+
+}

# time: 2022-05-24 20:12:25 UTC
# mode: r
+bernoulli(y=c(1,1,1,1), N=12)

# time: 2022-05-25 07:38:49 UTC
# mode: r
+prior_values <- seq(0, 1, by = 0.1)

# time: 2022-05-25 07:38:49 UTC
# mode: r
+prior_theta <- c(seq(0.01, 0.2, length.out = 6), seq(0.162, 0.01, length.out = 5))

# time: 2022-05-25 07:38:50 UTC
# mode: r
+prior_values 

# time: 2022-05-25 07:38:55 UTC
# mode: r
+prior_theta 

# time: 2022-05-25 07:39:14 UTC
# mode: r
+plot(prior_values, prior_theta)

# time: 2022-05-25 07:40:01 UTC
# mode: r
+y = 1

# time: 2022-05-25 07:40:03 UTC
# mode: r
+N = 1

# time: 2022-05-25 07:40:04 UTC
# mode: r
+    y <- sum(y)

# time: 2022-05-25 07:40:04 UTC
# mode: r
+    theta <- y / N

# time: 2022-05-25 07:40:06 UTC
# mode: r
+theta 

# time: 2022-05-25 07:40:07 UTC
# mode: r
+    theta^(y) * (1 - theta)^(1 - y)

# time: 2022-05-25 07:40:18 UTC
# mode: r
+(1 - theta)^(1 - y)

# time: 2022-05-25 07:40:23 UTC
# mode: r
+theta^(y)

# time: 2022-05-25 07:40:25 UTC
# mode: r
+y

# time: 2022-05-25 07:40:28 UTC
# mode: r
+theta 

# time: 2022-05-25 07:40:32 UTC
# mode: r
+1 - theta

# time: 2022-05-25 07:40:36 UTC
# mode: r
+1 - y

# time: 2022-05-25 07:40:40 UTC
# mode: r
+(1 - theta)^(1 - y)

# time: 2022-05-25 07:40:50 UTC
# mode: r
+(1 - theta)

# time: 2022-05-25 07:41:29 UTC
# mode: r
+prior_values 

# time: 2022-05-25 07:41:47 UTC
# mode: r
+likelihood <- prior_values

# time: 2022-05-25 07:41:49 UTC
# mode: r
+likelihood 

# time: 2022-05-25 07:43:56 UTC
# mode: r
+bayes_rule <- function(likelihood, pior, D) {
+        (likelihood * prior) / D
+
+}

# time: 2022-05-25 07:44:15 UTC
# mode: r
+D <- sum(prior_theta * likelihood)

# time: 2022-05-25 07:44:17 UTC
# mode: r
+D

# time: 2022-05-25 07:44:42 UTC
# mode: r
+bayes_rule(likelihood, prior_values, D)

# time: 2022-05-25 07:44:58 UTC
# mode: r
+bayes_rule <- function(likelihood, prior, D) {
+        (likelihood * prior) / D
+}

# time: 2022-05-25 07:44:58 UTC
# mode: r
+bayes_rule(likelihood, prior_theta, D)

# time: 2022-05-25 07:44:59 UTC
# mode: r
+bayes_rule <- function(likelihood, prior, D) {
+        (likelihood * prior) / D
+}

# time: 2022-05-25 07:45:00 UTC
# mode: r
+D <- sum(prior_theta * likelihood)

# time: 2022-05-25 07:45:00 UTC
# mode: r
+bayes_rule(likelihood, prior_theta, D)

# time: 2022-05-25 07:45:10 UTC
# mode: r
+posterior  <- bayes_rule(likelihood, prior_theta, D)

# time: 2022-05-25 07:45:18 UTC
# mode: r
+plot(prior_values, posterior)

# time: 2022-05-25 07:45:38 UTC
# mode: r
+prior_theta * likelihood

# time: 2022-05-25 08:00:05 UTC
# mode: r
+flip <- function(theta = 0.5, N = 100) {
+    prob <- c(theta, 1 - theta)
+    sample(x = c("H", "T"), size = N, prob = prob, replace = TRUE)
+}

# time: 2022-05-25 08:00:20 UTC
# mode: r
+flip(theta=0.25, N=200)

# time: 2022-05-25 08:00:34 UTC
# mode: r
+prior_values <- seq(0, 1, by = 0.1)

# time: 2022-05-25 08:00:35 UTC
# mode: r
+prior_theta <- c(seq(0.01, 0.2, length.out = 6), seq(0.162, 0.01, length.out = 5))

# time: 2022-05-25 08:01:26 UTC
# mode: r
+f <- flip(theta=0.25, N=200)

# time: 2022-05-25 08:01:34 UTC
# mode: r
+sum(f=='T')/length(f)

# time: 2022-05-25 08:01:41 UTC
# mode: r
+sum(f=='H')/length(f)

# time: 2022-05-25 08:05:52 UTC
# mode: r
+likelihood_f <- function(theta, z, N) {
+    (theta^(z)) * ((1-theta)^(N-z))
+    
+}

# time: 2022-05-25 08:06:08 UTC
# mode: r
+likelihood_f(0.2, z=10, N=40)

# time: 2022-05-25 08:06:15 UTC
# mode: r
+likelihood_f(0.7, z=10, N=40)

# time: 2022-05-25 08:07:02 UTC
# mode: r
+likelihood_f(prior_values, z=1, N=4)

# time: 2022-05-25 08:07:17 UTC
# mode: r
+plot(likelihood_f(prior_values, z=1, N=4))

# time: 2022-05-25 08:07:36 UTC
# mode: r
+plot(likelihood_f(prior_values, z=10, N=40))

# time: 2022-05-25 08:07:58 UTC
# mode: r
+likelihood <- likelihood_f(prior_values, z=10, N=40)

# time: 2022-05-25 08:08:06 UTC
# mode: r
+posterior  <- bayes_rule(likelihood, prior_theta, D)

# time: 2022-05-25 08:08:08 UTC
# mode: r
+posterior  

# time: 2022-05-25 08:08:15 UTC
# mode: r
+plot(posterior)

# time: 2022-05-25 08:08:37 UTC
# mode: r
+plot(prior_values, posterior)

# time: 2022-05-25 08:09:36 UTC
# mode: r
+likelihood <- likelihood_f(seq(0,1, length.out=1000), z=10, N=40)

# time: 2022-05-25 08:09:40 UTC
# mode: r
+plot(prior_values, posterior)

# time: 2022-05-25 08:09:44 UTC
# mode: r
+posterior  <- bayes_rule(likelihood, prior_theta, D)

# time: 2022-05-25 08:10:13 UTC
# mode: r
+likelihood <- likelihood_f(seq(0,1, length.out=1000), z=10, N=40)

# time: 2022-05-25 08:10:33 UTC
# mode: r
+prior_theta <- seq(0,1,length.out=1000)

# time: 2022-05-25 08:10:42 UTC
# mode: r
+likelihood <- likelihood_f(prior_theta, z=10, N=40)

# time: 2022-05-25 08:10:44 UTC
# mode: r
+D <- sum(prior_theta * likelihood)

# time: 2022-05-25 08:10:52 UTC
# mode: r
+posterior  <- bayes_rule(likelihood, prior_theta, D)

# time: 2022-05-25 08:10:53 UTC
# mode: r
+plot(prior_values, posterior)

# time: 2022-05-25 08:10:55 UTC
# mode: r
+posterior  <- bayes_rule(likelihood, prior_theta, D)

# time: 2022-05-25 08:10:56 UTC
# mode: r
+likelihood

# time: 2022-05-25 08:10:58 UTC
# mode: r
+ prior_theta

# time: 2022-05-25 08:11:00 UTC
# mode: r
+D

# time: 2022-05-25 08:11:10 UTC
# mode: r
+plot(prior_theta, posterior)

# time: 2022-05-25 08:14:50 UTC
# mode: r
+        (likelihood * prior) / sum(prior*likelihood)

# time: 2022-05-25 08:14:50 UTC
# mode: r
+bayes_rule <- function(likelihood, prior) {
+        (likelihood * prior) / sum(prior*likelihood)
+}

# time: 2022-05-25 08:14:52 UTC
# mode: r
+f <- flip(theta=0.25, N=200)

# time: 2022-05-25 08:14:55 UTC
# mode: r
+likelihood_f <- function(theta, z, N) {
+    (theta^(z)) * ((1-theta)^(N-z))
+    
+}

# time: 2022-05-25 08:14:56 UTC
# mode: r
+prior_theta <- seq(0,1,length.out=1000)

# time: 2022-05-25 08:14:56 UTC
# mode: r
+likelihood <- likelihood_f(prior_theta, z=10, N=40)

# time: 2022-05-25 08:14:56 UTC
# mode: r
+D <- sum(prior_theta * likelihood)

# time: 2022-05-25 08:14:57 UTC
# mode: r
+posterior  <- bayes_rule(likelihood, prior_theta)

# time: 2022-05-25 08:14:57 UTC
# mode: r
+plot(prior_theta, posterior)

# time: 2022-05-25 19:30:28 UTC
# mode: r
+BernGrid <- function(Theta, pTheta, Data, plotType = c("Points", "Bars")[2],
+                     showCentTend = c("Mean", "Mode", "None")[3],
+                     showHDI = c(TRUE, FALSE)[2], HDImass = 0.95,
+                     showpD = c(TRUE, FALSE)[2],
+                     nToPlot = min(2001, length(Theta))) {
+    # Theta is vector of values between 0 and 1.
+    # pTheta is prior probability mass at each value of Theta
+    # Data is vector of 0's and 1's.
+
+    # Check for input errors:
+    if (any(Theta > 1 | Theta < 0)) {
+        stop("Theta values must be between 0 and 1")
+    }
+    if (any(pTheta < 0)) {
+        stop("pTheta values must be non-negative")
+    }
+    if (!isTRUE(all.equal(sum(pTheta), 1.0))) {
+        stop("pTheta values must sum to 1.0")
+    }
+    if (!all(Data == 1 | Data == 0)) {
+        stop("Data values must be 0 or 1")
+    }
+
+    # Create summary values of Data
+    z <- sum(Data) # number of 1's in Data
+    N <- length(Data)
+
+    # Compute the Bernoulli likelihood at each value of Theta:
+    pDataGivenTheta <- Theta^z * (1 - Theta)^(N - z)
+    # Compute the evidence and the posterior via Bayes' rule:
+    pData <- sum(pDataGivenTheta * pTheta)
+    pThetaGivenData <- pDataGivenTheta * pTheta / pData
+
+    # Plot the results.
+    layout(matrix(c(1, 2, 3), nrow = 3, ncol = 1, byrow = FALSE)) # 3x1 panels
+    par(mar = c(3, 3, 1, 0), mgp = c(2, 0.7, 0), mai = c(0.5, 0.5, 0.3, 0.1)) # margins
+    cexAxis <- 1.33
+    cexLab <- 1.75
+    # convert plotType to notation used by plot:
+    if (plotType == "Points") {
+        plotType <- "p"
+    }
+    if (plotType == "Bars") {
+        plotType <- "h"
+    }
+    dotsize <- 5 # how big to make the plotted dots
+    barsize <- 5 # how wide to make the bar lines
+    # If the comb has a zillion teeth, it's too many to plot, so plot only a
+    # thinned out subset of the teeth.
+    nteeth <- length(Theta)
+    if (nteeth > nToPlot) {
+        thinIdx <- round(seq(1, nteeth, length = nToPlot))
+    } else {
+        thinIdx <- 1:nteeth
+    }
+
+    # Plot the prior.
+    yLim <- c(0, 1.1 * max(c(pTheta, pThetaGivenData)))
+    plot(Theta[thinIdx], pTheta[thinIdx],
+        type = plotType,
+        pch = ".", cex = dotsize, lwd = barsize,
+        xlim = c(0, 1), ylim = yLim, cex.axis = cexAxis,
+        xlab = bquote(theta), ylab = bquote(p(theta)), cex.lab = cexLab,
+        main = "Prior", cex.main = 1.5, col = "skyblue"
+    )
+    if (showCentTend != "None") {
+        if (showCentTend == "Mean") {
+            meanTheta <- sum(Theta * pTheta)
+            if (meanTheta > .5) {
+                textx <- 0
+                textadj <- c(0, 1)
+            } else {
+                textx <- 1
+                textadj <- c(1, 1)
+            }
+            text(textx, yLim[2],
+                bquote("mean=" * .(signif(meanTheta, 3))),
+                cex = 2.0, adj = textadj
+            )
+        }
+        if (showCentTend == "Mode") {
+            modeTheta <- Theta[which.max(pTheta)]
+            if (modeTheta > .5) {
+                textx <- 0
+                textadj <- c(0, 1)
+            } else {
+                textx <- 1
+                textadj <- c(1, 1)
+            }
+            text(textx, yLim[2],
+                bquote("mode=" * .(signif(modeTheta, 3))),
+                cex = 2.0, adj = textadj
+            )
+        }
+    }
+
+    # Mark the highest density interval. HDI points are not thinned in the plot.
+    if (showHDI) {
+        HDIinfo <- HDIofGrid(pTheta, credMass = HDImass)
+        points(Theta[HDIinfo$indices],
+            rep(HDIinfo$height, length(HDIinfo$indices)),
+            pch = "-", cex = 1.0
+        )
+        text(mean(Theta[HDIinfo$indices]), HDIinfo$height,
+            bquote(.(100 * signif(HDIinfo$mass, 3)) * "% HDI"),
+            adj = c(0.5, -1.5), cex = 1.5
+        )
+        # Mark the left and right ends of the waterline.
+        # Find indices at ends of sub-intervals:
+        inLim <- HDIinfo$indices[1] # first point
+        for (idx in 2:(length(HDIinfo$indices) - 1)) {
+            if ((HDIinfo$indices[idx] != HDIinfo$indices[idx - 1] + 1) | # jumps on left, OR
+                (HDIinfo$indices[idx] != HDIinfo$indices[idx + 1] - 1)) { # jumps on right
+                inLim <- c(inLim, HDIinfo$indices[idx]) # include idx
+            }
+        }
+        inLim <- c(inLim, HDIinfo$indices[length(HDIinfo$indices)]) # last point
+        # Mark vertical lines at ends of sub-intervals:
+        for (idx in inLim) {
+            lines(c(Theta[idx], Theta[idx]), c(-0.5, HDIinfo$height),
+                type = "l", lty = 2,
+                lwd = 1.5
+            )
+            text(Theta[idx], HDIinfo$height, bquote(.(round(Theta[idx], 3))),
+                adj = c(0.5, -0.1), cex = 1.2
+            )
+        }
+    }
+
+    # Plot the likelihood: p(Data|Theta)
+    plot(Theta[thinIdx], pDataGivenTheta[thinIdx],
+        type = plotType,
+        pch = ".", cex = dotsize, lwd = barsize,
+        xlim = c(0, 1), ylim = c(0, 1.1 * max(pDataGivenTheta)), cex.axis = cexAxis,
+        xlab = bquote(theta), ylab = bquote("p(D|" * theta * ")"), cex.lab = cexLab,
+        main = "Likelihood", cex.main = 1.5, col = "skyblue"
+    )
+    if (z > .5 * N) {
+        textx <- 0
+        textadj <- c(0, 1)
+    } else {
+        textx <- 1
+        textadj <- c(1, 1)
+    }
+    text(textx, 1.0 * max(pDataGivenTheta),
+        cex = 2.0,
+        bquote("Data: z=" * .(z) * ",N=" * .(N)), adj = textadj
+    )
+    if (showCentTend != "None") {
+        if (showCentTend == "Mean") {
+            meanTheta <- sum(Theta * pDataGivenTheta)
+            if (meanTheta > .5) {
+                textx <- 0
+                textadj <- c(0, 1)
+            } else {
+                textx <- 1
+                textadj <- c(1, 1)
+            }
+            text(textx, 0.7 * max(pDataGivenTheta),
+                bquote("mean=" * .(signif(meanTheta, 3))),
+                cex = 2.0, adj = textadj
+            )
+        }
+        if (showCentTend == "Mode") {
+            modeTheta <- Theta[which.max(pDataGivenTheta)]
+            if (modeTheta > .5) {
+                textx <- 0
+                textadj <- c(0, 1)
+            } else {
+                textx <- 1
+                textadj <- c(1, 1)
+            }
+            text(textx, 0.7 * max(pDataGivenTheta),
+                bquote("mode=" * .(signif(modeTheta, 3))),
+                cex = 2.0, adj = textadj
+            )
+        }
+    }
+
+    # Plot the posterior.
+    yLim <- c(0, 1.1 * max(c(pTheta, pThetaGivenData)))
+    plot(Theta[thinIdx], pThetaGivenData[thinIdx],
+        type = plotType,
+        pch = ".", cex = dotsize, lwd = barsize,
+        xlim = c(0, 1), ylim = yLim, cex.axis = cexAxis,
+        xlab = bquote(theta), ylab = bquote("p(" * theta * "|D)"), cex.lab = cexLab,
+        main = "Posterior", cex.main = 1.5, col = "skyblue"
+    )
+    if (showCentTend != "None") {
+        if (showCentTend == "Mean") {
+            meanTheta <- sum(Theta * pThetaGivenData)
+            if (meanTheta > .5) {
+                textx <- 0
+                textadj <- c(0, 1)
+            } else {
+                textx <- 1
+                textadj <- c(1, 1)
+            }
+            text(textx, yLim[2],
+                bquote("mean=" * .(signif(meanTheta, 3))),
+                cex = 2.0, adj = textadj
+            )
+        }
+        if (showCentTend == "Mode") {
+            modeTheta <- Theta[which.max(pThetaGivenData)]
+            if (modeTheta > .5) {
+                textx <- 0
+                textadj <- c(0, 1)
+            } else {
+                textx <- 1
+                textadj <- c(1, 1)
+            }
+            text(textx, yLim[2],
+                bquote("mode=" * .(signif(modeTheta, 3))),
+                cex = 2.0, adj = textadj
+            )
+        }
+    }
+
+
+    # Plot marginal likelihood pData:
+    if (showpD) {
+        meanTheta <- sum(Theta * pThetaGivenData)
+        if (meanTheta > .5) {
+            textx <- 0
+            textadj <- c(0, 1)
+        } else {
+            textx <- 1
+            textadj <- c(1, 1)
+        }
+        text(textx, 0.75 * max(pThetaGivenData),
+            cex = 2.0,
+            bquote("p(D)=" * .(signif(pData, 3))), adj = textadj
+        )
+    }
+
+    # Mark the highest density interval. HDI points are not thinned in the plot.
+    if (showHDI) {
+        HDIinfo <- HDIofGrid(pThetaGivenData, credMass = HDImass)
+        points(Theta[HDIinfo$indices],
+            rep(HDIinfo$height, length(HDIinfo$indices)),
+            pch = "-", cex = 1.0
+        )
+        text(mean(Theta[HDIinfo$indices]), HDIinfo$height,
+            bquote(.(100 * signif(HDIinfo$mass, 3)) * "% HDI"),
+            adj = c(0.5, -1.5), cex = 1.5
+        )
+        # Mark the left and right ends of the waterline.
+        # Find indices at ends of sub-intervals:
+        inLim <- HDIinfo$indices[1] # first point
+        for (idx in 2:(length(HDIinfo$indices) - 1)) {
+            if ((HDIinfo$indices[idx] != HDIinfo$indices[idx - 1] + 1) | # jumps on left, OR
+                (HDIinfo$indices[idx] != HDIinfo$indices[idx + 1] - 1)) { # jumps on right
+                inLim <- c(inLim, HDIinfo$indices[idx]) # include idx
+            }
+        }
+        inLim <- c(inLim, HDIinfo$indices[length(HDIinfo$indices)]) # last point
+        # Mark vertical lines at ends of sub-intervals:
+        for (idx in inLim) {
+            lines(c(Theta[idx], Theta[idx]), c(-0.5, HDIinfo$height),
+                type = "l", lty = 2,
+                lwd = 1.5
+            )
+            text(Theta[idx], HDIinfo$height, bquote(.(round(Theta[idx], 3))),
+                adj = c(0.5, -0.1), cex = 1.2
+            )
+        }
+    }
+
+    return(pThetaGivenData)
+} # end of function

# time: 2022-05-25 19:32:32 UTC
# mode: r
+source("src/BernGrid.R")

# time: 2022-05-25 19:32:33 UTC
# mode: r
+source("src/DBDA2E-utilities.R")

# time: 2022-05-25 19:32:51 UTC
# mode: r
+install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))

# time: 2022-05-25 19:33:11 UTC
# mode: r
+install.packages("rjags")

# time: 2022-05-25 19:33:53 UTC
# mode: r
+install.packages("rjags", configure.args="--enable-rpath")

# time: 2022-05-25 19:36:55 UTC
# mode: r
+install.packages("rjags")

# time: 2022-05-25 19:43:05 UTC
# mode: r
+install.packages("rjags", configure.args="--enable-rpath")

# time: 2022-05-25 19:43:16 UTC
# mode: r
+source("src/DBDA2E-utilities.R")

# time: 2022-05-25 19:43:36 UTC
# mode: r
+source("src/BernGrid.R")

# time: 2022-05-25 19:44:49 UTC
# mode: r
+?pmin

# time: 2022-05-25 19:45:18 UTC
# mode: r
+Theta = seq(0, 1, length.out=1001)

# time: 2022-05-25 19:45:18 UTC
# mode: r
+pTheta = pmin(Theta, 1-Theta)

# time: 2022-05-25 19:45:25 UTC
# mode: r
+pTheta

# time: 2022-05-25 19:45:43 UTC
# mode: r
+Theta = seq(0, 1, length.out=1001)

# time: 2022-05-25 19:45:44 UTC
# mode: r
+pTheta = pmin(Theta, 1-Theta)

# time: 2022-05-25 19:45:52 UTC
# mode: r
+plot(Theta, pTheta)

# time: 2022-05-25 19:46:21 UTC
# mode: r
+     pmin(5:1, pi) #->  5  numbers

# time: 2022-05-25 19:46:59 UTC
# mode: r
+pTheta = pTheta/sum(pTheta)

# time: 2022-05-25 19:47:24 UTC
# mode: r
+Data = c(rep(0,3), rep(1,1))

# time: 2022-05-25 19:47:26 UTC
# mode: r
+Data

# time: 2022-05-25 19:48:50 UTC
# mode: r
+posterior = BernGrid(Theta, pTheta, Data, plotType='bars', showCentTend='Mode', showHDI=TRUE, showpD=FALSE)

# time: 2022-05-25 19:49:13 UTC
# mode: r
+posterior = BernGrid(Theta, pTheta, Data, plotType='Bars', showCentTend='Mode', showHDI=TRUE, showpD=FALSE)

# time: 2022-05-25 19:50:00 UTC
# mode: r
+    z <- sum(Data) # number of 1's in Data

# time: 2022-05-25 19:50:00 UTC
# mode: r
+    N <- length(Data)

# time: 2022-05-25 19:50:01 UTC
# mode: r
+    pDataGivenTheta <- Theta^z * (1 - Theta)^(N - z)

# time: 2022-05-25 19:50:02 UTC
# mode: r
+    # Compute the evidence and the posterior via Bayes' rule:

# time: 2022-05-25 19:50:02 UTC
# mode: r
+    pData <- sum(pDataGivenTheta * pTheta)

# time: 2022-05-25 19:50:03 UTC
# mode: r
+    pThetaGivenData <- pDataGivenTheta * pTheta / pData

# time: 2022-05-25 19:50:04 UTC
# mode: r
+    layout(matrix(c(1, 2, 3), nrow = 3, ncol = 1, byrow = FALSE)) # 3x1 panels

# time: 2022-05-25 19:52:01 UTC
# mode: r
+?pmin

# time: 2022-05-25 20:04:42 UTC
# mode: r
+((1-0.99) * 0.019) / ((1-0.99)*0.01 + (1-0.05)*(1-0.001))

# time: 2022-05-25 20:04:58 UTC
# mode: r
+((1-0.99) * 0.019) / ((1-0.99)*0.001 + (1-0.05)*(1-0.001))

# time: 2022-05-25 20:05:22 UTC
# mode: r
+((1-0.99) * 0.019) / ((1-0.99)*0.019 + (1-0.05)*(1-0.019))

# time: 2022-05-25 20:10:12 UTC
# mode: r
+post+D <- function(pD, p+D, p+nD) {
+    (pD * p+D) / (p+D * pD + (p+nD)*(1-pD))
+}

# time: 2022-05-25 20:10:48 UTC
# mode: r
+post+D <- function(pD, pozD, poznoD) {
+    (pD * pozD) / (pozD * pD + (poznoD)*(1-pD))
+}

# time: 2022-05-25 20:10:58 UTC
# mode: r
+postpozD <- function(pD, pozD, poznoD) {
+    (pD * pozD) / (pozD * pD + (poznoD)*(1-pD))
+}

# time: 2022-05-25 20:11:33 UTC
# mode: r
+postpozD(0.001, 0.99, 0.05)

# time: 2022-05-25 20:11:39 UTC
# mode: r
+prior <- postpozD(0.001, 0.99, 0.05)

# time: 2022-05-25 20:11:42 UTC
# mode: r
+prior 

# time: 2022-05-25 20:13:07 UTC
# mode: r
+pDisease <- postpozD(0.001, 0.99, 0.05)

# time: 2022-05-25 20:13:08 UTC
# mode: r
+pPositiveGivenDisease <- 0.99

# time: 2022-05-25 20:13:08 UTC
# mode: r
+pPositiveGivenNoDisease <- 0.05

# time: 2022-05-25 20:13:08 UTC
# mode: r
+pDiseaseGivenNegative <- ((1.0 - pPositiveGivenDisease) * pDisease / ((1.0 - pPositiveGivenDisease) * pDisease + (1.0 - pPositiveGivenNoDisease) * (1.0 - pDisease)))

# time: 2022-05-25 20:13:11 UTC
# mode: r
+pDiseaseGivenNegative 

# time: 2022-05-26 19:18:03 UTC
# mode: r
+prev = 0.001

# time: 2022-05-26 19:18:03 UTC
# mode: r
+hit_rate = 0.99

# time: 2022-05-26 19:18:05 UTC
# mode: r
+false_alarm = 0.05

# time: 2022-05-26 19:18:05 UTC
# mode: r
+P <- 100000

# time: 2022-05-26 19:18:13 UTC
# mode: r
+N <- 100000

# time: 2022-05-26 19:18:15 UTC
# mode: r
+(1 - prev) * N

# time: 2022-05-26 19:19:00 UTC
# mode: r
+prev*hit_rate*N

# time: 2022-05-26 19:20:25 UTC
# mode: r
+false_alarm * (1- prev) * N

# time: 2022-05-26 19:21:24 UTC
# mode: r
+(1-hit_rate)

# time: 2022-05-26 19:21:39 UTC
# mode: r
+(1-hit_rate) * prev * N

# time: 2022-05-26 19:22:27 UTC
# mode: r
+(1-false_rate) * (1-prev) * N

# time: 2022-05-26 19:22:33 UTC
# mode: r
+(1-false_alarm) * (1-prev) * N

# time: 2022-05-26 19:22:57 UTC
# mode: r
+99 + 4995

# time: 2022-05-26 19:26:55 UTC
# mode: r
+99/100000

# time: 2022-05-26 19:27:34 UTC
# mode: r
+99/5094

# time: 2022-05-26 19:33:07 UTC
# mode: r
+10.000 * 099

# time: 2022-05-26 19:33:10 UTC
# mode: r
+10.000 * 0.99

# time: 2022-05-26 19:33:30 UTC
# mode: r
+10.000 * 0.99 * 100

# time: 2022-05-26 19:33:47 UTC
# mode: r
+10.0 * .99

# time: 2022-05-26 19:33:56 UTC
# mode: r
+10.000/100 * 99

# time: 2022-05-26 19:34:06 UTC
# mode: r
+10.000/100

# time: 2022-05-26 19:34:14 UTC
# mode: r
+10000 * 0.99

# time: 2022-05-26 19:34:33 UTC
# mode: r
+10000 * (1- 0.99)

# time: 2022-05-26 19:34:51 UTC
# mode: r
+9990000 * 0.05

# time: 2022-05-26 19:35:24 UTC
# mode: r
+9990000 * (1-0.05)

# time: 2022-05-26 19:37:12 UTC
# mode: r
+9900*(1-.99)

# time: 2022-05-26 19:37:36 UTC
# mode: r
+499500*(.99)

# time: 2022-05-26 19:38:10 UTC
# mode: r
+499500*(1-0.05)

# time: 2022-05-26 19:55:17 UTC
# mode: r
+((1-0.99) * 0.001) / ((1-0.99)*0.001 + (1-0.05)*(1-0.001))

# time: 2022-05-26 19:56:26 UTC
# mode: r
+pDisease = ((1-0.99) * 0.001) / ((1-0.99)*0.001 + (1-0.05)*(1-0.001))

# time: 2022-05-26 19:56:32 UTC
# mode: r
+pDisease

# time: 2022-05-26 19:58:15 UTC
# mode: r
+(0.99 * pD)

# time: 2022-05-26 19:58:51 UTC
# mode: r
+(0.99 * pDisease) / (0.99 * pDisease + (1-0.99)*(1-pDisease))

# time: 2022-05-26 19:59:58 UTC
# mode: r
+(0.99 * pDisease) / (0.99 * pDisease + 0.05*(1-pDisease))

# time: 2022-05-26 20:00:15 UTC
# mode: r
+100 * ((0.99 * pDisease) / (0.99 * pDisease + 0.05*(1-pDisease)))

# time: 2022-05-26 20:01:48 UTC
# mode: r
+source("DBDA2E-utilities.R")

# time: 2022-05-26 20:01:50 UTC
# mode: r
+source("BernGrid.R")

# time: 2022-05-26 20:02:00 UTC
# mode: r
+setwd('./src/')

# time: 2022-05-26 20:02:06 UTC
# mode: r
+source("DBDA2E-utilities.R")

# time: 2022-05-26 20:02:07 UTC
# mode: r
+source("BernGrid.R")

# time: 2022-05-26 20:02:09 UTC
# mode: r
+Theta = seq( 0 , 1 , length=5 )  # Sparse teeth for Theta.

# time: 2022-05-26 20:02:22 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "Mode", showHDI = TRUE, showpD = FALSE
+)

# time: 2022-05-26 20:02:26 UTC
# mode: r
+Theta <- seq(0, 1, length = 1001) # Fine teeth for Theta.

# time: 2022-05-26 20:02:59 UTC
# mode: r
+setwd("./src/")

# time: 2022-05-26 20:02:59 UTC
# mode: r
+source("DBDA2E-utilities.R")

# time: 2022-05-26 20:03:00 UTC
# mode: r
+source("BernGrid.R")

# time: 2022-05-26 20:03:01 UTC
# mode: r
+Theta <- seq(0, 1, length = 5) # Sparse teeth for Theta.

# time: 2022-05-26 20:03:02 UTC
# mode: r
+pTheta <- pmin(Theta, 1 - Theta) # Triangular shape for pTheta.

# time: 2022-05-26 20:03:02 UTC
# mode: r
+pTheta <- pTheta / sum(pTheta) # Make pTheta sum to 1.0

# time: 2022-05-26 20:03:02 UTC
# mode: r
+Data <- c(rep(0, 0), rep(1, 1)) # Single flip with 1 head

# time: 2022-05-26 20:03:04 UTC
# mode: r
+Theta 

# time: 2022-05-26 20:03:08 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:03:22 UTC
# mode: r
+pTheta <- pmin(Theta, 1 - Theta) # Triangular shape for pTheta.

# time: 2022-05-26 20:03:22 UTC
# mode: r
+pTheta <- pTheta / sum(pTheta) # Make pTheta sum to 1.0

# time: 2022-05-26 20:03:23 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:03:25 UTC
# mode: r
+pTheta <- pmin(Theta, 1 - Theta) # Triangular shape for pTheta.

# time: 2022-05-26 20:03:26 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:03:30 UTC
# mode: r
+sum(pTheta)

# time: 2022-05-26 20:03:33 UTC
# mode: r
+Data <- c(rep(0, 0), rep(1, 1)) # Single flip with 1 head

# time: 2022-05-26 20:03:35 UTC
# mode: r
+Data 

# time: 2022-05-26 20:03:38 UTC
# mode: r
+Data <- c(rep(0, 0), rep(1, 1)) # Single flip with 1 head

# time: 2022-05-26 20:03:41 UTC
# mode: r
+Data 

# time: 2022-05-26 20:03:46 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "None", showHDI = FALSE, showpD = FALSE
+)

# time: 2022-05-26 20:04:08 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-26 20:04:11 UTC
# mode: r
+Theta 

# time: 2022-05-26 20:04:13 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:04:14 UTC
# mode: r
+pTheta <- pmin(Theta, 1 - Theta) # Triangular shape for pTheta.

# time: 2022-05-26 20:04:15 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:04:18 UTC
# mode: r
+pTheta <- pTheta / sum(pTheta) # Make pTheta sum to 1.0

# time: 2022-05-26 20:04:19 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:04:21 UTC
# mode: r
+Data <- c(rep(0, 0), rep(1, 1)) # Single flip with 1 head

# time: 2022-05-26 20:04:24 UTC
# mode: r
+Data 

# time: 2022-05-26 20:04:25 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "None", showHDI = FALSE, showpD = FALSE
+)

# time: 2022-05-26 20:04:35 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-26 20:04:37 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "None", showHDI = FALSE, showpD = FALSE
+)

# time: 2022-05-26 20:05:28 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-26 20:05:30 UTC
# mode: r
+Data 

# time: 2022-05-26 20:05:34 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:05:37 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "None", showHDI = FALSE, showpD = FALSE
+)

# time: 2022-05-26 20:06:04 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-26 20:06:06 UTC
# mode: r
+Data 

# time: 2022-05-26 20:06:08 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "Mode", showHDI = TRUE, showpD = FALSE
+)

# time: 2022-05-26 20:06:28 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-26 20:06:30 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "Mode", showHDI = TRUE, showpD = FALSE
+)

# time: 2022-05-26 20:06:53 UTC
# mode: r
+pTheta <- pmin(Theta, 1 - Theta) # Triangular shape for pTheta.

# time: 2022-05-26 20:06:54 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:06:56 UTC
# mode: r
+pTheta <- pTheta / sum(pTheta) # Make pTheta sum to 1.0

# time: 2022-05-26 20:06:58 UTC
# mode: r
+pTheta <- pTheta^10 # Sharpen pTheta !

# time: 2022-05-26 20:06:59 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:07:05 UTC
# mode: r
+pTheta <- pTheta / sum(pTheta) # Make pTheta sum to 1.0

# time: 2022-05-26 20:07:06 UTC
# mode: r
+pTheta 

# time: 2022-05-26 20:07:07 UTC
# mode: r
+Data <- c(rep(0, 3), rep(1, 1)) # 25% heads, N=4

# time: 2022-05-26 20:07:09 UTC
# mode: r
+Data 

# time: 2022-05-26 20:07:11 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "Mode", showHDI = TRUE, showpD = FALSE
+)

# time: 2022-05-26 20:07:30 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-26 20:07:34 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "Mode", showHDI = TRUE, showpD = FALSE
+)

# time: 2022-05-26 20:07:47 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-26 20:07:50 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "Mode", showHDI = TRUE, showpD = FALSE
+)

# time: 2022-05-26 20:08:02 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-26 20:08:05 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "Mode", showHDI = TRUE, showpD = FALSE
+)

# time: 2022-05-26 20:08:26 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-26 20:08:27 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data,
+    plotType = "Bars",
+    showCentTend = "None", showHDI = FALSE, showpD = FALSE
+)

# time: 2022-05-27 08:43:54 UTC
# mode: r
+install.packages("mallet")

# time: 2022-05-27 08:44:07 UTC
# mode: r
+library(mallet)

# time: 2022-05-27 08:47:53 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-27 08:47:56 UTC
# mode: r
+reddit_data 

# time: 2022-05-27 08:47:59 UTC
# mode: r
+to_investigate_title <- unique(reddit_data$title)[c(5, 10, 20, 32, 43, 45, 47, 48, 62, 67, 69, 78, 90, 138)]

# time: 2022-05-27 08:47:59 UTC
# mode: r
+for (t in to_investigate_title) {
+    sub <- reddit_data %>% filter(title == t)
+    print(paste0(sub$text, collapse = " "))
+    print(t)
+    id <- seq(1, length(unique(reddit_data$title)))[unique(reddit_data$title) == t]
+    print(id)
+    readline(prompt = "Press any key to continue")
+}

# time: 2022-05-27 08:48:06 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-05-27 08:48:06 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-05-27 08:48:06 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-05-27 08:48:07 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(text))

# time: 2022-05-27 08:48:17 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-05-27 08:48:19 UTC
# mode: r
+tokens <- tokens %>%
+    filter(!word %in% stop_words$word) %>%
+        filter(!word %in% c("it’s", "US", "u.s", "miele", "bosch", "siemens", "sebo", "dyson", "i'm", "i've", "don't", "i’m", "i’ve", "lol"))

# time: 2022-05-27 08:48:19 UTC
# mode: r
+tokens <- tokens %>%
+    group_by(word) %>%
+        summarize(N = n()) %>%
+            arrange(N)

# time: 2022-05-27 08:48:19 UTC
# mode: r
+tokens <- tokens %>% filter(N >= 5)

# time: 2022-05-27 08:48:19 UTC
# mode: r
+tokens <- tokens %>% mutate(doc = "bsh")

# time: 2022-05-27 08:48:19 UTC
# mode: r
+tokens 

# time: 2022-05-27 08:49:00 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-27 08:49:00 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance")

# time: 2022-05-27 08:49:01 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-27 08:49:06 UTC
# mode: r
+library(wikifacts)

# time: 2022-05-27 08:49:06 UTC
# mode: r
+library(gutenbergr)

# time: 2022-05-27 08:49:09 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-27 08:49:09 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance")

# time: 2022-05-27 08:49:11 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-27 08:49:16 UTC
# mode: r
+technical <- tibble(text = reference_text) %>%
+    mutate(text = prefilter_text(text)) %>%
+        mutate(doc = "technical")

# time: 2022-05-27 08:49:17 UTC
# mode: r
+technical 

# time: 2022-05-27 08:49:19 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-27 08:49:34 UTC
# mode: r
+keywords <- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair", "damage", "harm", "misuse", "injury", "wound", "stop", "error")

# time: 2022-05-27 08:49:35 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-27 08:49:40 UTC
# mode: r
+faults <- tibble(text = reference_text) %>%
+    mutate(text = prefilter_text(text)) %>%
+        mutate(doc = "faults")

# time: 2022-05-27 08:49:49 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-27 08:49:49 UTC
# mode: r
+keywords <- c("animal", "dog", "cat", "bird", "fish", "plant", "flower", "man", "woman", "gender", "society", "fairy", "tale", "fantasy", "literature", "novel", "biology", "science", "culture", "civilization", "city", "settlement", "village", "road", "rabbit", "white", "black", "red", "blue", "green", "yellow", "purple", "music", "guitar", "instrument", "vehicle", "game", "play", "leisure", "fact", "file", "investigation", "agent", "actor", "artist", "movie", "device", "malfunction", "service", "physics", "particle", "informatics", "computer", "nature", "space", "time", "star")

# time: 2022-05-27 08:49:49 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-27 08:50:09 UTC
# mode: r
+neutral <- tibble(text = reference_text) %>%
+    mutate(text = prefilter_text(text)) %>%
+        mutate(doc = "neutral")

# time: 2022-05-27 08:50:15 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-27 08:50:21 UTC
# mode: r
+docs_adjusted <- readRDS("docs.RDS")

# time: 2022-05-27 08:50:26 UTC
# mode: r
+docs_adjusted 

# time: 2022-05-27 08:50:36 UTC
# mode: r
+docs <- bind_rows(tokens, )

# time: 2022-05-27 08:50:37 UTC
# mode: r
+docs <- docs %>% bind_tf_idf(word, doc, N)

# time: 2022-05-27 08:50:38 UTC
# mode: r
+ggplot(docs, aes(word, tf_idf)) +
+    geom_point() +
+        facet_wrap(~doc)

# time: 2022-05-27 08:50:43 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-27 08:50:53 UTC
# mode: r
+bsh_words <- docs %>% filter(doc == "bsh")

# time: 2022-05-27 08:50:53 UTC
# mode: r
+bsh_words <- bsh_words %>% filter(tf_idf >= summary(bsh_words$tf_idf)[4])

# time: 2022-05-27 08:50:54 UTC
# mode: r
+reference_words <- docs %>% filter(doc == "reference")

# time: 2022-05-27 08:50:54 UTC
# mode: r
+reference_words <- reference_words %>% filter(tf_idf >= summary(reference_words$tf_idf)[4])

# time: 2022-05-27 08:50:55 UTC
# mode: r
+docs_adjusted <- bind_rows(tokens, technical, faults)

# time: 2022-05-27 08:50:56 UTC
# mode: r
+docs_adjusted 

# time: 2022-05-27 08:51:00 UTC
# mode: r
+saveRDS(docs_adjusted, "docs.RDS")

# time: 2022-05-27 08:51:04 UTC
# mode: r
+docs_adjusted <- readRDS("docs.RDS")

# time: 2022-05-27 08:51:04 UTC
# mode: r
+dtm <- docs_adjusted %>% cast_dtm(doc, word, N)

# time: 2022-05-27 08:51:05 UTC
# mode: r
+topic_fit <- LDA(dtm, k = 3, control = list(seed = 42))

# time: 2022-05-27 08:51:05 UTC
# mode: r
+topics <- tidy(topic_fit, matrix = "beta")

# time: 2022-05-27 08:51:06 UTC
# mode: r
+per_topics <- tidy(topic_fit, matrix = "gamma")

# time: 2022-05-27 08:51:07 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-27 08:51:12 UTC
# mode: r
+plot_topics(per_topics)

# time: 2022-05-27 08:51:28 UTC
# mode: r
+coding <- tribble(
+    ~topic, ~topic_label,
+    1, "bsh",
+    2, "faults",
+    3, "technical"
+)

# time: 2022-05-27 08:51:33 UTC
# mode: r
+topics_identified <- topics %>%
+    filter(term %in% tokens$word) %>%
+        group_by((term)) %>%
+            mutate(top = max(beta)) %>%
+                ungroup() %>%
+                    filter(beta == top) %>%
+                        left_join(coding) %>%
+                            dplyr::select(-`(term)`, -top)

# time: 2022-05-27 08:51:41 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-27 08:52:21 UTC
# mode: r
+library(mallet)

# time: 2022-05-27 08:52:35 UTC
# mode: r
+docs

# time: 2022-05-27 08:53:13 UTC
# mode: r
+docs_adjusted 

# time: 2022-05-27 08:53:44 UTC
# mode: r
+docs_for_mallet <- docs_adjusted  %>%  left_join(coding)

# time: 2022-05-27 08:53:50 UTC
# mode: r
+docs_adjusted  

# time: 2022-05-27 08:54:03 UTC
# mode: r
+docs_for_mallet <- docs_adjusted  %>%  left_join(coding, by=c("topic_label" = "doc"))

# time: 2022-05-27 08:54:13 UTC
# mode: r
+docs_for_mallet <- docs_adjusted  %>%  left_join(coding, by=c("doc" = "topic_label"))

# time: 2022-05-27 08:54:16 UTC
# mode: r
+docs_for_mallet 

# time: 2022-05-27 08:54:46 UTC
# mode: r
+stop_words$word

# time: 2022-05-27 08:54:52 UTC
# mode: r
+mallet.import(docs_adjusted$topic,docs_for_mallet$word,stop_words$word,FALSE)

# time: 2022-05-27 08:55:41 UTC
# mode: r
+topic_model  <- MalletLDA()

# time: 2022-05-27 08:55:53 UTC
# mode: r
+topic_model  <- MalletLDA(num.topics=3)

# time: 2022-05-27 08:55:57 UTC
# mode: r
+mallet.import(docs_adjusted$topic,docs_for_mallet$word,stop_words$word,FALSE)

# time: 2022-05-27 08:56:03 UTC
# mode: r
+warnings

# time: 2022-05-27 08:56:06 UTC
# mode: r
+warnings()

# time: 2022-05-27 08:56:26 UTC
# mode: r
+mallet.import(id.array=docs_adjusted$topic,text.array=docs_for_mallet$word,stop_words$word,FALSE)

# time: 2022-05-27 08:57:54 UTC
# mode: r
+faults 

# time: 2022-05-27 08:58:07 UTC
# mode: r
+reddit_data 

# time: 2022-05-27 09:00:31 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-05-27 09:00:32 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-05-27 09:00:34 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-05-27 09:00:35 UTC
# mode: r
+reddit_data 

# time: 2022-05-27 09:00:37 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(text))

# time: 2022-05-27 09:00:47 UTC
# mode: r
+reddit_data 

# time: 2022-05-27 09:03:23 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-27 09:03:43 UTC
# mode: r
+reddit_data 

# time: 2022-05-27 09:04:18 UTC
# mode: r
+reddit_for_mallet <- reddit_data %>% dplyr::select(text) %>% mutate(id = 1)

# time: 2022-05-27 09:04:20 UTC
# mode: r
+reddit_for_mallet

# time: 2022-05-27 09:04:30 UTC
# mode: r
+reddit_for_mallet <- reddit_data %>% dplyr::select(text) %>% mutate(id = 1) %>% unique()

# time: 2022-05-27 09:04:34 UTC
# mode: r
+reddit_for_mallet 

# time: 2022-05-27 09:04:37 UTC
# mode: r
+reddit_for_mallet <- reddit_data %>% dplyr::select(text) %>% mutate(id = 1) %>% unique()

# time: 2022-05-27 09:04:47 UTC
# mode: r
+reference_text <- ""

# time: 2022-05-27 09:04:47 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance")

# time: 2022-05-27 09:04:47 UTC
# mode: r
+for (w in keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-05-27 09:04:50 UTC
# mode: r
+technical <- tibble(text = reference_text) %>%
+    mutate(text = prefilter_text(text)) %>%
+        mutate(doc = "technical")

# time: 2022-05-27 09:05:19 UTC
# mode: r
+technical_for_mallet <- tibble(text=reference_text, id = 2)

# time: 2022-05-27 09:05:21 UTC
# mode: r
+technical_for_mallet 

# time: 2022-05-27 09:05:31 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-27 09:05:41 UTC
# mode: r
+faults_for_mallet <- tibble(text=reference_text, id = 3)

# time: 2022-05-27 09:06:15 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-27 09:06:18 UTC
# mode: r
+docs_for_mallet 

# time: 2022-05-27 09:06:31 UTC
# mode: r
+mallet.import(id.array=docs_adjusted$id,text.array=docs_for_mallet$text,stop_words$word,FALSE)

# time: 2022-05-27 09:06:37 UTC
# mode: r
+warnings()

# time: 2022-05-27 09:07:05 UTC
# mode: r
+write_csv(stop_words, "stopwords.csv")

# time: 2022-05-27 09:07:12 UTC
# mode: r
+mallet.import(id.array=docs_adjusted$id,text.array=docs_for_mallet$text,'stopwords.csv',FALSE)

# time: 2022-05-27 09:07:26 UTC
# mode: r
+mallet.import(id.array=docs_for_mallet$id,text.array=docs_for_mallet$text,'stopwords.csv',FALSE)

# time: 2022-05-27 09:08:41 UTC
# mode: r
+write_csv(stop_words[,1], "stopwords.csv")

# time: 2022-05-27 09:08:42 UTC
# mode: r
+mallet.import(id.array=docs_for_mallet$id,text.array=docs_for_mallet$text,'stopwords.csv',FALSE)

# time: 2022-05-27 09:09:16 UTC
# mode: r
+library(stringr)
+library(tidytext)
+library(readr)
+library(magrittr)
+library(dplyr)
+library(tibble)
+library(textclean)
+library(ggplot2)
+library(tidyr)
+library(topicmodels)
+library(igraph)
+library(ggraph)
+
+remove_URL <- function(text) {
+    text <- replace_url(text)[[1]]
+    text
+}
+
+
+prefilter_text <- function(texts) {
+    texts <- unlist(texts)
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "_", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "[0-9]", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        remove_URL(x)
+    }))
+    unlist(texts)
+}
+
+# load
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-05-27 09:09:30 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-27 09:28:45 UTC
# mode: r
+library(mallet)

# time: 2022-05-27 09:28:49 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-27 09:28:50 UTC
# mode: r
+docs_for_mallet 

# time: 2022-05-27 09:28:51 UTC
# mode: r
+write_csv(stop_words[,1], "stopwords.csv")

# time: 2022-05-27 09:28:52 UTC
# mode: r
+mallet.import(id.array=docs_for_mallet$id,text.array=docs_for_mallet$text,'stopwords.csv',FALSE)

# time: 2022-05-27 09:28:57 UTC
# mode: r
+warnings()

# time: 2022-05-27 09:29:13 UTC
# mode: r
+mallet.import(id.array=docs_for_mallet$id,text.array=docs_for_mallet$text,'stopwords.csv')

# time: 2022-05-27 09:29:19 UTC
# mode: r
+mallet.import(id.array=docs_for_mallet$id,text.array=docs_for_mallet$text)

# time: 2022-05-27 09:29:32 UTC
# mode: r
+mallet.import(id.array=docs_for_mallet$id,text.array=docs_for_mallet$text, stoplist.file='stopwords.csv')

# time: 2022-05-27 09:29:53 UTC
# mode: r
+mallet.import(id.array=docs_for_mallet$id,text.array=docs_for_mallet$text, stoplist.file='stopwords.csv',preserve.case = FALSE)

# time: 2022-05-27 09:36:07 UTC
# mode: r
+?mallet.import

# time: 2022-05-27 11:41:51 UTC
# mode: r
+mallet.import(id.array=docs_for_mallet$id,text.array=docs_for_mallet$text, stoplist.file='stopwords.csv',preserve.case = FALSE)

# time: 2022-05-27 11:43:03 UTC
# mode: r
+mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    stoplist.file = "stopwords.csv",
+    preserve.case = FALSE
+)

# time: 2022-05-27 11:43:11 UTC
# mode: r
+instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    stoplist.file = "stopwords.csv",
+    preserve.case = FALSE
+)

# time: 2022-05-27 11:43:26 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-05-27 11:43:39 UTC
# mode: r
+topic_model$load_documents(instances)

# time: 2022-05-27 11:43:56 UTC
# mode: r
+topic_model$loadDocuments(instances)

# time: 2022-05-27 11:45:14 UTC
# mode: r
+WF <- mallet.word.freqs(topic_model)

# time: 2022-05-27 11:45:19 UTC
# mode: r
+WF

# time: 2022-05-27 11:45:42 UTC
# mode: r
+head(WF)

# time: 2022-05-27 11:51:58 UTC
# mode: r
+topic_model$setAlphaOptimization(40,80)

# time: 2022-05-27 11:52:07 UTC
# mode: r
+topic_model$train(400)

# time: 2022-05-27 11:55:10 UTC
# mode: r
+mallet.topic.words(topic_model, smoothed=TRUE, normalized=TRUE)

# time: 2022-05-27 12:29:28 UTC
# mode: r
+library(stringr)
+library(tidytext)
+library(readr)
+library(magrittr)
+library(dplyr)
+library(tibble)
+library(textclean)
+library(ggplot2)
+library(tidyr)
+library(topicmodels)
+library(igraph)
+library(ggraph)

# time: 2022-05-30 11:32:37 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 11:37:28 UTC
# mode: r
+library(stringr)
+library(tidytext)
+library(readr)
+library(magrittr)
+library(dplyr)
+library(tibble)
+library(textclean)
+library(ggplot2)
+library(tidyr)
+library(topicmodels)
+library(igraph)
+library(ggraph)

# time: 2022-05-30 11:37:55 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 11:38:44 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 11:38:45 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 11:38:46 UTC
# mode: r
+write_csv(stop_words[,1], "stopwords.csv")

# time: 2022-05-30 11:38:47 UTC
# mode: r
+mallet.import(id.array=docs_for_mallet$id,text.array=docs_for_mallet$text,'stopwords.csv',FALSE)

# time: 2022-05-30 11:39:40 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-05-30 11:39:41 UTC
# mode: r
+mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 11:39:51 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 11:39:53 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-05-30 11:45:58 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 11:46:20 UTC
# mode: r
+topic_model$setAlphaOptimization(40,80)

# time: 2022-05-30 11:46:30 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 11:58:23 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed=TRUE, normalized=TRUE)

# time: 2022-05-30 11:58:27 UTC
# mode: r
+doc_topics

# time: 2022-05-30 11:58:51 UTC
# mode: r
+as.character(docs_for_mallet$text),

# time: 2022-05-30 11:59:18 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 12:06:22 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 12:06:23 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 12:06:25 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-05-30 12:06:26 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 12:07:41 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 12:09:06 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 12:09:06 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 12:09:08 UTC
# mode: r
+docs_for_mallet 

# time: 2022-05-30 12:09:20 UTC
# mode: r
+reddit_for_mallet

# time: 2022-05-30 12:09:25 UTC
# mode: r
+ technical_for_mallet

# time: 2022-05-30 12:09:43 UTC
# mode: r
+reddit_for_mallet <- reddit_for_mallet$text

# time: 2022-05-30 12:10:12 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 12:12:10 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 12:12:11 UTC
# mode: r
+reddit_for_mallet <- reddit_for_mallet$text

# time: 2022-05-30 12:12:11 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 12:12:14 UTC
# mode: r
+docs_for_mallet 

# time: 2022-05-30 12:12:16 UTC
# mode: r
+reddit_for_mallet <- reddit_for_mallet$text

# time: 2022-05-30 12:12:18 UTC
# mode: r
+reddit_for_mallet 

# time: 2022-05-30 12:12:30 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse=" ")

# time: 2022-05-30 12:12:34 UTC
# mode: r
+reddit_for_mallet 

# time: 2022-05-30 12:12:42 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse=" ")

# time: 2022-05-30 12:12:52 UTC
# mode: r
+reddit_for_mallet <- reddit_data %>%
+    dplyr::select(text) %>%
+        mutate(id = 1) %>%
+            unique()

# time: 2022-05-30 12:12:56 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse=" ")

# time: 2022-05-30 12:12:58 UTC
# mode: r
+reddit_for_mallet 

# time: 2022-05-30 12:13:14 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-05-30 12:13:15 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 12:13:19 UTC
# mode: r
+docs_for_mallet 

# time: 2022-05-30 12:13:22 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-05-30 12:13:22 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 12:13:23 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-05-30 12:13:24 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 12:13:24 UTC
# mode: r
+topic_model$setAlphaOptimization(40,80)

# time: 2022-05-30 12:13:25 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 12:13:32 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed=TRUE, normalized=TRUE)

# time: 2022-05-30 12:13:33 UTC
# mode: r
+doc_topics

# time: 2022-05-30 12:13:56 UTC
# mode: r
+probs <- tibble(doc_topics)

# time: 2022-05-30 12:14:00 UTC
# mode: r
+probs

# time: 2022-05-30 12:14:20 UTC
# mode: r
+docs_for_mallet 

# time: 2022-05-30 12:14:52 UTC
# mode: r
+probs <- data.frame(doc_topics)

# time: 2022-05-30 12:15:05 UTC
# mode: r
+row.names(probs) <- c(1,2,3)

# time: 2022-05-30 12:15:30 UTC
# mode: r
+row.names(probs) <- c('bsh', 'tech', 'fault')

# time: 2022-05-30 12:15:39 UTC
# mode: r
+colnames(proibs) <- c(1,2,3)

# time: 2022-05-30 12:15:44 UTC
# mode: r
+colnames(probs) <- c(1,2,3)

# time: 2022-05-30 12:15:45 UTC
# mode: r
+row.names(probs) <- c('bsh', 'tech', 'fault')

# time: 2022-05-30 12:15:45 UTC
# mode: r
+colnames(probs) <- c(1,2,3)

# time: 2022-05-30 12:15:46 UTC
# mode: r
+probs

# time: 2022-05-30 12:16:14 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 9)

# time: 2022-05-30 12:16:15 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 12:16:15 UTC
# mode: r
+topic_model$setAlphaOptimization(40,80)

# time: 2022-05-30 12:16:15 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 12:16:22 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed=TRUE, normalized=TRUE)

# time: 2022-05-30 12:16:22 UTC
# mode: r
+probs <- data.frame(doc_topics)

# time: 2022-05-30 12:16:23 UTC
# mode: r
+row.names(probs) <- c('bsh', 'tech', 'fault')

# time: 2022-05-30 12:16:23 UTC
# mode: r
+colnames(probs) <- 1:9

# time: 2022-05-30 12:16:25 UTC
# mode: r
+probs

# time: 2022-05-30 12:16:33 UTC
# mode: r
+tibble(probs)

# time: 2022-05-30 12:26:08 UTC
# mode: r
+docs_adjusted <- readRDS("docs.RDS")

# time: 2022-05-30 12:26:10 UTC
# mode: r
+docs_adjusted 

# time: 2022-05-30 12:40:53 UTC
# mode: r
+tibble(probs)

# time: 2022-05-30 12:40:58 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 12:40:59 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 12:40:59 UTC
# mode: r
+topic_model$setAlphaOptimization(40,80)

# time: 2022-05-30 12:40:59 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 12:41:03 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed=TRUE, normalized=TRUE)

# time: 2022-05-30 12:41:03 UTC
# mode: r
+probs <- data.frame(doc_topics)

# time: 2022-05-30 12:41:03 UTC
# mode: r
+row.names(probs) <- c('bsh', 'tech', 'fault')

# time: 2022-05-30 12:41:04 UTC
# mode: r
+colnames(probs) <- 1:9

# time: 2022-05-30 12:41:04 UTC
# mode: r
+tibble(probs)

# time: 2022-05-30 12:41:14 UTC
# mode: r
+colnames(probs) <- 1:4

# time: 2022-05-30 12:41:14 UTC
# mode: r
+tibble(probs)

# time: 2022-05-30 14:10:15 UTC
# mode: r
+library(stringr)

# time: 2022-05-30 14:27:48 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 14:28:33 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 14:28:34 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse=" ")

# time: 2022-05-30 14:28:34 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-05-30 14:28:34 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 14:28:34 UTC
# mode: r
+docs_for_mallet 

# time: 2022-05-30 14:30:13 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 14:30:15 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-05-30 14:30:15 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 14:30:17 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-05-30 14:30:17 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 14:30:18 UTC
# mode: r
+topic_model$setAlphaOptimization(40,80)

# time: 2022-05-30 14:30:18 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 14:30:22 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed=TRUE, normalized=TRUE)

# time: 2022-05-30 14:30:23 UTC
# mode: r
+doc_topics

# time: 2022-05-30 14:30:35 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 14:35:13 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 14:35:57 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 14:35:57 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-05-30 14:35:58 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-05-30 14:35:58 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 14:35:59 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-05-30 14:35:59 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 14:36:00 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-05-30 14:36:00 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 14:36:01 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-05-30 14:36:01 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 14:36:06 UTC
# mode: r
+topic_model$train(10000)

# time: 2022-05-30 14:36:34 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 14:36:35 UTC
# mode: r
+doc_topics

# time: 2022-05-30 14:36:35 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 14:36:47 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 14:36:49 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 14:36:49 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-05-30 14:36:50 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 14:36:53 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 14:36:54 UTC
# mode: r
+doc_topics

# time: 2022-05-30 14:36:54 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 14:37:14 UTC
# mode: r
+ technical_for_mallet

# time: 2022-05-30 14:37:17 UTC
# mode: r
+ faults_for_mallet

# time: 2022-05-30 14:38:14 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 14:38:58 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 14:38:59 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-05-30 14:38:59 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-05-30 14:38:59 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 14:39:00 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-05-30 14:39:01 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 14:39:03 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 14:39:04 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 14:39:19 UTC
# mode: r
+?topic_model$setAlphaOptimization

# time: 2022-05-30 14:39:33 UTC
# mode: r
+?setAlphaOptimization

# time: 2022-05-30 14:39:44 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 100)

# time: 2022-05-30 14:39:45 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 14:39:49 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 14:39:50 UTC
# mode: r
+doc_topics

# time: 2022-05-30 14:39:51 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 14:47:45 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 14:49:42 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 14:49:43 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-05-30 14:49:43 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-05-30 14:49:43 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 14:49:44 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-05-30 14:49:44 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 14:49:46 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 14:49:46 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 14:50:27 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 14:50:27 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 14:50:28 UTC
# mode: r
+topic_model$setAlphaOptimization(10, 400)

# time: 2022-05-30 14:50:29 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 14:50:35 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 14:50:36 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 14:50:36 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 14:50:41 UTC
# mode: r
+doc_topics

# time: 2022-05-30 14:50:41 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 14:50:41 UTC
# mode: r
+doc_topics

# time: 2022-05-30 14:50:42 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 14:50:53 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 14:50:53 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 14:50:53 UTC
# mode: r
+topic_model$setAlphaOptimization(10, 400)

# time: 2022-05-30 14:50:53 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 14:50:57 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 14:50:57 UTC
# mode: r
+doc_topics

# time: 2022-05-30 14:50:57 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 14:51:31 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 14:51:31 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 14:51:31 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-05-30 14:51:32 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 14:51:35 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 14:51:36 UTC
# mode: r
+doc_topics

# time: 2022-05-30 14:51:37 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 14:59:29 UTC
# mode: r
+doc_topics 

# time: 2022-05-30 14:59:44 UTC
# mode: r
+mallet.top.words(topic_model, doc_topics[1,], 10)

# time: 2022-05-30 15:00:00 UTC
# mode: r
+mallet.top.words(topic_model, doc_topics[2,], 10)

# time: 2022-05-30 15:00:04 UTC
# mode: r
+mallet.top.words(topic_model, doc_topics[3,], 10)

# time: 2022-05-30 15:00:57 UTC
# mode: r
+topic_words  <- mallet.topic.words(topic_model, smoothed=TRUE, normalized = TRUE)

# time: 2022-05-30 15:01:00 UTC
# mode: r
+topic_words  

# time: 2022-05-30 15:01:16 UTC
# mode: r
+topic_model

# time: 2022-05-30 15:01:22 UTC
# mode: r
+topic_words  <- mallet.topic.words(topic_model, smoothed=TRUE, normalized = TRUE)

# time: 2022-05-30 15:01:29 UTC
# mode: r
+mallet.top.words(topic_model, topic_words[1,], 10)

# time: 2022-05-30 15:01:35 UTC
# mode: r
+mallet.top.words(topic_model, topic_words[2,], 10)

# time: 2022-05-30 15:01:49 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:01:54 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:01:55 UTC
# mode: r
+doc_topics

# time: 2022-05-30 15:01:55 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:02:16 UTC
# mode: r
+topic_words  <- mallet.topic.words(topic_model, smoothed=TRUE, normalized = TRUE)

# time: 2022-05-30 15:02:16 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[4,], 20)

# time: 2022-05-30 15:02:19 UTC
# mode: r
+bsh

# time: 2022-05-30 15:02:41 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[4,], 20)

# time: 2022-05-30 15:02:45 UTC
# mode: r
+tech

# time: 2022-05-30 15:03:24 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[3,], 20)

# time: 2022-05-30 15:03:26 UTC
# mode: r
+tech

# time: 2022-05-30 15:03:35 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:03:47 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[1,], 20)

# time: 2022-05-30 15:03:50 UTC
# mode: r
+faults

# time: 2022-05-30 15:04:17 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[4,], 300)

# time: 2022-05-30 15:04:17 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[3,], 300)

# time: 2022-05-30 15:04:17 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[1,], 300)

# time: 2022-05-30 15:04:21 UTC
# mode: r
+tech

# time: 2022-05-30 15:04:24 UTC
# mode: r
+faults

# time: 2022-05-30 15:04:53 UTC
# mode: r
+reddit_for_mallet

# time: 2022-05-30 15:05:17 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text)

# time: 2022-05-30 15:05:19 UTC
# mode: r
+reddit_words 

# time: 2022-05-30 15:05:32 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stopwords$word)

# time: 2022-05-30 15:05:35 UTC
# mode: r
+ stopwords

# time: 2022-05-30 15:05:41 UTC
# mode: r
+library(stringr)

# time: 2022-05-30 15:05:41 UTC
# mode: r
+library(tidytext)

# time: 2022-05-30 15:05:41 UTC
# mode: r
+library(readr)

# time: 2022-05-30 15:05:42 UTC
# mode: r
+library(magrittr)

# time: 2022-05-30 15:05:42 UTC
# mode: r
+library(dplyr)

# time: 2022-05-30 15:05:42 UTC
# mode: r
+library(tibble)

# time: 2022-05-30 15:05:42 UTC
# mode: r
+library(textclean)

# time: 2022-05-30 15:05:43 UTC
# mode: r
+library(ggplot2)

# time: 2022-05-30 15:05:43 UTC
# mode: r
+library(tidyr)

# time: 2022-05-30 15:05:43 UTC
# mode: r
+library(topicmodels)

# time: 2022-05-30 15:05:43 UTC
# mode: r
+library(igraph)

# time: 2022-05-30 15:05:43 UTC
# mode: r
+library(ggraph)

# time: 2022-05-30 15:05:47 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stopwords$word)

# time: 2022-05-30 15:05:52 UTC
# mode: r
+stop_words

# time: 2022-05-30 15:05:58 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stopwords$word)

# time: 2022-05-30 15:06:07 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-05-30 15:06:34 UTC
# mode: r
+reddit_words 

# time: 2022-05-30 15:06:45 UTC
# mode: r
+ tech

# time: 2022-05-30 15:06:57 UTC
# mode: r
+reddit_tech <- reddit_words %>% filter(word %in% tech$words)

# time: 2022-05-30 15:07:02 UTC
# mode: r
+reddit_tech

# time: 2022-05-30 15:07:15 UTC
# mode: r
+topic_words  <- mallet.topic.words(topic_model, smoothed=TRUE, normalized = TRUE)

# time: 2022-05-30 15:07:16 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[4,], 50)

# time: 2022-05-30 15:07:16 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[3,], 50)

# time: 2022-05-30 15:07:16 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[1,], 50)

# time: 2022-05-30 15:07:17 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-05-30 15:07:18 UTC
# mode: r
+reddit_tech <- reddit_words %>% filter(word %in% tech$words)

# time: 2022-05-30 15:07:23 UTC
# mode: r
+reddit_tech

# time: 2022-05-30 15:07:41 UTC
# mode: r
+reddit_tech <- reddit_words %>% filter(word %in% tech$words) %>% unique()

# time: 2022-05-30 15:07:45 UTC
# mode: r
+reddit_tech

# time: 2022-05-30 15:08:06 UTC
# mode: r
+reddit_faults <- reddit_words %>% filter(word %in% faults$words) %>% unique()

# time: 2022-05-30 15:08:09 UTC
# mode: r
+reddit_faults

# time: 2022-05-30 15:08:37 UTC
# mode: r
+sum(reddit_tech$word %in% reddit_faults$word)

# time: 2022-05-30 15:11:48 UTC
# mode: r
+reddit_tech <- reddit_words %>% filter(word %in% tech$words) %>% group_by(word) %>% summarize(N=n())

# time: 2022-05-30 15:11:51 UTC
# mode: r
+reddit_tech 

# time: 2022-05-30 15:12:00 UTC
# mode: r
+reddit_tech <- reddit_words %>% filter(word %in% tech$words) %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N))

# time: 2022-05-30 15:12:03 UTC
# mode: r
+reddit_tech 

# time: 2022-05-30 15:12:18 UTC
# mode: r
+reddit_faults <- reddit_words %>% filter(word %in% faults$words) %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N))

# time: 2022-05-30 15:12:21 UTC
# mode: r
+reddit_faults 

# time: 2022-05-30 15:16:27 UTC
# mode: r
+reddit_tech <- reddit_words %>% filter(word %in% tech$words) %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N)) %>% ungroup() %>% mutate(group='TECH')

# time: 2022-05-30 15:16:27 UTC
# mode: r
+reddit_faults <- reddit_words %>% filter(word %in% faults$words) %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N))%>% ungroup() %>% mutate(group='ISSUE')

# time: 2022-05-30 15:16:32 UTC
# mode: r
+reddit_tech 

# time: 2022-05-30 15:17:21 UTC
# mode: r
+vocab_data <- bind_rows(reddit_tech, reddit_faults)

# time: 2022-05-30 15:17:26 UTC
# mode: r
+vocab_data 

# time: 2022-05-30 15:18:02 UTC
# mode: r
+vocab_data <- vocab_data %>% dplyr::select(from=group, to=word, N=N)

# time: 2022-05-30 15:18:05 UTC
# mode: r
+vocab_data 

# time: 2022-05-30 15:18:20 UTC
# mode: r
+g <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:18:24 UTC
# mode: r
+g

# time: 2022-05-30 15:18:34 UTC
# mode: r
+plot(g)

# time: 2022-05-30 15:19:22 UTC
# mode: r
+g <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:19:24 UTC
# mode: r
+ggraph(g, layout = "fr") +
+    geom_edge_link(aes(edge_alpha = N), show.legend = FALSE, color = "gray80") +
+        geom_node_point(color = "black", size = 3) +
+            geom_node_point(color = "skyblue", size = 2) +
+                geom_node_text(aes(label = name, color = text_aes, fontface = face), nudge_y = -0.5, show.legend = FALSE, family = "Helvetica Neue", size = 5) +
+                    scale_color_manual(values = c("grey55", "black")) +
+                        theme(
+        panel.background = element_rect(fill = "white"),
+        text = element_text(family = "Helvetica Neue", size = 10)
+    )

# time: 2022-05-30 15:19:45 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:19:45 UTC
# mode: r
+colnames(topics_graph) <- c("from", "to", "strength")

# time: 2022-05-30 15:19:47 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:20:07 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:20:09 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:20:09 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:20:13 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:20:14 UTC
# mode: r
+E(gr)$strength <- topics_graph$strength

# time: 2022-05-30 15:20:19 UTC
# mode: r
+ topics_graph

# time: 2022-05-30 15:20:21 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:20:23 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:20:30 UTC
# mode: r
+E(gr)$strength <- vocab_data$strength

# time: 2022-05-30 15:20:32 UTC
# mode: r
+V(gr)$text_aes <- V(gr)$name %in% c("bsh", "technical", "faults")

# time: 2022-05-30 15:20:34 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("bsh", "technical", "faults")], rep("plain", vcount(gr) - 3))

# time: 2022-05-30 15:20:43 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:20:44 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:20:44 UTC
# mode: r
+E(gr)$strength <- vocab_data$strength

# time: 2022-05-30 15:20:51 UTC
# mode: r
+V(gr)$name %in% c("bsh", "te")

# time: 2022-05-30 15:20:59 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 15:21:26 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 15:22:13 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 15:22:14 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-05-30 15:22:14 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-05-30 15:22:14 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 15:22:15 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-05-30 15:22:15 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 15:22:16 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 15:22:17 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 15:22:17 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-05-30 15:22:17 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 15:22:21 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:22:22 UTC
# mode: r
+doc_topics

# time: 2022-05-30 15:22:23 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:22:33 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 15:22:37 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:22:38 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:22:44 UTC
# mode: r
+topic_words  <- mallet.topic.words(topic_model, smoothed=TRUE, normalized = TRUE)

# time: 2022-05-30 15:22:45 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[4,], 50)

# time: 2022-05-30 15:22:45 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[3,], 50)

# time: 2022-05-30 15:22:46 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[1,], 50)

# time: 2022-05-30 15:22:48 UTC
# mode: r
+topic_words  <- mallet.topic.words(topic_model, smoothed=TRUE, normalized = TRUE)

# time: 2022-05-30 15:22:49 UTC
# mode: r
+topic_words  

# time: 2022-05-30 15:22:50 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[4,], 50)

# time: 2022-05-30 15:22:51 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[3,], 50)

# time: 2022-05-30 15:22:51 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[1,], 50)

# time: 2022-05-30 15:22:51 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-05-30 15:22:52 UTC
# mode: r
+reddit_faults <- reddit_words %>% filter(word %in% faults$words) %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N))%>% ungroup() %>% mutate(group='ISSUE')

# time: 2022-05-30 15:22:53 UTC
# mode: r
+reddit_tech <- reddit_words %>% filter(word %in% tech$words) %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N)) %>% ungroup() %>% mutate(group='TECH')

# time: 2022-05-30 15:22:53 UTC
# mode: r
+reddit_faults <- reddit_words %>% filter(word %in% faults$words) %>% group_by(word) %>% summarize(N=n()) %>% arrange(desc(N))%>% ungroup() %>% mutate(group='ISSUE')

# time: 2022-05-30 15:22:53 UTC
# mode: r
+vocab_data <- bind_rows(reddit_tech, reddit_faults)

# time: 2022-05-30 15:22:54 UTC
# mode: r
+vocab_data <- vocab_data %>% dplyr::select(from=group, to=word, N=N)

# time: 2022-05-30 15:22:55 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:22:55 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:23:00 UTC
# mode: r
+plot(gr)

# time: 2022-05-30 15:23:24 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 15:24:10 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 15:24:10 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-05-30 15:24:11 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-05-30 15:24:11 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 15:24:12 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-05-30 15:24:12 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 15:24:14 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 15:24:14 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 15:24:15 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-05-30 15:24:16 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 15:24:20 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:24:20 UTC
# mode: r
+doc_topics

# time: 2022-05-30 15:24:20 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:25:51 UTC
# mode: r
+saveRDS(technical_for_mallet, "mallet_techs.RDS")

# time: 2022-05-30 15:26:07 UTC
# mode: r
+faults_for_mallet <- tibble(text = reference_text, id = 3)

# time: 2022-05-30 15:26:08 UTC
# mode: r
+saveRDS(faults_for_mallet, "mallet_faults.RDS")

# time: 2022-05-30 15:26:16 UTC
# mode: r
+library(mallet)

# time: 2022-05-30 15:26:16 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-05-30 15:26:16 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-05-30 15:26:16 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-05-30 15:26:18 UTC
# mode: r
+docs_for_mallet 

# time: 2022-05-30 15:26:31 UTC
# mode: r
+saveRDS(docs_for_mallet, "LDA_text.RDS")

# time: 2022-05-30 15:26:33 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-05-30 15:26:34 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 15:26:34 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 15:26:34 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-05-30 15:26:35 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 15:26:54 UTC
# mode: r
+saveRDS(topic_model, "BSH_LDA_topic_model.RDS")

# time: 2022-05-30 15:26:57 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:26:57 UTC
# mode: r
+doc_topics

# time: 2022-05-30 15:26:58 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:27:03 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 15:27:07 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:27:07 UTC
# mode: r
+doc_topics

# time: 2022-05-30 15:27:07 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:27:10 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 15:27:15 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:27:16 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:27:25 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-05-30 15:27:26 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-05-30 15:27:27 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-05-30 15:27:29 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-05-30 15:27:33 UTC
# mode: r
+saveRDS(topic_model, "BSH_LDA_topic_model.RDS")

# time: 2022-05-30 15:27:35 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:27:35 UTC
# mode: r
+doc_topics

# time: 2022-05-30 15:27:36 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:27:44 UTC
# mode: r
+saveRDS(topic_model, "BSH_LDA_topic_model.RDS")

# time: 2022-05-30 15:27:44 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:27:45 UTC
# mode: r
+doc_topics

# time: 2022-05-30 15:27:45 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:27:50 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:28:05 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[3, ], 50)

# time: 2022-05-30 15:28:05 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[1, ], 50)

# time: 2022-05-30 15:28:06 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[3, ], 50)

# time: 2022-05-30 15:28:06 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-05-30 15:28:09 UTC
# mode: r
+reddit_tech <- reddit_words %>%
+    filter(word %in% tech$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>%
+                arrange(desc(N)) %>%
+                    ungroup() %>%
+                        mutate(group = "TECH")

# time: 2022-05-30 15:28:13 UTC
# mode: r
+reddit_faults <- reddit_words %>%
+    filter(word %in% faults$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>%
+                arrange(desc(N)) %>%
+                    ungroup() %>%
+                        mutate(group = "ISSUE")

# time: 2022-05-30 15:28:14 UTC
# mode: r
+vocab_data <- bind_rows(reddit_tech, reddit_faults)

# time: 2022-05-30 15:28:15 UTC
# mode: r
+vocab_data <- vocab_data %>% dplyr::select(from = group, to = word, N = N)

# time: 2022-05-30 15:28:17 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:28:17 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:28:18 UTC
# mode: r
+plot(gr)

# time: 2022-05-30 15:28:39 UTC
# mode: r
+saveRDS(vocab_data, "LDA_vocab_data.RDS")

# time: 2022-05-30 15:28:42 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:28:42 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:28:44 UTC
# mode: r
+vocab_data

# time: 2022-05-30 15:28:49 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:28:50 UTC
# mode: r
+E(gr)$strength <- vocab_data$strength

# time: 2022-05-30 15:29:38 UTC
# mode: r
+V(gr)$text_aes <- V(gr)$name %in% c("TECH","ISSUE")

# time: 2022-05-30 15:29:38 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("bsh", "technical", "faults")], rep("plain", vcount(gr) - 3))

# time: 2022-05-30 15:29:53 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("TECH", "ISSUE")], rep("plain", vcount(gr) - 3))

# time: 2022-05-30 15:30:20 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 15:30:27 UTC
# mode: r
+vocab_data <- bind_rows(reddit_tech, reddit_faults, reddit_bsh)

# time: 2022-05-30 15:30:27 UTC
# mode: r
+vocab_data <- vocab_data %>% dplyr::select(from = group, to = word, N = N)

# time: 2022-05-30 15:30:28 UTC
# mode: r
+saveRDS(vocab_data, "LDA_vocab_data.RDS")

# time: 2022-05-30 15:30:29 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:30:30 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:30:30 UTC
# mode: r
+E(gr)$strength <- vocab_data$strength

# time: 2022-05-30 15:30:34 UTC
# mode: r
+V(gr)$text_aes <- V(gr)$name %in% c("TECH","ISSUE", "OTHER")

# time: 2022-05-30 15:30:43 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:30:44 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:30:44 UTC
# mode: r
+E(gr)$strength <- vocab_data$strength

# time: 2022-05-30 15:30:44 UTC
# mode: r
+V(gr)$text_aes <- V(gr)$name %in% c("TECH","ISSUE", "OTHER")

# time: 2022-05-30 15:30:45 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("TECH", "ISSUE", "OTHER")], rep("plain", vcount(gr) - 3))

# time: 2022-05-30 15:30:49 UTC
# mode: r
+ggraph(g, layout = "fr") +
+    geom_edge_link(aes(edge_alpha = N), show.legend = FALSE, color = "gray80") +
+        geom_node_point(color = "black", size = 3) +
+            geom_node_point(color = "skyblue", size = 2) +
+                geom_node_text(aes(label = name, color = text_aes, fontface = face), nudge_y = -0.5, show.legend = FALSE, family = "Helvetica Neue", size = 5) +
+                    scale_color_manual(values = c("grey55", "black")) +
+                        theme(
+        panel.background = element_rect(fill = "white"),
+        text = element_text(family = "Helvetica Neue", size = 10)
+    )

# time: 2022-05-30 15:30:57 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 15:31:23 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-05-30 15:31:26 UTC
# mode: r
+topic_words 

# time: 2022-05-30 15:31:28 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-05-30 15:31:35 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[2, ], 50)

# time: 2022-05-30 15:31:35 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[1, ], 50)

# time: 2022-05-30 15:31:35 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[3, ], 50)

# time: 2022-05-30 15:31:36 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-05-30 15:31:39 UTC
# mode: r
+NvimR.selection()

# time: 2022-05-30 15:32:04 UTC
# mode: r
+reddit_tech <- reddit_words %>%
+    filter(word %in% tech$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>%
+                arrange(desc(N)) %>%
+                    ungroup() %>%
+                        mutate(group = "TECH")

# time: 2022-05-30 15:32:04 UTC
# mode: r
+reddit_faults <- reddit_words %>%
+    filter(word %in% faults$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>%
+                arrange(desc(N)) %>%
+                    ungroup() %>%
+                        mutate(group = "ISSUE")

# time: 2022-05-30 15:32:04 UTC
# mode: r
+reddit_bsh<- reddit_words %>%
+    filter(word %in% bsh$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>%
+                arrange(desc(N)) %>%
+                    ungroup() %>%
+                        mutate(group = "OTHER")

# time: 2022-05-30 15:32:04 UTC
# mode: r
+vocab_data <- bind_rows(reddit_tech, reddit_faults, reddit_bsh)

# time: 2022-05-30 15:32:04 UTC
# mode: r
+vocab_data <- vocab_data %>% dplyr::select(from = group, to = word, N = N)

# time: 2022-05-30 15:32:04 UTC
# mode: r
+saveRDS(vocab_data, "LDA_vocab_data.RDS")

# time: 2022-05-30 15:32:04 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-05-30 15:32:04 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-05-30 15:32:04 UTC
# mode: r
+E(gr)$strength <- vocab_data$strength

# time: 2022-05-30 15:32:04 UTC
# mode: r
+V(gr)$text_aes <- V(gr)$name %in% c("TECH","ISSUE", "OTHER")

# time: 2022-05-30 15:32:04 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("TECH", "ISSUE", "OTHER")], rep("plain", vcount(gr) - 3))

# time: 2022-05-30 15:32:04 UTC
# mode: r
+ggraph(gr, layout = "fr") +
+    geom_edge_link(aes(edge_alpha = strength), show.legend = FALSE, color = "gray80") +
+        geom_node_point(color = "black", size = 3) +
+            geom_node_point(color = "skyblue", size = 2) +
+                geom_node_text(aes(label = name, color = text_aes, fontface = face), nudge_y = -0.5, show.legend = FALSE, family = "Helvetica Neue", size = 5) +
+                    scale_color_manual(values = c("grey55", "black")) +
+                        theme(
+        panel.background = element_rect(fill = "white"),
+        text = element_text(family = "Helvetica Neue", size = 10)
+    )

# time: 2022-05-30 15:32:05 UTC
# mode: r
+        panel.background = element_rect(fill = "white"),

# time: 2022-05-30 15:32:05 UTC
# mode: r
+        text = element_text(family = "Helvetica Neue", size = 10)

# time: 2022-05-30 15:32:05 UTC
# mode: r
+    )

# time: 2022-05-31 06:51:29 UTC
# mode: r
+ggraph(gr, layout = "fr") +
+    geom_edge_link(aes(edge_alpha = strength), show.legend = FALSE, color = "gray80") +
+        geom_node_point(color = "black", size = 3) +
+            geom_node_point(color = "skyblue", size = 2) +
+                geom_node_text(aes(label = name, color = text_aes, fontface = face), nudge_y = -0.5, show.legend = FALSE, family = "Helvetica Neue", size = 5) +
+                    scale_color_manual(values = c("grey55", "black")) +
+                        theme(
+        panel.background = element_rect(fill = "white"),
+        text = element_text(family = "Helvetica Neue", size = 10)
+    )

# time: 2022-05-31 19:39:57 UTC
# mode: r
+a  <- seq(0,3, length.out =10)

# time: 2022-05-31 19:39:58 UTC
# mode: r
+a

# time: 2022-05-31 19:40:10 UTC
# mode: r
+b <- a * 0.45

# time: 2022-05-31 19:40:10 UTC
# mode: r
+b <- a * 0.45

# time: 2022-05-31 19:40:26 UTC
# mode: r
+a  <- seq(0,3, length.out =10)

# time: 2022-05-31 19:40:27 UTC
# mode: r
+b <- a * 0.45

# time: 2022-05-31 19:40:37 UTC
# mode: r
+beta(a,b)

# time: 2022-05-31 19:40:49 UTC
# mode: r
+betas <- beta(a,b)

# time: 2022-05-31 19:40:54 UTC
# mode: r
+plot(a,betas)

# time: 2022-05-31 19:44:51 UTC
# mode: r
+thetas <- seq(0,1,length.out=10)

# time: 2022-05-31 19:45:07 UTC
# mode: r
+a <- 4

# time: 2022-05-31 19:45:07 UTC
# mode: r
+b <- 4

# time: 2022-05-31 19:45:22 UTC
# mode: r
+BETAdens <- pbetas(thetas, a,b)

# time: 2022-05-31 19:45:26 UTC
# mode: r
+BETAdens <- pbeta(thetas, a,b)

# time: 2022-05-31 19:45:37 UTC
# mode: r
+plot(thetas, BETAdens)

# time: 2022-05-31 19:46:04 UTC
# mode: r
+thetas <- seq(0,1,length.out=10)

# time: 2022-05-31 19:46:05 UTC
# mode: r
+a <- 4

# time: 2022-05-31 19:46:05 UTC
# mode: r
+b <- 4

# time: 2022-05-31 19:46:06 UTC
# mode: r
+BETAdens <- pbeta(thetas, a,b)

# time: 2022-05-31 19:46:07 UTC
# mode: r
+BETAdens 

# time: 2022-05-31 19:46:15 UTC
# mode: r
+thetas <- seq(0,1,length.out=40)

# time: 2022-05-31 19:46:16 UTC
# mode: r
+a <- 4

# time: 2022-05-31 19:46:16 UTC
# mode: r
+b <- 4

# time: 2022-05-31 19:46:16 UTC
# mode: r
+BETAdens <- pbeta(thetas, a,b)

# time: 2022-05-31 19:46:17 UTC
# mode: r
+plot(thetas, BETAdens)

# time: 2022-05-31 19:47:15 UTC
# mode: r
+BETAdens <- dbeta(thetas, a,b)

# time: 2022-05-31 19:47:15 UTC
# mode: r
+plot(thetas, BETAdens)

# time: 2022-05-31 19:47:23 UTC
# mode: r
+thetas <- seq(0,1,length.out=200)

# time: 2022-05-31 19:47:23 UTC
# mode: r
+a <- 4

# time: 2022-05-31 19:47:23 UTC
# mode: r
+b <- 4

# time: 2022-05-31 19:47:24 UTC
# mode: r
+BETAdens <- dbeta(thetas, a,b)

# time: 2022-05-31 19:47:24 UTC
# mode: r
+plot(thetas, BETAdens)

# time: 2022-06-02 09:03:24 UTC
# mode: r
+library(wordnet)

# time: 2022-06-02 09:05:35 UTC
# mode: r
+wordnet::synonyms("gear")

# time: 2022-06-02 09:05:39 UTC
# mode: r
+wordnet::synonyms("gear",pos=1)

# time: 2022-06-02 09:05:46 UTC
# mode: r
+?wordnet::synonyms

# time: 2022-06-02 09:06:00 UTC
# mode: r
+wordnet::synonyms("gear",pos="NOUN")

# time: 2022-06-02 09:06:09 UTC
# mode: r
+getDict()

# time: 2022-06-02 09:06:25 UTC
# mode: r
+library(wordnet)

# time: 2022-06-02 09:09:39 UTC
# mode: r
+wordnet::synonyms("gear",pos="NOUN")

# time: 2022-06-02 09:13:32 UTC
# mode: r
+library(wordnet)

# time: 2022-06-02 09:25:49 UTC
# mode: r
+Sys.setenv(WNHOME = "/usr/bin/wn")

# time: 2022-06-02 09:26:00 UTC
# mode: r
+Sys.getenv(WNHOME)

# time: 2022-06-02 09:26:06 UTC
# mode: r
+Sys.getenv()

# time: 2022-06-02 09:26:19 UTC
# mode: r
+install.packages("wordnet")

# time: 2022-06-02 09:26:28 UTC
# mode: r
+library(wordnet)

# time: 2022-06-02 09:26:39 UTC
# mode: r
+path <- file.path("usr", "share", "dict")

# time: 2022-06-02 09:26:49 UTC
# mode: r
+setDict(path)

# time: 2022-06-02 09:42:40 UTC
# mode: r
+?setDict

# time: 2022-06-02 09:42:53 UTC
# mode: r
+setDict

# time: 2022-06-02 09:43:00 UTC
# mode: r
+setDict('/usr/bin/wn')

# time: 2022-06-02 09:43:14 UTC
# mode: r
+path <- file.path("usr", "bin", "wn")

# time: 2022-06-02 09:43:16 UTC
# mode: r
+path

# time: 2022-06-02 09:43:20 UTC
# mode: r
+setDict(path)

# time: 2022-06-02 09:43:38 UTC
# mode: r
+library(wordnet)

# time: 2022-06-02 09:43:52 UTC
# mode: r
+/usr/bin/wn

# time: 2022-06-02 09:50:26 UTC
# mode: r
+Sys.setenv(WNHOME = "/usr/local/WordNet-3.0/")

# time: 2022-06-02 09:50:29 UTC
# mode: r
+library(wordnet)

# time: 2022-06-02 09:50:37 UTC
# mode: r
+wordnet::synonyms("gear",pos="NOUN")

# time: 2022-06-02 09:51:44 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance", "electronic", "product", "item", "set", "system", "machinery", "cleaner", "vacuum cleaner", "dishwasher", "washing machine")

# time: 2022-06-02 09:51:44 UTC
# mode: r
+technical_keywords <- c()

# time: 2022-06-02 09:51:45 UTC
# mode: r
+for (word in keywords) {
+    synonyms <- wordnet::synonyms(word, "NOUN")
+    technical_keywords <- c(technical_keywords, synonyms)
+}

# time: 2022-06-02 09:51:52 UTC
# mode: r
+technical_keywords

# time: 2022-06-02 09:54:48 UTC
# mode: r
+wordnet::synonyms("machine",pos="NOUN")

# time: 2022-06-02 09:55:11 UTC
# mode: r
+wordnet::synonyms("machine",pos="NOUN"faults_keywords <- c())

# time: 2022-06-02 09:55:13 UTC
# mode: r
+keywords <- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair", "damage", "harm", "misuse", "injury", "wound", "stop", "error", "computer bug", "stopped working", "issue", "warrant", "guarantee", "damaged", "K.O.", "stuck")

# time: 2022-06-02 09:55:14 UTC
# mode: r
+faults_keywords <- c()

# time: 2022-06-02 09:55:15 UTC
# mode: r
+for (word in keywords) {
+    synonyms <- wordnet::synonyms(word, "NOUN")
+    technical_keywords <- c(technical_keywords, synonyms)
+}

# time: 2022-06-02 09:55:30 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 09:55:30 UTC
# mode: r
+keywords <- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair", "damage", "harm", "misuse", "injury", "wound", "stop", "error", "computer bug", "stopped working", "issue", "warrant", "guarantee", "damaged", "K.O.", "stuck")

# time: 2022-06-02 09:55:30 UTC
# mode: r
+faults_keywords <- c()

# time: 2022-06-02 09:55:31 UTC
# mode: r
+for (word in keywords) {
+    synonyms <- wordnet::synonyms(word, "NOUN")
+    faults_keywords <- c(faults_keywords, synonyms)
+}

# time: 2022-06-02 09:55:38 UTC
# mode: r
+faults_keywords

# time: 2022-06-02 09:56:13 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 09:56:13 UTC
# mode: r
+keywords <- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair", "damage", "harm", "misuse", "injury", "wound", "stop", "error", "computer bug", "stopped working", "issue", "warrant", "guarantee", "damaged", "K.O.", "stuck")

# time: 2022-06-02 09:56:14 UTC
# mode: r
+faults_keywords <- c()

# time: 2022-06-02 09:56:15 UTC
# mode: r
+for (word in keywords) {
+    synonyms <- wordnet::synonyms(word, "NOUN")
+    faults_keywords <- c(faults_keywords, synonyms)
+}

# time: 2022-06-02 09:56:18 UTC
# mode: r
+faults_keywords <- unique(faults_keywords)

# time: 2022-06-02 09:56:24 UTC
# mode: r
+faults_keywords

# time: 2022-06-02 09:56:43 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 10:00:08 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-02 10:00:08 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-02 10:00:10 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 10:01:54 UTC
# mode: r
+faults_for_mallet 

# time: 2022-06-02 10:02:07 UTC
# mode: r
+library(mallet)

# time: 2022-06-02 10:02:08 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-06-02 10:02:08 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-06-02 10:02:10 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-06-02 10:02:11 UTC
# mode: r
+saveRDS(docs_for_mallet, "LDA_text.RDS")

# time: 2022-06-02 10:02:12 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-06-02 10:02:13 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-06-02 10:02:15 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-06-02 10:02:15 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-06-02 10:02:16 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-06-02 10:02:16 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-06-02 10:02:22 UTC
# mode: r
+saveRDS(topic_model, "BSH_LDA_topic_model.RDS")

# time: 2022-06-02 10:02:23 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 10:02:23 UTC
# mode: r
+doc_topics

# time: 2022-06-02 10:02:24 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-06-02 10:02:25 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 10:02:26 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[2, ], 50)

# time: 2022-06-02 10:02:26 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[1, ], 50)

# time: 2022-06-02 10:02:26 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[3, ], 50)

# time: 2022-06-02 10:02:27 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-06-02 10:02:31 UTC
# mode: r
+reddit_tech <- reddit_words %>%
+NvimR.selection()

# time: 2022-06-02 10:02:35 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 10:02:37 UTC
# mode: r
+vocab_data <- bind_rows(reddit_tech, reddit_faults, reddit_bsh)

# time: 2022-06-02 10:02:37 UTC
# mode: r
+vocab_data <- vocab_data %>% dplyr::select(from = group, to = word, N = N)

# time: 2022-06-02 10:02:37 UTC
# mode: r
+saveRDS(vocab_data, "LDA_vocab_data.RDS")

# time: 2022-06-02 10:02:38 UTC
# mode: r
+colnames(vocab_data) <- c("from", "to", "strength")

# time: 2022-06-02 10:02:39 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(vocab_data)

# time: 2022-06-02 10:02:39 UTC
# mode: r
+E(gr)$strength <- vocab_data$strength

# time: 2022-06-02 10:02:39 UTC
# mode: r
+V(gr)$text_aes <- V(gr)$name %in% c("TECH","ISSUE", "OTHER")

# time: 2022-06-02 10:02:40 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("TECH", "ISSUE", "OTHER")], rep("plain", vcount(gr) - 3))

# time: 2022-06-02 10:02:42 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 10:03:45 UTC
# mode: r
+vocab_data

# time: 2022-06-02 10:03:54 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 10:03:55 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[2, ], 50)

# time: 2022-06-02 10:03:55 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[1, ], 50)

# time: 2022-06-02 10:03:55 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[3, ], 50)

# time: 2022-06-02 10:04:13 UTC
# mode: r
+N <- 150

# time: 2022-06-02 10:04:19 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[2, ], N)

# time: 2022-06-02 10:04:21 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[1, ], N)

# time: 2022-06-02 10:04:21 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[3, ], N)

# time: 2022-06-02 10:04:21 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-06-02 10:04:24 UTC
# mode: r
+reddit_tech <- reddit_words %>%
+    filter(word %in% tech$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>%
+                arrange(desc(N)) %>%
+                    ungroup() %>%
+                        mutate(group = "TECH")

# time: 2022-06-02 10:04:26 UTC
# mode: r
+reddit_faults <- reddit_words %>%
+    filter(word %in% faults$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>%
+                arrange(desc(N)) %>%
+                    ungroup() %>%
+                        mutate(group = "ISSUE")

# time: 2022-06-02 10:04:28 UTC
# mode: r
+reddit_bsh<- reddit_words %>%
+    filter(word %in% bsh$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>%
+                arrange(desc(N)) %>%
+                    ungroup() %>%
+                        mutate(group = "OTHER")

# time: 2022-06-02 10:04:32 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 10:04:50 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-06-02 10:05:17 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 10:05:18 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[4, ], N)

# time: 2022-06-02 10:05:18 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[1, ], N)

# time: 2022-06-02 10:05:18 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[3, ], N)

# time: 2022-06-02 10:05:19 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-06-02 10:05:23 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 11:38:55 UTC
# mode: r
+library(stringr)
+library(tidytext)
+library(readr)
+library(magrittr)
+library(dplyr)
+library(tibble)
+library(textclean)
+library(ggplot2)
+library(tidyr)
+library(topicmodels)
+library(igraph)
+library(ggraph)
+library(wordnet)
+
+remove_URL <- function(text) {
+    text <- replace_url(text)[[1]]
+    text
+}
+
+
+prefilter_text <- function(texts) {
+    texts <- unlist(texts)
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "_", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "[0-9]", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        remove_URL(x)
+    }))
+    unlist(texts)
+}
+
+# load
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-06-02 11:39:18 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 11:39:33 UTC
# mode: r
+reddit_data 

# time: 2022-06-02 11:39:50 UTC
# mode: r
+reddit_data <- reddit_data[,2:3]

# time: 2022-06-02 11:39:55 UTC
# mode: r
+reddit_data

# time: 2022-06-02 11:46:46 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-06-02 11:46:57 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 11:47:03 UTC
# mode: r
+reddit_data 

# time: 2022-06-02 11:47:25 UTC
# mode: r
+to_investigate_title <- unique(reddit_data$title)

# time: 2022-06-02 11:47:34 UTC
# mode: r
+to_investigate_title

# time: 2022-06-02 11:47:41 UTC
# mode: r
+for (t in to_investigate_title) {
+    sub <- reddit_data %>% filter(title == t)
+    print(paste0(sub$text, collapse = " "))
+    print(t)
+    id <- seq(1, length(unique(reddit_data$title)))[unique(reddit_data$title) == t]
+    print(id)
+    readline(prompt = "Press any key to continue")
+}

# time: 2022-06-02 11:51:09 UTC
# mode: r
+excluded <- c(8, 37)

# time: 2022-06-02 11:51:09 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-06-02 11:51:10 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-06-02 11:51:10 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(text))

# time: 2022-06-02 11:51:12 UTC
# mode: r
+reddit_for_mallet <- reddit_data %>%
+    dplyr::select(text) %>%
+        mutate(id = 1) %>%
+            unique()

# time: 2022-06-02 11:51:21 UTC
# mode: r
+reddit_daat

# time: 2022-06-02 11:51:24 UTC
# mode: r
+reddit_data

# time: 2022-06-02 11:51:34 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 11:51:53 UTC
# mode: r
+excluded <- c(8, 37)

# time: 2022-06-02 11:51:54 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-06-02 11:52:04 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 11:52:09 UTC
# mode: r
+reddit_for_mallet

# time: 2022-06-02 11:52:12 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-06-02 11:52:14 UTC
# mode: r
+tokens <- tokens %>%
+    filter(!word %in% stop_words$word) %>%
+        filter(!word %in% c("it’s", "US", "u.s", "miele", "bosch", "siemens", "sebo", "dyson", "i'm", "i've", "don't", "i’m", "i’ve", "lol"))

# time: 2022-06-02 11:52:29 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)
+tokens <- tokens %>%
+    filter(!word %in% stop_words$word) %>%
+    filter(!word %in% c("it’s", "US", "u.s", "miele", "bosch", "siemens", "sebo", "dyson", "i'm", "i've", "don't", "i’m", "i’ve", "lol", "il", "Il", "ll"))
+tokens <- tokens %>%
+    group_by(word) %>%
+    summarize(N = n()) %>%
+    arrange(N)
+tokens <- tokens %>% filter(N >= 5)
+tokens <- tokens %>% mutate(doc = "bsh")

# time: 2022-06-02 11:53:05 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 11:53:30 UTC
# mode: r
+tokens

# time: 2022-06-02 11:53:37 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-02 11:53:37 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-02 11:53:40 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 11:53:40 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance", "electronic", "product", "item", "set", "system", "machinery", "cleaner", "vacuum cleaner", "dishwasher", "washing machine")

# time: 2022-06-02 11:53:41 UTC
# mode: r
+technical_keywords <- c()

# time: 2022-06-02 11:53:41 UTC
# mode: r
+for (word in keywords) {
+    synonyms <- wordnet::synonyms(word, "NOUN")
+    technical_keywords <- c(technical_keywords, synonyms)
+}

# time: 2022-06-02 11:53:45 UTC
# mode: r
+technical_keywords <- unique(technical_keywords)

# time: 2022-06-02 11:53:46 UTC
# mode: r
+for (w in technical_keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-06-02 11:54:13 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 11:55:28 UTC
# mode: r
+library(mallet)

# time: 2022-06-02 11:55:29 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-06-02 11:55:29 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-06-02 11:55:35 UTC
# mode: r
+reddit_for_malle

# time: 2022-06-02 11:55:45 UTC
# mode: r
+reddit_for_mallet

# time: 2022-06-02 11:55:48 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-06-02 11:55:48 UTC
# mode: r
+saveRDS(docs_for_mallet, "LDA_text.RDS")

# time: 2022-06-02 11:55:52 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 11:55:54 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 4)

# time: 2022-06-02 11:55:54 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-06-02 11:55:55 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-06-02 11:55:56 UTC
# mode: r
+topic_model$train(1000)

# time: 2022-06-02 11:56:01 UTC
# mode: r
+saveRDS(topic_model, "BSH_LDA_topic_model.RDS")

# time: 2022-06-02 11:56:02 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 11:56:02 UTC
# mode: r
+doc_topics

# time: 2022-06-02 11:56:02 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-06-02 11:56:49 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[2, ], N)

# time: 2022-06-02 11:56:50 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 11:56:51 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[2, ], N)

# time: 2022-06-02 11:56:51 UTC
# mode: r
+N <- 150

# time: 2022-06-02 11:56:52 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 11:56:52 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[2, ], N)

# time: 2022-06-02 11:56:52 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[3, ], N)

# time: 2022-06-02 11:56:53 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[1, ], N)

# time: 2022-06-02 11:56:56 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 12:10:38 UTC
# mode: r
+reddit_archive <- read_csv("data/reddit_full_archive2.csv")

# time: 2022-06-02 12:10:48 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-06-02 12:11:09 UTC
# mode: r
+reddit_archive <- read_csv("data/reddit_full_archive2.csv")

# time: 2022-06-02 12:11:10 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-06-02 12:11:10 UTC
# mode: r
+reddit_archive <- reddit_archive %>% filter(!title %in% to_exclude_title) %>% unique()

# time: 2022-06-02 12:11:18 UTC
# mode: r
+reddit_archive

# time: 2022-06-02 12:11:22 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-06-02 12:11:23 UTC
# mode: r
+excluded <- c(8, 37)

# time: 2022-06-02 12:11:23 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-06-02 12:11:37 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-06-02 12:11:41 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(body))

# time: 2022-06-02 12:12:03 UTC
# mode: r
+reddit_archive <- reddit_archive %>% mutate(text = prefilter(text))

# time: 2022-06-02 12:12:12 UTC
# mode: r
+reddit_archive

# time: 2022-06-02 12:12:16 UTC
# mode: r
+reddit_archive <- reddit_archive %>% mutate(text = prefilter(text))

# time: 2022-06-02 12:12:22 UTC
# mode: r
+reddit_archive <- reddit_archive %>% mutate(text = prefilter_text(text))

# time: 2022-06-02 12:12:28 UTC
# mode: r
+reddit_archive

# time: 2022-06-02 12:12:38 UTC
# mode: r
+reddit_data 

# time: 2022-06-02 12:13:06 UTC
# mode: r
+reddit_data <- reddit_data %>% dplyr::select(title, text)

# time: 2022-06-02 12:13:18 UTC
# mode: r
+reddit_archive <- reddit_archive %>% dplyr::select(title, text)

# time: 2022-06-02 12:13:32 UTC
# mode: r
+reddit_data <- bind_rows(reddit_data, reddit_archive)

# time: 2022-06-02 12:13:44 UTC
# mode: r
+reddit_data 

# time: 2022-06-02 12:13:48 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 12:14:07 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-02 12:14:07 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-02 12:14:14 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 12:16:03 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 12:16:03 UTC
# mode: r
+doc_topics

# time: 2022-06-02 12:16:04 UTC
# mode: r
+tibble(doc_topics)

# time: 2022-06-02 12:17:10 UTC
# mode: r
+rowIDX =q

# time: 2022-06-02 12:17:12 UTC
# mode: r
+rowIDX =1

# time: 2022-06-02 12:17:15 UTC
# mode: r
+    row <- likelihoodTable[rowIDX,]

# time: 2022-06-02 12:17:39 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 12:17:55 UTC
# mode: r
+reddit_archive <- read_csv("data/reddit_full_archive2.csv")

# time: 2022-06-02 12:17:55 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-06-02 12:19:06 UTC
# mode: r
+to_exclude_title <- unqiue(reddit_archive$title)[excluded]

# time: 2022-06-02 12:19:07 UTC
# mode: r
+reddit_archive <- reddit_archive %>% filter(!title %in% to_exclude_title) %>% unique()

# time: 2022-06-02 12:19:12 UTC
# mode: r
+reddit_archive <- read_csv("data/reddit_full_archive2.csv")

# time: 2022-06-02 12:19:13 UTC
# mode: r
+excluded <- c(10, 20, 32, 43, 45, 47, 62, 78, 90, 138)

# time: 2022-06-02 12:19:13 UTC
# mode: r
+to_exclude_title <- unique(reddit_archive$title)[excluded]

# time: 2022-06-02 12:19:13 UTC
# mode: r
+reddit_archive <- reddit_archive %>% filter(!title %in% to_exclude_title) %>% unique()

# time: 2022-06-02 12:19:15 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-06-02 12:19:16 UTC
# mode: r
+excluded <- c(8, 37)

# time: 2022-06-02 12:19:16 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-06-02 12:19:23 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 12:22:26 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-02 12:22:27 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-02 12:22:34 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 12:25:57 UTC
# mode: r
+rowIDX=1

# time: 2022-06-02 12:25:58 UTC
# mode: r
+    row <- likelihoodTable[rowIDX,]

# time: 2022-06-02 12:26:05 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-02 12:26:06 UTC
# mode: r
+    row <- likelihoodTable[rowIDX,]

# time: 2022-06-02 12:26:10 UTC
# mode: r
+row

# time: 2022-06-02 12:26:27 UTC
# mode: r
+    row <- likelihoodTable[rowIDX,]  %>%  unlist()

# time: 2022-06-02 12:26:29 UTC
# mode: r
+row

# time: 2022-06-02 12:26:49 UTC
# mode: r
+    seq(1, length(row))[row==max(row)]

# time: 2022-06-02 12:26:54 UTC
# mode: r
+get_max_likelihood <- function(likelihoodTable, rowIDX) {
+    row <- likelihoodTable[rowIDX,]  %>%  unlist()
+    seq(1, length(row))[row==max(row)]
+    
+}

# time: 2022-06-02 12:27:05 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable = ,1), ], N)

# time: 2022-06-02 12:27:08 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 12:27:08 UTC
# mode: r
+N <- 150

# time: 2022-06-02 12:27:09 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable = ,1), ], N)

# time: 2022-06-02 12:27:13 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-02 12:27:14 UTC
# mode: r
+get_max_likelihood <- function(likelihoodTable, rowIDX) {
+    row <- likelihoodTable[rowIDX,]  %>%  unlist()
+    seq(1, length(row))[row==max(row)]
+    
+}

# time: 2022-06-02 12:27:15 UTC
# mode: r
+N <- 150

# time: 2022-06-02 12:27:15 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 12:27:16 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable = ,1), ], N)

# time: 2022-06-02 12:27:24 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable,1), ], N)

# time: 2022-06-02 12:27:37 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable,2), ], N)

# time: 2022-06-02 12:27:50 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 12:27:51 UTC
# mode: r
+N <- 150

# time: 2022-06-02 12:27:51 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable,1), ], N)

# time: 2022-06-02 12:27:52 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable,2), ], N)

# time: 2022-06-02 12:27:52 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable,3), ], N)

# time: 2022-06-02 12:27:54 UTC
# mode: r
+reddit_tech <- reddit_words %>%
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-06-02 12:27:56 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 12:27:58 UTC
# mode: r
+saveRDS(vocab_data, "LDA_vocab_data.RDS")

# time: 2022-06-02 12:28:05 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 12:31:17 UTC
# mode: r
+get_max_likelihood(likelihoodTable,3)

# time: 2022-06-02 12:31:24 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-02 12:31:29 UTC
# mode: r
+likelihoodTable

# time: 2022-06-02 12:58:19 UTC
# mode: r
+:RfN <- 100

# time: 2022-06-02 12:58:20 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 12:58:20 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 1), ], N)

# time: 2022-06-02 12:58:21 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 2), ], N)

# time: 2022-06-02 12:58:21 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 3), ], N)

# time: 2022-06-02 12:58:22 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-06-02 12:58:25 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 13:04:18 UTC
# mode: r
+attributes(topic_model)

# time: 2022-06-02 13:04:55 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 5)

# time: 2022-06-02 13:04:56 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-06-02 13:04:56 UTC
# mode: r
+topic_model$setAlphaOptimization(40, 80)

# time: 2022-06-02 13:04:57 UTC
# mode: r
+topic_model$train(5000)

# time: 2022-06-02 13:05:28 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 13:05:30 UTC
# mode: r
+doc_topics

# time: 2022-06-02 13:05:31 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-02 13:05:37 UTC
# mode: r
+likelihoodTable

# time: 2022-06-02 13:19:43 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 13:19:48 UTC
# mode: r
+topic_words

# time: 2022-06-02 13:20:10 UTC
# mode: r
+topic_words[get_max_likelihood(likelihoodTable, 1), ]

# time: 2022-06-02 13:40:46 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 13:40:48 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-02 13:40:56 UTC
# mode: r
+likelihoodTable

# time: 2022-06-02 13:43:40 UTC
# mode: r
+technical_keywords

# time: 2022-06-02 13:44:02 UTC
# mode: r
+likelihoodTable

# time: 2022-06-02 14:21:25 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 14:21:37 UTC
# mode: r
+tokens

# time: 2022-06-02 14:21:58 UTC
# mode: r
+tokens <- tokens %>% arrange(desc(N))

# time: 2022-06-02 14:22:02 UTC
# mode: r
+tokens

# time: 2022-06-02 14:22:18 UTC
# mode: r
+write_csv(tokens, "data/bsh_tokens.csv")

# time: 2022-06-02 15:36:54 UTC
# mode: r
+token_list <- read_csv("data/bsh_tokens.csv")

# time: 2022-06-02 15:37:02 UTC
# mode: r
+token_list

# time: 2022-06-02 15:37:32 UTC
# mode: r
+token_list <- token_list[,c(1,2)]

# time: 2022-06-02 15:37:38 UTC
# mode: r
+token_list

# time: 2022-06-02 15:37:52 UTC
# mode: r
+colnames(token_list) <- c("word", "list")

# time: 2022-06-02 15:38:11 UTC
# mode: r
+token_list <- token_list %>% filter(!is.na(list))

# time: 2022-06-02 15:38:15 UTC
# mode: r
+token_list

# time: 2022-06-02 15:38:55 UTC
# mode: r
+token_list <- token_list %>% pivot_wider(values_from=list, names_from=c("tech", "issue"))

# time: 2022-06-02 15:39:33 UTC
# mode: r
+token_list <- token_list %>% mutate(list_name=if_else(list==1, "tech", "issue")) %>%  pivot_wider(values_from=list, names_from=list_name)

# time: 2022-06-02 15:39:42 UTC
# mode: r
+token_list 

# time: 2022-06-02 15:40:01 UTC
# mode: r
+token_list <- read_csv("data/bsh_tokens.csv")

# time: 2022-06-02 15:40:02 UTC
# mode: r
+token_list <- token_list[,c(1,2)]

# time: 2022-06-02 15:40:02 UTC
# mode: r
+colnames(token_list) <- c("word", "list")

# time: 2022-06-02 15:40:02 UTC
# mode: r
+token_list <- token_list %>% filter(!is.na(list))

# time: 2022-06-02 15:40:03 UTC
# mode: r
+token_list <- token_list %>% mutate(list_name=if_else(list==1, "tech", "issue"))

# time: 2022-06-02 15:40:07 UTC
# mode: r
+token_list

# time: 2022-06-02 15:40:28 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 15:41:04 UTC
# mode: r
+token_list[token_list$list_name=='tech', 'word']

# time: 2022-06-02 15:41:13 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist())

# time: 2022-06-02 15:41:15 UTC
# mode: r
+keywords

# time: 2022-06-02 15:41:35 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 15:41:37 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 15:41:37 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance", "electronic", "product", "item", "set", "system", "machinery", "cleaner", "vacuum cleaner", "dishwasher", "washing machine")

# time: 2022-06-02 15:41:37 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 15:41:40 UTC
# mode: r
+keywords

# time: 2022-06-02 15:42:04 UTC
# mode: r
+token_list

# time: 2022-06-02 15:42:12 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 15:42:12 UTC
# mode: r
+keywords <- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair", "damage", "harm", "misuse", "injury", "wound", "stop", "error", "computer bug", "stopped working", "issue", "warrant", "guarantee", "damaged", "K.O.", "stuck", "beep", "replace", "replacement")

# time: 2022-06-02 15:42:12 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='issue', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 15:42:16 UTC
# mode: r
+keywords

# time: 2022-06-02 15:42:26 UTC
# mode: r
+keywords <- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair", "damage", "harm", "misuse", "injury", "wound", "stop", "error", "computer bug", "stopped working", "issue", "warrant", "guarantee", "damaged", "K.O.", "stuck", "beep", "replace", "replacement")

# time: 2022-06-02 15:42:27 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='issue', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 15:42:30 UTC
# mode: r
+keywords

# time: 2022-06-02 15:42:39 UTC
# mode: r
+token_list <- read_csv("data/bsh_tokens.csv")

# time: 2022-06-02 15:42:40 UTC
# mode: r
+token_list <- token_list[,c(1,2)]

# time: 2022-06-02 15:42:40 UTC
# mode: r
+colnames(token_list) <- c("word", "list")

# time: 2022-06-02 15:42:41 UTC
# mode: r
+token_list <- token_list %>% filter(!is.na(list))

# time: 2022-06-02 15:42:45 UTC
# mode: r
+token_list

# time: 2022-06-02 15:42:53 UTC
# mode: r
+token_list$list

# time: 2022-06-02 15:43:25 UTC
# mode: r
+token_list <- read_csv("data/bsh_tokens.csv")

# time: 2022-06-02 15:43:26 UTC
# mode: r
+token_list <- token_list[,c(1,2)]

# time: 2022-06-02 15:43:26 UTC
# mode: r
+colnames(token_list) <- c("word", "list")

# time: 2022-06-02 15:43:26 UTC
# mode: r
+token_list <- token_list %>% filter(!is.na(list))

# time: 2022-06-02 15:43:27 UTC
# mode: r
+token_list <- token_list %>% mutate(list_name=if_else(list==1, "tech", if_else(list==2, "issue", NA)))

# time: 2022-06-02 15:43:35 UTC
# mode: r
+token_list <- token_list %>% mutate(list_name=if_else(list==1, "tech", if_else(list==2, "issue", "irrelevant")))

# time: 2022-06-02 15:43:38 UTC
# mode: r
+token_list <- read_csv("data/bsh_tokens.csv")

# time: 2022-06-02 15:43:39 UTC
# mode: r
+token_list <- token_list[,c(1,2)]

# time: 2022-06-02 15:43:39 UTC
# mode: r
+colnames(token_list) <- c("word", "list")

# time: 2022-06-02 15:43:39 UTC
# mode: r
+token_list <- token_list %>% filter(!is.na(list))

# time: 2022-06-02 15:43:40 UTC
# mode: r
+token_list <- token_list %>% mutate(list_name=if_else(list==1, "tech", if_else(list==2, "issue", "irrelevant")))

# time: 2022-06-02 15:43:42 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 15:43:42 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance", "electronic", "product", "item", "set", "system", "machinery", "cleaner", "vacuum cleaner", "dishwasher", "washing machine")

# time: 2022-06-02 15:43:43 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 15:43:47 UTC
# mode: r
+keywords

# time: 2022-06-02 15:43:50 UTC
# mode: r
+keywords <- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair", "damage", "harm", "misuse", "injury", "wound", "stop", "error", "computer bug", "stopped working", "issue", "warrant", "guarantee", "damaged", "K.O.", "stuck", "beep", "replace", "replacement")

# time: 2022-06-02 15:43:50 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='issue', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 15:43:53 UTC
# mode: r
+keywords

# time: 2022-06-02 15:43:59 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 15:43:59 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance", "electronic", "product", "item", "set", "system", "machinery", "cleaner", "vacuum cleaner", "dishwasher", "washing machine")

# time: 2022-06-02 15:44:00 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 15:44:00 UTC
# mode: r
+technical_keywords <- c()

# time: 2022-06-02 15:44:00 UTC
# mode: r
+for (word in keywords) {
+    synonyms <- wordnet::synonyms(word, "NOUN")
+    technical_keywords <- c(technical_keywords, synonyms)
+}

# time: 2022-06-02 15:44:30 UTC
# mode: r
+technical_keywords <- unique(technical_keywords)

# time: 2022-06-02 15:44:32 UTC
# mode: r
+for (w in technical_keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-06-02 15:46:36 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 15:52:00 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 15:52:01 UTC
# mode: r
+doc_topics

# time: 2022-06-02 15:52:03 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-02 15:52:05 UTC
# mode: r
+likelihoodTable 

# time: 2022-06-02 15:52:15 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 15:52:47 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-02 15:52:48 UTC
# mode: r
+likelihoodTable

# time: 2022-06-02 15:53:28 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 15:54:17 UTC
# mode: r
+keywords <- c()

# time: 2022-06-02 15:54:17 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 15:54:18 UTC
# mode: r
+technical_keywords <- c()

# time: 2022-06-02 15:54:19 UTC
# mode: r
+for (word in keywords) {
+    synonyms <- wordnet::synonyms(word, "NOUN")
+    technical_keywords <- c(technical_keywords, synonyms)
+}

# time: 2022-06-02 15:55:11 UTC
# mode: r
+technical_keywords <- unique(technical_keywords)

# time: 2022-06-02 15:55:12 UTC
# mode: r
+for (w in technical_keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-06-02 15:57:09 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 15:57:12 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-02 15:57:18 UTC
# mode: r
+faults_keywords <- c()

# time: 2022-06-02 15:57:18 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='issue', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 15:57:22 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 16:00:47 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-02 16:00:48 UTC
# mode: r
+doc_topics

# time: 2022-06-02 16:00:48 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-02 16:00:48 UTC
# mode: r
+likelihoodTable

# time: 2022-06-02 16:01:18 UTC
# mode: r
+keywords <- c()

# time: 2022-06-02 16:01:19 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 16:01:19 UTC
# mode: r
+technical_keywords <- c()

# time: 2022-06-02 16:01:24 UTC
# mode: r
+technical_keywords <- unique(technical_keywords)

# time: 2022-06-02 16:01:29 UTC
# mode: r
+for (w in technical_keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-06-02 16:01:32 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 16:01:36 UTC
# mode: r
+technical_for_mallet 

# time: 2022-06-02 16:01:41 UTC
# mode: r
+faults_keywords <- c()

# time: 2022-06-02 16:01:42 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='issue', 'word'] %>% unlist() %>% unname())

# time: 2022-06-02 16:01:44 UTC
# mode: r
+faults_keywords <- unique(faults_keywords)

# time: 2022-06-02 16:01:44 UTC
# mode: r
+for (w in faults_keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-06-02 16:01:47 UTC
# mode: r
+faults <- tibble(text = reference_text) %>%
+    mutate(text = prefilter_text(text)) %>%
+        mutate(doc = "faults")

# time: 2022-06-02 16:01:47 UTC
# mode: r
+faults_for_mallet <- tibble(text = reference_text, id = 3)

# time: 2022-06-02 16:01:48 UTC
# mode: r
+saveRDS(faults_for_mallet, "mallet_faults.RDS")

# time: 2022-06-02 16:02:06 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-02 19:48:43 UTC
# mode: r
+source("src/DBDA2E-utilities.R")

# time: 2022-06-02 19:49:32 UTC
# mode: r
+betaABfromMeanKappa(0.5, 10)

# time: 2022-06-02 19:49:45 UTC
# mode: r
+betABfromModeKappa

# time: 2022-06-02 19:49:50 UTC
# mode: r
+betaABfromModeKappa

# time: 2022-06-02 19:50:05 UTC
# mode: r
+betaABfromModeKappa(0.5, 10)

# time: 2022-06-02 19:50:24 UTC
# mode: r
+betaABfromMeanSD(0.5, 10)

# time: 2022-06-02 19:50:40 UTC
# mode: r
+betaABfromMeanSD(10, 0.5 )

# time: 2022-06-02 19:50:55 UTC
# mode: r
+betaABfromMeanSD(mean=10, sd=2)

# time: 2022-06-02 19:51:09 UTC
# mode: r
+betaABfromMeanSD(mean=0.8, sd=0.2)

# time: 2022-06-03 07:13:43 UTC
# mode: r
+source("src/DBDA2E-utilities.R")

# time: 2022-06-03 07:13:44 UTC
# mode: r
+betaABfromMeanKappa(0.5, 10)

# time: 2022-06-03 07:13:45 UTC
# mode: r
+betaABfromModeKappa(0.5, 10)

# time: 2022-06-03 07:13:45 UTC
# mode: r
+betaABfromMeanSD(mean=0.8, sd=0.2)

# time: 2022-06-03 07:37:30 UTC
# mode: r
+Theta = seq(0, 1, length=1000)

# time: 2022-06-03 07:37:33 UTC
# mode: r
+Theta

# time: 2022-06-03 07:39:03 UTC
# mode: r
+pTheta <- c(rep(1, 200), seq(1, 100, length = 50), seq(100, 1, length = 50), rep(1, 200), rep(1, 200), seq(1, 100, length = 50), seq(100, 1, length = 50), rep(1, 200))

# time: 2022-06-03 07:39:14 UTC
# mode: r
+plot(pTheta)

# time: 2022-06-03 07:39:28 UTC
# mode: r
+pTheta <- pTheta/sum(pTheta)

# time: 2022-06-03 07:39:41 UTC
# mode: r
+pTheta <- c(rep(1, 200), seq(1, 100, length = 50), seq(100, 1, length = 50), rep(1, 200), rep(1, 200), seq(1, 100, length = 50), seq(100, 1, length = 50), rep(1, 200))

# time: 2022-06-03 07:39:42 UTC
# mode: r
+pTheta <- pTheta/sum(pTheta)

# time: 2022-06-03 07:39:47 UTC
# mode: r
+pTheta

# time: 2022-06-03 07:40:47 UTC
# mode: r
+Data <- c(rep(0, 14), rep(1, 13))

# time: 2022-06-03 07:40:53 UTC
# mode: r
+source("src/DBDA2E-utilities.R")

# time: 2022-06-03 07:41:15 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data)

# time: 2022-06-03 07:41:19 UTC
# mode: r
+source("src/DBDA2E-utilities.R")

# time: 2022-06-03 07:41:24 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data)

# time: 2022-06-03 07:42:05 UTC
# mode: r
+source("src/BernGrid.R")

# time: 2022-06-03 07:42:06 UTC
# mode: r
+Theta <- seq(0, 1, length = 1000)

# time: 2022-06-03 07:42:06 UTC
# mode: r
+pTheta <- c(rep(1, 200), seq(1, 100, length = 50), seq(100, 1, length = 50), rep(1, 200), rep(1, 200), seq(1, 100, length = 50), seq(100, 1, length = 50), rep(1, 200))

# time: 2022-06-03 07:42:06 UTC
# mode: r
+pTheta <- pTheta/sum(pTheta)

# time: 2022-06-03 07:42:07 UTC
# mode: r
+Data <- c(rep(0, 14), rep(1, 13))

# time: 2022-06-03 07:42:08 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data)

# time: 2022-06-03 07:46:49 UTC
# mode: r
+likelihood_f <- function(theta, z, N) {
+    (theta^(z)) * ((1 - theta)^(N - z))
+}

# time: 2022-06-03 07:47:02 UTC
# mode: r
+bayes_rule <- function(likelihood, prior) {
+    (likelihood * prior) / sum(prior * likelihood)
+}

# time: 2022-06-03 07:47:13 UTC
# mode: r
+likelihood_f <- function(theta, z, N) {
+    (theta^(z)) * ((1 - theta)^(N - z))
+}

# time: 2022-06-03 07:47:29 UTC
# mode: r
+bayes_rule <- function(likelihood, prior) {
+    (likelihood * prior) / sum(prior * likelihood)
+}

# time: 2022-06-03 07:47:47 UTC
# mode: r
+likelihood_f <- function(theta, z, N) {
+    (theta^(z)) * ((1 - theta)^(N - z))
+}

# time: 2022-06-03 07:48:25 UTC
# mode: r
+likelihood <- likelihood_f(pTheta, sum(Data), length(Data))

# time: 2022-06-03 07:48:30 UTC
# mode: r
+likelihood

# time: 2022-06-03 07:48:48 UTC
# mode: r
+prior <- pTheta

# time: 2022-06-03 07:48:49 UTC
# mode: r
+posterior <- bayes_rule(likelihood, prior)

# time: 2022-06-03 07:48:54 UTC
# mode: r
+plot(posterior)

# time: 2022-06-03 07:49:18 UTC
# mode: r
+plot(likelihood)

# time: 2022-06-03 07:49:26 UTC
# mode: r
+source("src/BernGrid.R")

# time: 2022-06-03 07:49:26 UTC
# mode: r
+Theta <- seq(0, 1, length = 1000)

# time: 2022-06-03 07:49:26 UTC
# mode: r
+pTheta <- c(rep(1, 200), seq(1, 100, length = 50), seq(100, 1, length = 50), rep(1, 200), rep(1, 200), seq(1, 100, length = 50), seq(100, 1, length = 50), rep(1, 200))

# time: 2022-06-03 07:49:27 UTC
# mode: r
+pTheta <- pTheta/sum(pTheta)

# time: 2022-06-03 07:49:28 UTC
# mode: r
+Data <- c(rep(0, 14), rep(1, 13))

# time: 2022-06-03 07:49:28 UTC
# mode: r
+posterior <- BernGrid(Theta, pTheta, Data)

# time: 2022-06-03 07:49:56 UTC
# mode: r
+sum(Data)

# time: 2022-06-03 07:49:59 UTC
# mode: r
+length(Data)

# time: 2022-06-03 07:50:05 UTC
# mode: r
+    (theta^(z)) * ((1 - theta)^(N - z))

# time: 2022-06-03 07:50:21 UTC
# mode: r
+theta=seq(0,1,27)

# time: 2022-06-03 07:50:24 UTC
# mode: r
+    (theta^(z)) * ((1 - theta)^(N - z))

# time: 2022-06-03 07:50:28 UTC
# mode: r
+z = 14

# time: 2022-06-03 07:50:32 UTC
# mode: r
+N= 27

# time: 2022-06-03 07:50:42 UTC
# mode: r
+    (theta^(z)) * ((1 - theta)^(N - z))

# time: 2022-06-03 07:50:53 UTC
# mode: r
+theta

# time: 2022-06-03 07:51:07 UTC
# mode: r
+theta = seq(0,1,length=27)

# time: 2022-06-03 07:51:10 UTC
# mode: r
+    (theta^(z)) * ((1 - theta)^(N - z))

# time: 2022-06-03 07:51:13 UTC
# mode: r
+likelihood_f <- function(theta, z, N) {
+    (theta^(z)) * ((1 - theta)^(N - z))
+}

# time: 2022-06-03 07:51:22 UTC
# mode: r
+likelihood <- likelihood_f(theta, z, N)

# time: 2022-06-03 07:51:32 UTC
# mode: r
+plot(likelihood)

# time: 2022-06-03 07:51:53 UTC
# mode: r
+likelihood <- likelihood_f(seq(0,1, length=length(Data)), sum(Data), length(Data))

# time: 2022-06-03 07:51:54 UTC
# mode: r
+prior <- pTheta

# time: 2022-06-03 07:51:55 UTC
# mode: r
+posterior <- bayes_rule(likelihood, prior)

# time: 2022-06-03 07:51:56 UTC
# mode: r
+plot(posterior)

# time: 2022-06-03 07:52:01 UTC
# mode: r
+likelihood <- likelihood_f(seq(0,1, length=length(Data)), sum(Data), length(Data))

# time: 2022-06-03 07:52:01 UTC
# mode: r
+prior <- pTheta

# time: 2022-06-03 07:52:13 UTC
# mode: r
+likelihood <- likelihood_f(seq(0,1, length=1000), sum(Data), length(Data))

# time: 2022-06-03 07:52:14 UTC
# mode: r
+prior <- pTheta

# time: 2022-06-03 07:52:14 UTC
# mode: r
+posterior <- bayes_rule(likelihood, prior)

# time: 2022-06-03 07:52:15 UTC
# mode: r
+plot(posterior)

# time: 2022-06-03 07:52:31 UTC
# mode: r
+plot(posterior, type='l')

# time: 2022-06-03 07:54:48 UTC
# mode: r
+likelihood

# time: 2022-06-03 07:54:50 UTC
# mode: r
+ prior

# time: 2022-06-03 07:54:54 UTC
# mode: r
+plot(prior)

# time: 2022-06-03 07:55:09 UTC
# mode: r
+Data <- c(rep(0, 140), rep(1, 100))

# time: 2022-06-03 07:55:11 UTC
# mode: r
+likelihood <- likelihood_f(theta, z, N)

# time: 2022-06-03 07:55:12 UTC
# mode: r
+bayes_rule <- function(likelihood, prior) {
+    (likelihood * prior) / sum(prior * likelihood)
+}

# time: 2022-06-03 07:55:13 UTC
# mode: r
+likelihood <- likelihood_f(seq(0,1, length=1000), sum(Data), length(Data))

# time: 2022-06-03 07:55:14 UTC
# mode: r
+prior <- pTheta

# time: 2022-06-03 07:55:14 UTC
# mode: r
+posterior <- bayes_rule(likelihood, prior)

# time: 2022-06-03 07:55:14 UTC
# mode: r
+plot(posterior, type='l')

# time: 2022-06-03 08:05:15 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 08:05:54 UTC
# mode: r
+token_list

# time: 2022-06-03 08:06:05 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-03 08:06:06 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance", "electronic", "product", "item", "set", "system", "machinery", "cleaner", "vacuum cleaner", "dishwasher", "washing machine")

# time: 2022-06-03 08:06:08 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname())

# time: 2022-06-03 08:06:10 UTC
# mode: r
+keywords

# time: 2022-06-03 08:06:32 UTC
# mode: r
+technical_keywords <- c()

# time: 2022-06-03 08:06:33 UTC
# mode: r
+for (word in keywords) {
+    synonyms <- wordnet::synonyms(word, "NOUN")
+    technical_keywords <- c(technical_keywords, synonyms)
+}

# time: 2022-06-03 08:06:52 UTC
# mode: r
+technical_keywords <- unique(technical_keywords)

# time: 2022-06-03 08:06:57 UTC
# mode: r
+technical_keywords

# time: 2022-06-03 08:07:11 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname())

# time: 2022-06-03 08:07:12 UTC
# mode: r
+keywords 

# time: 2022-06-03 08:07:34 UTC
# mode: r
+technical_keywords <- keywords

# time: 2022-06-03 08:07:35 UTC
# mode: r
+technical_keywords <- unique(technical_keywords)

# time: 2022-06-03 08:07:36 UTC
# mode: r
+for (w in technical_keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-06-03 08:07:39 UTC
# mode: r
+technical_keywords <- keywords

# time: 2022-06-03 08:07:39 UTC
# mode: r
+technical_keywords 

# time: 2022-06-03 08:07:41 UTC
# mode: r
+technical_keywords <- unique(technical_keywords)

# time: 2022-06-03 08:07:44 UTC
# mode: r
+for (w in technical_keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-06-03 08:07:52 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-03 08:07:53 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-03 08:08:19 UTC
# mode: r
+    wordnet::getSynonyms("gear")

# time: 2022-06-03 08:08:30 UTC
# mode: r
+technical_keywords <- keywords

# time: 2022-06-03 08:08:30 UTC
# mode: r
+technical_keywords <- unique(technical_keywords)

# time: 2022-06-03 08:08:31 UTC
# mode: r
+for (w in technical_keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-06-03 08:09:45 UTC
# mode: r
+reference_text

# time: 2022-06-03 08:09:58 UTC
# mode: r
+technical <- tibble(text = reference_text) %>%
+    mutate(text = prefilter_text(text)) %>%
+        mutate(doc = "technical")

# time: 2022-06-03 08:10:01 UTC
# mode: r
+technical_for_mallet <- tibble(text = reference_text, id = 2)

# time: 2022-06-03 08:10:04 UTC
# mode: r
+technical_for_mallet 

# time: 2022-06-03 08:10:09 UTC
# mode: r
+saveRDS(technical_for_mallet, "mallet_techs.RDS")

# time: 2022-06-03 08:10:10 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-03 08:10:13 UTC
# mode: r
+keywords <- c("malfunction", "error", "fault", "faulty", "erronous", "warranty", "repair", "damage", "harm", "misuse", "injury", "wound", "stop", "error", "computer bug", "stopped working", "issue", "warrant", "guarantee", "damaged", "K.O.", "stuck", "beep", "replace", "replacement")

# time: 2022-06-03 08:10:26 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='issue', 'word'] %>% unlist() %>% unname())

# time: 2022-06-03 08:10:29 UTC
# mode: r
+keywords

# time: 2022-06-03 08:10:48 UTC
# mode: r
+faults_keywords <- keywords

# time: 2022-06-03 08:10:49 UTC
# mode: r
+for (w in faults_keywords) {
+    text <- wiki_define(w, 10000)
+    reference_text <- paste0(reference_text, " ", text)
+}

# time: 2022-06-03 08:11:10 UTC
# mode: r
+nchar(refere)

# time: 2022-06-03 08:11:15 UTC
# mode: r
+nchar(reference_text)

# time: 2022-06-03 08:11:21 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 08:11:38 UTC
# mode: r
+library(mallet)

# time: 2022-06-03 08:11:39 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-06-03 08:11:40 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-06-03 08:11:41 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-06-03 08:11:42 UTC
# mode: r
+saveRDS(docs_for_mallet, "LDA_text.RDS")

# time: 2022-06-03 08:11:44 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-06-03 08:11:45 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-06-03 08:11:48 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-06-03 08:11:51 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-06-03 08:12:37 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-06-03 08:12:38 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-06-03 08:12:38 UTC
# mode: r
+topic_model$setAlphaOptimization(100, 200)

# time: 2022-06-03 08:12:40 UTC
# mode: r
+topic_model$train(5000)

# time: 2022-06-03 08:14:23 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 08:14:24 UTC
# mode: r
+doc_topics

# time: 2022-06-03 08:14:24 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-03 08:14:24 UTC
# mode: r
+likelihoodTable

# time: 2022-06-03 08:15:12 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-06-03 08:15:13 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-06-03 08:15:13 UTC
# mode: r
+topic_model$setAlphaOptimization(250, 500)

# time: 2022-06-03 08:15:14 UTC
# mode: r
+topic_model$train(5000)

# time: 2022-06-03 08:15:44 UTC
# mode: r
+saveRDS(topic_model, "BSH_LDA_topic_model.RDS")

# time: 2022-06-03 08:15:45 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 08:15:45 UTC
# mode: r
+doc_topics

# time: 2022-06-03 08:15:45 UTC
# mode: r
+likelihoodTable <- tibble(doc_topics)

# time: 2022-06-03 08:15:46 UTC
# mode: r
+likelihoodTable

# time: 2022-06-03 08:17:53 UTC
# mode: r
+N <- 100

# time: 2022-06-03 08:17:54 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 08:18:02 UTC
# mode: r
+topic_words

# time: 2022-06-03 08:18:08 UTC
# mode: r
+likelihoodTable\

# time: 2022-06-03 08:18:10 UTC
# mode: r
+likelihoodTable

# time: 2022-06-03 08:18:35 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 08:18:35 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 1), ], N)

# time: 2022-06-03 08:18:36 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 2), ], N)

# time: 2022-06-03 08:18:36 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 3), ], N)

# time: 2022-06-03 08:18:40 UTC
# mode: r
+get_max_likelihood <- function(likelihoodTable, rowIDX) {
+    row <- likelihoodTable[rowIDX, ] %>% unlist()
+    seq(1, length(row))[row == max(row)]
+}

# time: 2022-06-03 08:18:40 UTC
# mode: r
+N <- 100

# time: 2022-06-03 08:18:40 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 08:18:41 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 1), ], N)

# time: 2022-06-03 08:18:41 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 2), ], N)

# time: 2022-06-03 08:18:41 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 3), ], N)

# time: 2022-06-03 08:18:42 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-06-03 08:18:47 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 08:23:24 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 08:23:36 UTC
# mode: r
+tibble(topic_words)

# time: 2022-06-03 08:24:05 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-06-03 08:24:08 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 08:24:09 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 1), ], N)

# time: 2022-06-03 08:24:09 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 2), ], N)

# time: 2022-06-03 08:24:10 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 3), ], N)

# time: 2022-06-03 08:24:13 UTC
# mode: r
+bsh

# time: 2022-06-03 08:24:17 UTC
# mode: r
+tech

# time: 2022-06-03 08:24:32 UTC
# mode: r
+topic_words[get_max_likelihood(likelihoodTable, 1), ]

# time: 2022-06-03 08:24:46 UTC
# mode: r
+get_max_likelihood(likelihoodTable, 1), ]

# time: 2022-06-03 09:22:31 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:23:05 UTC
# mode: r
+docs_for_mallet <- readRDS("LDA_text.RDS")

# time: 2022-06-03 09:23:06 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-06-03 09:23:07 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-06-03 09:23:08 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-06-03 09:23:09 UTC
# mode: r
+library(mallet)

# time: 2022-06-03 09:23:11 UTC
# mode: r
+docs_for_mallet <- readRDS("LDA_text.RDS")

# time: 2022-06-03 09:23:23 UTC
# mode: r
+topic_model <- readRDS("BSH_LDA_topic_model.RDS")

# time: 2022-06-03 09:23:41 UTC
# mode: r
+ docs_for_mallet

# time: 2022-06-03 09:23:49 UTC
# mode: r
+reddit_words <- docs_for_mallet[1,]

# time: 2022-06-03 09:24:05 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 09:24:11 UTC
# mode: r
+topic_model <- readRDS("BSH_LDA_topic_model.RDS")

# time: 2022-06-03 09:24:13 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 09:24:16 UTC
# mode: r
+N <- 400

# time: 2022-06-03 09:24:16 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 09:24:30 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:24:33 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-03 09:24:33 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-03 09:24:49 UTC
# mode: r
+docs_for_mallet <- readRDS("LDA_text.RDS")

# time: 2022-06-03 09:24:56 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:25:37 UTC
# mode: r
+library(mallet)

# time: 2022-06-03 09:25:42 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:28:13 UTC
# mode: r
+tibble(likelihoodTable)

# time: 2022-06-03 09:28:20 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:28:29 UTC
# mode: r
+docs_for_mallet <- readRDS("LDA_text.RDS")

# time: 2022-06-03 09:28:31 UTC
# mode: r
+write_csv(stop_words[, 1], "stopwords.csv")

# time: 2022-06-03 09:28:31 UTC
# mode: r
+mallet_instances <- mallet.import(
+    id.array = as.character(docs_for_mallet$id),
+    text.array = as.character(docs_for_mallet$text),
+    "stopwords.csv",
+    FALSE
+)

# time: 2022-06-03 09:28:32 UTC
# mode: r
+topic_model <- MalletLDA(num.topics = 3)

# time: 2022-06-03 09:28:32 UTC
# mode: r
+topic_model$loadDocuments(mallet_instances)

# time: 2022-06-03 09:28:32 UTC
# mode: r
+topic_model$setAlphaOptimization(250, 500)

# time: 2022-06-03 09:28:33 UTC
# mode: r
+topic_model$train(5000)

# time: 2022-06-03 09:28:57 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 09:28:59 UTC
# mode: r
+likelihoodTable <- data.frame(tibble(doc_topics))

# time: 2022-06-03 09:29:00 UTC
# mode: r
+row.names(likelihoodTable) <- c("bsh", "tech", "faults")

# time: 2022-06-03 09:29:02 UTC
# mode: r
+tibble(likelihoodTable)

# time: 2022-06-03 09:29:40 UTC
# mode: r
+get_max_likelihood <- function(likelihoodTable, rowIDX) {
+    row <- likelihoodTable[rowIDX, ] %>% unlist()
+    seq(1, length(row))[row == max(row)]
+}

# time: 2022-06-03 09:29:41 UTC
# mode: r
+N <- 400

# time: 2022-06-03 09:29:41 UTC
# mode: r
+topic_words <- mallet.topic.words(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 09:29:41 UTC
# mode: r
+bsh <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 1), ], N)

# time: 2022-06-03 09:29:42 UTC
# mode: r
+tech <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 2), ], N)

# time: 2022-06-03 09:29:42 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 3), ], N)

# time: 2022-06-03 09:29:44 UTC
# mode: r
+reddit_words <- unnest_tokens(reddit_for_mallet, word, text) %>% filter(!word %in% stop_words$word)

# time: 2022-06-03 09:29:50 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:31:59 UTC
# mode: r
+sentence = 'I have a technical issue'

# time: 2022-06-03 09:32:01 UTC
# mode: r
+    strsplit(sentence)

# time: 2022-06-03 09:32:06 UTC
# mode: r
+    str.split(sentence)

# time: 2022-06-03 09:32:12 UTC
# mode: r
+    split(sentence)

# time: 2022-06-03 09:32:21 UTC
# mode: r
+    strsplit(sentence, '')

# time: 2022-06-03 09:32:24 UTC
# mode: r
+    strsplit(sentence, ' ')

# time: 2022-06-03 09:32:35 UTC
# mode: r
+    unlist(strsplit(sentence, ' '))

# time: 2022-06-03 09:33:10 UTC
# mode: r
+word_list=issue_words

# time: 2022-06-03 09:33:11 UTC
# mode: r
+    sum(unlist(strsplit(sentence, ' ')) %in% word_list)

# time: 2022-06-03 09:33:13 UTC
# mode: r
+ word_list

# time: 2022-06-03 09:33:52 UTC
# mode: r
+    length(intersection(unlist(strsplit(sentence, ' ')), word_list))

# time: 2022-06-03 09:35:18 UTC
# mode: r
+    unlist(strsplit(sentence, ' ')) %in% word_list

# time: 2022-06-03 09:35:43 UTC
# mode: r
+    sum(unlist(strsplit(sentence, ' ')) %in% word_list) / length(strsplit(sentence, " ")[1])

# time: 2022-06-03 09:35:48 UTC
# mode: r
+    sum(unlist(strsplit(sentence, ' ')) %in% word_list) / length(strsplit(sentence, " "))

# time: 2022-06-03 09:35:55 UTC
# mode: r
+    sum(unlist(strsplit(sentence, ' ')) %in% word_list)) / length(strsplit(sentence, " ")

# time: 2022-06-03 09:37:00 UTC
# mode: r
+    tokenized <- unlist(strsplit(sentece, " "))

# time: 2022-06-03 09:37:04 UTC
# mode: r
+    tokenized <- unlist(strsplit(sentence, " "))

# time: 2022-06-03 09:37:21 UTC
# mode: r
+    sum(tokenized %in% word_list) / length(tokenized)

# time: 2022-06-03 09:37:23 UTC
# mode: r
+get_ratio <- function(text, word_list) {
+    tokenized <- unlist(strsplit(sentence, " "))
+    sum(tokenized %in% word_list) / length(tokenized)
+}

# time: 2022-06-03 09:37:31 UTC
# mode: r
+get_ratio(sentence, word_list)

# time: 2022-06-03 09:40:27 UTC
# mode: r
+reddit_data 

# time: 2022-06-03 09:42:27 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:42:29 UTC
# mode: r
+reddit_issue_rates 

# time: 2022-06-03 09:42:54 UTC
# mode: r
+plot(reddit_issue_rates$issue_rate)

# time: 2022-06-03 09:46:05 UTC
# mode: r
+ reddit_data

# time: 2022-06-03 09:46:09 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:48:17 UTC
# mode: r
+reddit_issue_rates 

# time: 2022-06-03 09:49:49 UTC
# mode: r
+rates <- lapply(reddit_data$text, function(x){get_ratio(x, word_list = issue_words)})

# time: 2022-06-03 09:49:54 UTC
# mode: r
+rates 

# time: 2022-06-03 09:50:04 UTC
# mode: r
+get_ratio <- function(text, word_list) {
+    tokenized <- unlist(strsplit(text, " "))
+    sum(tokenized %in% word_list) / length(tokenized)
+}

# time: 2022-06-03 09:50:06 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:50:21 UTC
# mode: r
+reddget_ratio <- function(text, word_list) {
+    tokenized <- unlist(strsplit(text, " "))
+    sum(tokenized %in% word_list) / length(tokenized)
+}

# time: 2022-06-03 09:50:23 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:50:29 UTC
# mode: r
+reddit_issue_rates

# time: 2022-06-03 09:51:09 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:51:13 UTC
# mode: r
+reddit_issue_rates

# time: 2022-06-03 09:51:43 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:51:47 UTC
# mode: r
+reddit_issue_rates

# time: 2022-06-03 09:57:40 UTC
# mode: r
+issue_tokens <- paste0(issue_words, collapse=", ")

# time: 2022-06-03 09:57:45 UTC
# mode: r
+issue_tokens

# time: 2022-06-03 09:58:05 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:58:14 UTC
# mode: r
+issue_words <- reddit_words %>%
+    filter(word %in% faults$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>% filter(N  >=20) %>% dplyr::select(word) %>% unlist() %>% unname()

# time: 2022-06-03 09:58:16 UTC
# mode: r
+issue_tokens <- paste0(issue_words, collapse=", ")

# time: 2022-06-03 09:58:22 UTC
# mode: r
+ssNvimR.selection()

# time: 2022-06-03 09:58:25 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:58:28 UTC
# mode: r
+reddit_issue_rates 

# time: 2022-06-03 09:58:36 UTC
# mode: r
+issue_words <- reddit_words %>%
+    filter(word %in% faults$words) %>%
+        group_by(word) %>%
+            summarize(N = n()) %>% filter(N  >=20) %>% dplyr::select(word) %>% unlist() %>% unname()

# time: 2022-06-03 09:58:42 UTC
# mode: r
+issue_words

# time: 2022-06-03 09:58:47 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 09:58:51 UTC
# mode: r
+issue_words

# time: 2022-06-03 09:59:03 UTC
# mode: r
+faults <- mallet.top.words(topic_model, topic_words[get_max_likelihood(likelihoodTable, 3), ], N)

# time: 2022-06-03 09:59:06 UTC
# mode: r
+faults

# time: 2022-06-03 10:05:08 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 10:05:10 UTC
# mode: r
+get_ratio <- function(text, word_list) {
+    tokenized <- unlist(strsplit(text, " "))
+    sum(tokenized %in% word_list) / length(tokenized)
+}

# time: 2022-06-03 10:05:13 UTC
# mode: r
+reddit_issue_rates <- reddit_data %>% 
+    rowwise() %>% 
+        mutate(issue_rate = get_ratio(text, issue_words)) %>% 
+            arrange(desc(issue_rate)) %>% 
+                dplyr::select(text, issue_rate)

# time: 2022-06-03 10:05:20 UTC
# mode: r
+reddit_issue_rates

# time: 2022-06-03 10:05:33 UTC
# mode: r
+issue_words

# time: 2022-06-03 11:46:18 UTC
# mode: r
+issue_tokens <- paste0(issue_words, collapse=", ")

# time: 2022-06-03 11:46:19 UTC
# mode: r
+issue_tokens 

# time: 2022-06-03 11:46:47 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 11:46:57 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-03 11:46:57 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-03 11:47:12 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 11:51:27 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-03 11:51:27 UTC
# mode: r
+doc_topics

# time: 2022-06-03 11:51:28 UTC
# mode: r
+row.names(likelihoodTable) <- c("bsh", "tech", "faults")

# time: 2022-06-03 11:51:28 UTC
# mode: r
+tibble(likelihoodTable)

# time: 2022-06-03 11:51:31 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 11:52:17 UTC
# mode: r
+get_max_likelihood <- function(likelihoodTable, rowIDX) {
+    row <- likelihoodTable[rowIDX, ] %>% unlist()
+    seq(1, length(row))[row == max(row)]
+}

# time: 2022-06-03 11:52:20 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 11:54:12 UTC
# mode: r
+issue_words

# time: 2022-06-03 11:54:20 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 11:54:24 UTC
# mode: r
+issue_words

# time: 2022-06-03 11:54:34 UTC
# mode: r
+issue_tokens <- paste0(issue_words, collapse=", ")

# time: 2022-06-03 11:54:37 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 11:54:39 UTC
# mode: r
+reddit_issue_rates 

# time: 2022-06-03 11:59:16 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text,token='ngrams')

# time: 2022-06-03 11:59:21 UTC
# mode: r
+tokens 

# time: 2022-06-03 11:59:31 UTC
# mode: r
+?unnest_tokens

# time: 2022-06-03 11:59:56 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text,token='ngrams', n=5)

# time: 2022-06-03 12:00:01 UTC
# mode: r
+tokens 

# time: 2022-06-03 12:00:12 UTC
# mode: r
+ngrams <- reddit_data %>% unnest_tokens(word, text,token='ngrams', n=5)

# time: 2022-06-03 12:01:10 UTC
# mode: r
+ngrams

# time: 2022-06-03 12:01:31 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 12:02:12 UTC
# mode: r
+ngrams <- reddit_data %>% group_by(text) %>%  unnest_tokens(word, text,token='ngrams', n=5)

# time: 2022-06-03 12:02:17 UTC
# mode: r
+ngrams

# time: 2022-06-03 12:02:21 UTC
# mode: r
+ngrams <- reddit_data %>% group_by(text) %>%  unnest_tokens(word, text,token='ngrams', n=5)

# time: 2022-06-03 12:02:27 UTC
# mode: r
+ngrams

# time: 2022-06-03 12:02:48 UTC
# mode: r
+ngrams <- reddit_data %>% mutate(original=text) %>%  unnest_tokens(word, text,token='ngrams', n=5)

# time: 2022-06-03 12:02:54 UTC
# mode: r
+ngrams

# time: 2022-06-03 12:03:09 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 12:04:34 UTC
# mode: r
+issue_words 

# time: 2022-06-03 12:04:55 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 12:05:01 UTC
# mode: r
+issue_words

# time: 2022-06-03 12:05:13 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 12:05:16 UTC
# mode: r
+issue_words 

# time: 2022-06-03 12:05:23 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 12:06:36 UTC
# mode: r
+ngram_DF 

# time: 2022-06-03 12:06:50 UTC
# mode: r
+ngram_DF$w

# time: 2022-06-03 12:07:04 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 12:07:07 UTC
# mode: r
+ngram_DF 

# time: 2022-06-03 12:07:36 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 12:17:25 UTC
# mode: r
+indexed_ngrams

# time: 2022-06-03 12:18:02 UTC
# mode: r
+filtered_ngrams <- indexed_ngrams %>% filter(ngram_ID %in% extracted_ngrams$ngram_ID)

# time: 2022-06-03 12:18:08 UTC
# mode: r
+filtered_ngrams

# time: 2022-06-03 12:18:52 UTC
# mode: r
+issue_words_found <- extracted_ngrams

# time: 2022-06-03 12:18:53 UTC
# mode: r
+issue_words_found 

# time: 2022-06-03 12:22:07 UTC
# mode: r
+filtered_ngrams 

# time: 2022-06-03 12:22:28 UTC
# mode: r
+filtered_ngrams %>% unnest_tokens(w, word)

# time: 2022-06-03 12:22:57 UTC
# mode: r
+filtered_ngrams %>% unnest_tokens(w, word) %>% mutate(issue_word = w %in% issue_words)

# time: 2022-06-03 12:23:35 UTC
# mode: r
+filtered_ngrams %>% unnest_tokens(w, word) %>% mutate(issue_word = w %in% issue_words) %>% filter(issue_word)

# time: 2022-06-03 12:23:48 UTC
# mode: r
+filtered_ngrams %>% unnest_tokens(w, word) %>% mutate(issue_word = w %in% issue_words) %>% filter(issue_word) %>% left_join(filtered_ngrams)

# time: 2022-06-03 12:24:03 UTC
# mode: r
+issue_words <- filtered_ngrams %>% unnest_tokens(w, word) %>% mutate(issue_word = w %in% issue_words) %>% filter(issue_word) %>% left_join(filtered_ngrams)

# time: 2022-06-03 12:24:20 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 12:24:24 UTC
# mode: r
+issue_word_mapping 

# time: 2022-06-03 12:24:37 UTC
# mode: r
+issue_words 

# time: 2022-06-03 12:24:46 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 12:25:09 UTC
# mode: r
+issue_word_strengths 

# time: 2022-06-03 12:25:14 UTC
# mode: r
+issue_word_mapping 

# time: 2022-06-03 12:25:58 UTC
# mode: r
+names(issue_word_mapping) <- c("text", "ngram_ID", "word", "issue_word", "ngram")

# time: 2022-06-03 12:26:13 UTC
# mode: r
+issue_word_mapping %>% left_join(issue_word_strengths)

# time: 2022-06-03 13:14:29 UTC
# mode: r
+ngrams <- reddit_data %>% mutate(original=text) %>%  unnest_tokens(word, text,token='ngrams', n=3)

# time: 2022-06-03 13:14:42 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 13:14:48 UTC
# mode: r
+issue_word_mapping 

# time: 2022-06-03 13:15:16 UTC
# mode: r
+issue_word_mapping %>% group_by(word, ngram) %>% summarize(N=n())

# time: 2022-06-03 13:15:27 UTC
# mode: r
+plot_data <- issue_word_mapping %>% group_by(word, ngram) %>% summarize(N=n())

# time: 2022-06-03 13:15:44 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(plot_data)

# time: 2022-06-03 13:15:52 UTC
# mode: r
+plot(gr)

# time: 2022-06-03 13:16:08 UTC
# mode: r
+E(gr)$strength <- vocab_data$plot_data$N

# time: 2022-06-03 13:16:18 UTC
# mode: r
+E(gr)$strength <- plot_data$N

# time: 2022-06-03 13:16:23 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 13:16:44 UTC
# mode: r
+plot_data <- issue_word_mapping %>% group_by(word, ngram) %>% summarize(N=n()) %>% filter(N > 1)

# time: 2022-06-03 13:16:45 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(plot_data)

# time: 2022-06-03 13:16:46 UTC
# mode: r
+E(gr)$strength <- plot_data$N

# time: 2022-06-03 13:16:48 UTC
# mode: r
+ggraph(gr, layout = "fr") +
+    geom_edge_link(aes(edge_alpha = strength), show.legend = FALSE, color = "gray80") +
+        geom_node_point(color = "black", size = 3) +
+            geom_node_point(color = "skyblue", size = 2) +
+                geom_node_text(aes(label = name, color = text_aes, fontface = face), nudge_y = -0.5, show.legend = FALSE, family = "Helvetica Neue", size = 5) +
+                    scale_color_manual(values = c("grey55", "black")) +
+                        theme(
+        panel.background = element_rect(fill = "white"),
+        text = element_text(family = "Helvetica Neue", size = 10)
+    )

# time: 2022-06-03 13:17:07 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 13:17:18 UTC
# mode: r
+plot_data <- issue_word_mapping %>% group_by(word, ngram) %>% summarize(N=n()) %>% filter(N > 1)

# time: 2022-06-03 13:17:19 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(plot_data)

# time: 2022-06-03 13:17:19 UTC
# mode: r
+E(gr)$strength <- plot_data$N

# time: 2022-06-03 13:17:21 UTC
# mode: r
+plot_data <- issue_word_mapping %>% group_by(word, ngram) %>% summarize(N=n()) %>% filter(N > 1)

# time: 2022-06-03 13:17:23 UTC
# mode: r
+plot_data 

# time: 2022-06-03 13:17:26 UTC
# mode: r
+plot_data <- issue_word_mapping %>% group_by(word, ngram) %>% summarize(N=n()) %>% filter(N > 2)

# time: 2022-06-03 13:17:28 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 13:18:35 UTC
# mode: r
+V(gr)$name

# time: 2022-06-03 13:19:02 UTC
# mode: r
+strsplit(V(gr)$name, " ")

# time: 2022-06-03 13:19:26 UTC
# mode: r
+length(strsplit(V(gr)$name, " ")) > 1

# time: 2022-06-03 13:19:40 UTC
# mode: r
+length(unlist(strsplit(V(gr)$name, " "))) > 1

# time: 2022-06-03 13:19:44 UTC
# mode: r
+length(unlist(strsplit(V(gr)$name, " ")))

# time: 2022-06-03 13:19:50 UTC
# mode: r
+unlist(strsplit(V(gr)$name, " "))

# time: 2022-06-03 13:20:22 UTC
# mode: r
+unlist(lapply(V(gr)$name, function(x){strsplit(x, " ")}))

# time: 2022-06-03 13:20:50 UTC
# mode: r
+unlist(lapply(V(gr)$name, function(x){ length(unlist(strsplit(x, " ")))  > 1}))

# time: 2022-06-03 13:21:12 UTC
# mode: r
+text_aes <- unlist(lapply(V(gr)$name, function(x){ length(unlist(strsplit(x, " ")))  == 1}))

# time: 2022-06-03 13:21:30 UTC
# mode: r
+text_aes[text_aes]

# time: 2022-06-03 13:21:44 UTC
# mode: r
+text_aes[text_aes] <- "plain"

# time: 2022-06-03 13:21:46 UTC
# mode: r
+text_aes

# time: 2022-06-03 13:21:55 UTC
# mode: r
+text_aes[!text_aes] <- "bold"

# time: 2022-06-03 13:22:30 UTC
# mode: r
+text_aes <- unlist(lapply(V(gr)$name, function(x){ length(unlist(strsplit(x, " ")))  == 1}))

# time: 2022-06-03 13:22:49 UTC
# mode: r
+text_aes_v <- rep("", length(text_aes))

# time: 2022-06-03 13:22:54 UTC
# mode: r
+text_aes_v[text_aes] <- "plain"

# time: 2022-06-03 13:22:57 UTC
# mode: r
+text_aes_v[!text_aes] <- "bold"

# time: 2022-06-03 13:22:58 UTC
# mode: r
+text_aes_v

# time: 2022-06-03 13:23:11 UTC
# mode: r
+V(gr)$text_aes <- text_aes_v

# time: 2022-06-03 13:23:27 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 14:24:23 UTC
# mode: r
+tibble(likelihoodTable)

# time: 2022-06-03 14:24:26 UTC
# mode: r
+row.names(likelihoodTable) <- c("bsh", "tech", "faults")

# time: 2022-06-03 14:24:27 UTC
# mode: r
+tibble(likelihoodTable)

# time: 2022-06-03 14:31:39 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-03 14:31:42 UTC
# mode: r
+token_list 

# time: 2022-06-03 14:35:23 UTC
# mode: r
+token_list <- read_csv("data/bsh_tokens.csv")

# time: 2022-06-03 14:35:24 UTC
# mode: r
+token_list 

# time: 2022-06-03 14:36:59 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-04 19:19:43 UTC
# mode: r
+source("src/DBDA2E-utilities.R")  # Load definitions of graphics functions etc.

# time: 2022-06-04 19:19:44 UTC
# mode: r
+source("src/BernBeta.R")          # Load the definition of the BernBeta function

# time: 2022-06-04 19:19:46 UTC
# mode: r
+source("src/DBDA2E-utilities.R")  # Load definitions of graphics functions etc.

# time: 2022-06-04 19:19:57 UTC
# mode: r
+getwd()

# time: 2022-06-04 19:20:02 UTC
# mode: r
+source("DBDA2E-utilities.R")  # Load definitions of graphics functions etc.

# time: 2022-06-04 19:20:05 UTC
# mode: r
+source("BernBeta.R")          # Load the definition of the BernBeta function

# time: 2022-06-04 19:20:14 UTC
# mode: r
+t <- 0.75 # Specify the prior MODE.

# time: 2022-06-04 19:20:15 UTC
# mode: r
+n <- 25 # Specify the effective prior sample size.

# time: 2022-06-04 19:20:16 UTC
# mode: r
+a <- t * (n - 2) + 1 # Convert to beta shape parameter a.

# time: 2022-06-04 19:20:16 UTC
# mode: r
+b <- (1 - t) * (n - 2) + 1 # Convert to beta shape parameter b.

# time: 2022-06-04 19:20:17 UTC
# mode: r
+Prior <- c(a, b) # Specify Prior as vector with the two shape parameters.

# time: 2022-06-04 19:20:37 UTC
# mode: r
+Prior

# time: 2022-06-04 19:20:40 UTC
# mode: r
+N <- 20 # The total number of flips.

# time: 2022-06-04 19:20:41 UTC
# mode: r
+z <- 17 # The number of heads.

# time: 2022-06-04 19:20:42 UTC
# mode: r
+Data <- c(rep(0, N - z), rep(1, z)) # Convert N and z into vector of 0's and 1's.

# time: 2022-06-04 19:20:45 UTC
# mode: r
+Data

# time: 2022-06-04 19:20:49 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-04 19:28:16 UTC
# mode: r
+source("src/BernBeta.R")

# time: 2022-06-04 19:29:12 UTC
# mode: r
+str(BernBeta)

# time: 2022-06-04 19:29:31 UTC
# mode: r
+BernBeta(4,4)

# time: 2022-06-04 19:30:19 UTC
# mode: r
+source("src/DBDA2E-utilities.R")

# time: 2022-06-04 19:31:13 UTC
# mode: r
+str(gammaShRaFromModeSD)

# time: 2022-06-04 19:31:16 UTC
# mode: r
+str(have)

# time: 2022-06-04 19:31:22 UTC
# mode: r
+source("src/BernBeta.R")

# time: 2022-06-04 19:31:23 UTC
# mode: r
+priorBeta <- pr

# time: 2022-06-04 19:32:24 UTC
# mode: r
+dbeta(x,4,4)

# time: 2022-06-04 19:32:28 UTC
# mode: r
+x <- 1

# time: 2022-06-04 19:32:28 UTC
# mode: r
+dbeta(x,4,4)

# time: 2022-06-04 19:32:56 UTC
# mode: r
+BernBeta

# time: 2022-06-04 19:34:23 UTC
# mode: r
+Data <- c(rep(z,1))

# time: 2022-06-04 19:34:24 UTC
# mode: r
+z <- 1

# time: 2022-06-04 19:34:25 UTC
# mode: r
+Data <- c(rep(z,1))

# time: 2022-06-04 19:34:32 UTC
# mode: r
+Data

# time: 2022-06-04 19:34:51 UTC
# mode: r
+BernBeta(c(4,4), Data)

# time: 2022-06-04 19:35:03 UTC
# mode: r
+posterior <- BernBeta(c(4,4), Data)

# time: 2022-06-04 19:35:54 UTC
# mode: r
+posteror2 <- BernBeta(posterior, Data)

# time: 2022-06-04 19:36:05 UTC
# mode: r
+posterior2 <- BernBeta(posterior, Data)

# time: 2022-06-04 19:36:31 UTC
# mode: r
+posterior2 <- BernBeta(posterior, c(0))

# time: 2022-06-04 19:36:42 UTC
# mode: r
+Data <- c(rep(z,1))

# time: 2022-06-04 19:36:43 UTC
# mode: r
+source("src/BernBeta.R")

# time: 2022-06-04 19:36:44 UTC
# mode: r
+N <- 1

# time: 2022-06-04 19:36:44 UTC
# mode: r
+z <- 1

# time: 2022-06-04 19:36:45 UTC
# mode: r
+Data <- c(rep(z,1))

# time: 2022-06-04 19:36:45 UTC
# mode: r
+posterior <- BernBeta(c(4,4), Data)

# time: 2022-06-04 19:36:48 UTC
# mode: r
+posterior3 <- BernBeta(posterior2, c(0))

# time: 2022-06-04 19:36:52 UTC
# mode: r
+posterior <- BernBeta(c(4,4), Data)

# time: 2022-06-04 19:36:55 UTC
# mode: r
+posterior2 <- BernBeta(posterior, Data)

# time: 2022-06-04 19:36:57 UTC
# mode: r
+posterior3 <- BernBeta(posterior2, c(0))

# time: 2022-06-04 19:37:49 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-04 19:38:50 UTC
# mode: r
+HHT

# time: 2022-06-04 19:39:01 UTC
# mode: r
+HHT == TTH

# time: 2022-06-04 19:39:12 UTC
# mode: r
+all.all.equal(HHT, TTH)

# time: 2022-06-04 19:39:17 UTC
# mode: r
+all.equal(HHT, TTH)

# time: 2022-06-04 19:39:23 UTC
# mode: r
+HHT 

# time: 2022-06-04 19:39:25 UTC
# mode: r
+TTH

# time: 2022-06-04 19:39:53 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-04 19:44:37 UTC
# mode: r
+Data <- c(rep(1, z), rep(0, N-z))

# time: 2022-06-04 19:44:40 UTC
# mode: r
+Data

# time: 2022-06-04 19:44:43 UTC
# mode: r
+Data <- c(rep(1, z), rep(0, N-z))

# time: 2022-06-04 19:44:45 UTC
# mode: r
+Data

# time: 2022-06-04 19:44:51 UTC
# mode: r
+N <- 100

# time: 2022-06-04 19:44:51 UTC
# mode: r
+z <- 58

# time: 2022-06-04 19:44:54 UTC
# mode: r
+rep(1, z)

# time: 2022-06-04 19:44:58 UTC
# mode: r
+rep(0, N-z)

# time: 2022-06-04 19:45:01 UTC
# mode: r
+Data <- c(rep(1, z), rep(0, N-z))

# time: 2022-06-04 19:45:05 UTC
# mode: r
+Data

# time: 2022-06-04 19:45:08 UTC
# mode: r
+posterior <- BernBeta(c(50,50))

# time: 2022-06-04 19:45:11 UTC
# mode: r
+posterior <- BernBeta(c(50,50), Data)

# time: 2022-06-04 19:45:36 UTC
# mode: r
+posterior

# time: 2022-06-04 19:46:02 UTC
# mode: r
+posterior <- BernBeta(c(50,50), Data, showHDI = TRUE)

# time: 2022-06-04 19:46:38 UTC
# mode: r
+posterior <- BernBeta(c(1,1), Data, showHDI = TRUE)

# time: 2022-06-04 19:48:28 UTC
# mode: r
+z2 <- 57

# time: 2022-06-04 19:48:28 UTC
# mode: r
+Data2 <- c(rep(1, z2), rep(0, N-z2))

# time: 2022-06-04 19:48:36 UTC
# mode: r
+posterior2 <- BernBeta(posterior, Data2, showHDI = TRUE)

# time: 2022-06-04 19:52:53 UTC
# mode: r
+make_data <- function(z, N){
+    c(rep(1, z), rep(0, N-z))
+}

# time: 2022-06-04 19:53:05 UTC
# mode: r
+make_data(z, N)

# time: 2022-06-04 19:53:11 UTC
# mode: r
+posterior <- BernBeta(c(1,1), make_data(z, N))

# time: 2022-06-04 19:53:17 UTC
# mode: r
+N <- 50

# time: 2022-06-04 19:53:17 UTC
# mode: r
+z <- 40

# time: 2022-06-04 19:53:22 UTC
# mode: r
+posterior <- BernBeta(c(1,1), make_data(z, N), showHDI=TRUE)

# time: 2022-06-04 19:54:16 UTC
# mode: r
+z <- 15

# time: 2022-06-04 19:54:16 UTC
# mode: r
+posterior_test2 <- BernBeta(c(1,1), make_data(z, N), showHDI=TRUE)

# time: 2022-06-04 20:00:24 UTC
# mode: r
+N <- 5

# time: 2022-06-04 20:00:24 UTC
# mode: r
+z <- 4

# time: 2022-06-04 20:00:25 UTC
# mode: r
+Data <- make_data(z,N)

# time: 2022-06-04 20:00:27 UTC
# mode: r
+Data

# time: 2022-06-04 20:00:49 UTC
# mode: r
+posterior <- BernBeta(c(0.1, 0.1), Data)

# time: 2022-06-04 20:01:04 UTC
# mode: r
+posterior <- BernBeta(c(0.1, 0.1), Data, showHDI = TRUE)

# time: 2022-06-04 20:02:09 UTC
# mode: r
+posterior <- BernBeta(c(1,1)/100, Data, showHDI = TRUE)

# time: 2022-06-04 20:02:34 UTC
# mode: r
+posterior <- BernBeta(c(1,1)/100, Data, showHDI = TRUE, showCentTrend="Mode")

# time: 2022-06-04 20:02:54 UTC
# mode: r
+N <- 5

# time: 2022-06-04 20:02:54 UTC
# mode: r
+z <- 4

# time: 2022-06-04 20:02:54 UTC
# mode: r
+Data <- make_data(z,N)

# time: 2022-06-04 20:02:55 UTC
# mode: r
+posterior <- BernBeta(c(1,1)/100, Data, showHDI = TRUE, showCentTrend="Mode")

# time: 2022-06-04 20:03:14 UTC
# mode: r
+N <- 5

# time: 2022-06-04 20:03:14 UTC
# mode: r
+z <- 4

# time: 2022-06-04 20:03:15 UTC
# mode: r
+Data <- make_data(z,N)

# time: 2022-06-04 20:03:15 UTC
# mode: r
+posterior <- BernBeta(c(1,1)/100, Data, showHDI = TRUE, showCentTend="Mode")

# time: 2022-06-04 20:05:17 UTC
# mode: r
+Data <- make_data(z, N)

# time: 2022-06-04 20:05:21 UTC
# mode: r
+N <- 10

# time: 2022-06-04 20:05:21 UTC
# mode: r
+z <- 9

# time: 2022-06-04 20:05:21 UTC
# mode: r
+Data <- make_data(z, N)

# time: 2022-06-04 20:05:23 UTC
# mode: r
+DAta

# time: 2022-06-04 20:05:25 UTC
# mode: r
+Data

# time: 2022-06-04 20:06:11 UTC
# mode: r
+posterior <- BernBeta(c(1,1), Data, showHDI = TRUE)

# time: 2022-06-04 20:07:33 UTC
# mode: r
+posterior_magic <- BernBeta(c(1,1)/100, Data, showHDI = TRUE)

# time: 2022-06-04 20:08:03 UTC
# mode: r
+posterior <- BernBeta(c(1,1)*500, Data, showHDI = TRUE)

# time: 2022-06-04 20:08:45 UTC
# mode: r
+posterior <- BernBeta(c(1,1)*500, Data, showHDI = TRUE, showCentTend = "Mean")

# time: 2022-06-04 20:09:29 UTC
# mode: r
+posterior_magic <- BernBeta(c(1,1)/100, Data, showHDI = TRUE, showCentTend = "Mean")

# time: 2022-06-05 20:00:03 UTC
# mode: r
+bernoulli <- function(y = 1, N = 1) {
+    y <- sum(y)
+    theta <- y / N
+    theta^(y) * (1 - theta)^(1 - y)
+}

# time: 2022-06-05 20:00:50 UTC
# mode: r
+thetas <- seq(0,1, length=100)

# time: 2022-06-05 20:00:54 UTC
# mode: r
+thetas

# time: 2022-06-05 20:01:59 UTC
# mode: r
+y <- 1

# time: 2022-06-05 20:02:00 UTC
# mode: r
+B <- function(theta, y) {
+    theta^(y) * (1-theta)^(1-y)
+}

# time: 2022-06-05 20:02:33 UTC
# mode: r
+y <- 1

# time: 2022-06-05 20:02:34 UTC
# mode: r
+B <- function(theta, y) {
+    theta^(y) * (1-theta)^(1-y)
+}

# time: 2022-06-05 20:02:34 UTC
# mode: r
+unlist(lapply(thetas, function(x) {B(x,y)}))

# time: 2022-06-05 20:02:42 UTC
# mode: r
+y <- 1

# time: 2022-06-05 20:02:43 UTC
# mode: r
+B <- function(theta, y) {
+    theta^(y) * (1-theta)^(1-y)
+}

# time: 2022-06-05 20:02:48 UTC
# mode: r
+unlist(lapply(thetas, function(x) {B(x,y)}))

# time: 2022-06-07 07:23:41 UTC
# mode: r
+thetas <- seq(0,1, length=100)

# time: 2022-06-07 07:23:51 UTC
# mode: r
+betas <- dbeta(thetas, 2,2)

# time: 2022-06-07 07:23:57 UTC
# mode: r
+plot(betas)

# time: 2022-06-07 08:12:34 UTC
# mode: r
+a = 1

# time: 2022-06-07 08:12:38 UTC
# mode: r
+b = 1

# time: 2022-06-07 08:12:40 UTC
# mode: r
+    Theta <- seq(0.001, 0.999, by = 0.001) # points for plotting

# time: 2022-06-07 08:12:42 UTC
# mode: r
+    pTheta <- dbeta(Theta, a, b) # prior for plotting

# time: 2022-06-07 08:12:51 UTC
# mode: r
+pTheta

# time: 2022-06-07 08:13:00 UTC
# mode: r
+a = 601

# time: 2022-06-07 08:13:04 UTC
# mode: r
+b = 144

# time: 2022-06-07 08:13:06 UTC
# mode: r
+    Theta <- seq(0.001, 0.999, by = 0.001) # points for plotting

# time: 2022-06-07 08:13:06 UTC
# mode: r
+    pTheta <- dbeta(Theta, a, b) # prior for plotting

# time: 2022-06-07 08:13:10 UTC
# mode: r
+pTheta

# time: 2022-06-07 08:13:15 UTC
# mode: r
+plot(pTheta)

# time: 2022-06-07 08:13:34 UTC
# mode: r
+    pThetaGivenData <- dbeta(Theta, a + z, b + N - z) # posterior for plotting

# time: 2022-06-07 08:33:49 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:33:59 UTC
# mode: r
+reddit_archive

# time: 2022-06-07 08:34:23 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:34:36 UTC
# mode: r
+reddit_data

# time: 2022-06-07 08:34:45 UTC
# mode: r
+excluded <- c(8, 37)

# time: 2022-06-07 08:35:14 UTC
# mode: r
+unique(reddit_data$title)

# time: 2022-06-07 08:35:45 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:36:02 UTC
# mode: r
+reddit_archive2 <- read_csv("data/reddit_full_archive.csv")

# time: 2022-06-07 08:36:12 UTC
# mode: r
+reddit_archive2

# time: 2022-06-07 08:36:25 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-06-07 08:36:28 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(body))

# time: 2022-06-07 08:36:31 UTC
# mode: r
+reddit_archive <- reddit_archive %>% mutate(text = prefilter_text(text))

# time: 2022-06-07 08:36:43 UTC
# mode: r
+reddit_archive <- reddit_archive2 %>% mutate(text = prefilter_text(body))

# time: 2022-06-07 08:36:48 UTC
# mode: r
+reddit_data <- reddit_data %>% dplyr::select(title, text)

# time: 2022-06-07 08:36:50 UTC
# mode: r
+reddit_archive <- reddit_archive %>% dplyr::select(title, text)

# time: 2022-06-07 08:36:51 UTC
# mode: r
+reddit_data <- reddit_data %>% dplyr::select(title, text)

# time: 2022-06-07 08:36:54 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-06-07 08:36:55 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(body))

# time: 2022-06-07 08:36:55 UTC
# mode: r
+reddit_archive <- reddit_archive %>% mutate(text = prefilter_text(text))

# time: 2022-06-07 08:37:00 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:37:17 UTC
# mode: r
+reddit_archiive

# time: 2022-06-07 08:37:19 UTC
# mode: r
+reddit_archive

# time: 2022-06-07 08:37:24 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-06-07 08:37:28 UTC
# mode: r
+reddit_data

# time: 2022-06-07 08:37:32 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-06-07 08:37:36 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(body))

# time: 2022-06-07 08:37:50 UTC
# mode: r
+reddit_archive <- reddit_archive %>% mutate(text = prefilter_text(text))

# time: 2022-06-07 08:37:50 UTC
# mode: r
+reddit_data <- reddit_data %>% dplyr::select(title, text)

# time: 2022-06-07 08:37:50 UTC
# mode: r
+reddit_archive <- reddit_archive %>% dplyr::select(title, text)

# time: 2022-06-07 08:37:51 UTC
# mode: r
+reddit_data <- bind_rows(reddit_data, reddit_archive)

# time: 2022-06-07 08:37:52 UTC
# mode: r
+reddit_for_mallet <- reddit_data %>%
+    dplyr::select(text) %>%
+        mutate(id = 1) %>%
+            unique()

# time: 2022-06-07 08:37:54 UTC
# mode: r
+reddit_for_mallet 

# time: 2022-06-07 08:38:00 UTC
# mode: r
+reddit_archive2 <- read_csv("data/reddit_full_archive.csv")

# time: 2022-06-07 08:38:05 UTC
# mode: r
+reddit_archive2

# time: 2022-06-07 08:38:34 UTC
# mode: r
+reddit_archive2 <- reddit_archive2 %>% mutate(text = prefilter_text(body))

# time: 2022-06-07 08:38:37 UTC
# mode: r
+reddit_archive2

# time: 2022-06-07 08:38:56 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:39:03 UTC
# mode: r
+reddit_data

# time: 2022-06-07 08:39:19 UTC
# mode: r
+reddit_data <- bind_rows(reddit_data, reddit_archive) %>% dplyr::select(text)

# time: 2022-06-07 08:40:15 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:40:26 UTC
# mode: r
+reddit_for_mallet

# time: 2022-06-07 08:40:43 UTC
# mode: r
+    unique()

# time: 2022-06-07 08:40:50 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:41:01 UTC
# mode: r
+reddit_for_mallet

# time: 2022-06-07 08:41:20 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-07 08:41:20 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-07 08:41:30 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:50:31 UTC
# mode: r
+row.names(likelihoodTable) <- c("bsh", "tech", "faults")

# time: 2022-06-07 08:50:33 UTC
# mode: r
+tibble(likelihoodTable)

# time: 2022-06-07 08:50:36 UTC
# mode: r
+likelihoodTable

# time: 2022-06-07 08:50:38 UTC
# mode: r
+tibble(likelihoodTable)

# time: 2022-06-07 08:51:08 UTC
# mode: r
+ topic_words

# time: 2022-06-07 08:51:14 UTC
# mode: r
+get_max_likelihood(likelihoodTable, 1), ]

# time: 2022-06-07 08:51:19 UTC
# mode: r
+get_max_likelihood(likelihoodTable, 1)

# time: 2022-06-07 08:51:27 UTC
# mode: r
+tibble(likelihoodTable)

# time: 2022-06-07 08:53:24 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:53:30 UTC
# mode: r
+reddit_for_mallet

# time: 2022-06-07 08:53:38 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:53:42 UTC
# mode: r
+reddit_for_mallet

# time: 2022-06-07 08:53:56 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:54:07 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-07 08:54:07 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-07 08:54:10 UTC
# mode: r
+reference_text <- ""

# time: 2022-06-07 08:54:11 UTC
# mode: r
+keywords <- c("electric", "device", "tool", "functional", "machine", "cleaner", "vacuum", "household", "gear", "machinery", "inventory", "appliance", "electronic", "product", "item", "set", "system", "machinery", "cleaner", "vacuum cleaner", "dishwasher", "washing machine")

# time: 2022-06-07 08:54:17 UTC
# mode: r
+keywords <- c(keywords, token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname())

# time: 2022-06-07 08:54:24 UTC
# mode: r
+for (word in keywords) {
+    synonyms <- wordnet::synonyms(word, "NOUN")
+    technical_keywords <- c(technical_keywords, synonyms)
+}

# time: 2022-06-07 08:54:43 UTC
# mode: r
+technical_keywords

# time: 2022-06-07 08:55:11 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 08:59:31 UTC
# mode: r
+keywords <- token_list[token_list$list_name=='tech', 'word'] %>% unlist() %>% unname()

# time: 2022-06-07 08:59:38 UTC
# mode: r
+keywords

# time: 2022-06-07 08:59:59 UTC
# mode: r
+keywords <- token_list[token_list$list_name=='issue', 'word'] %>% unlist() %>% unname()

# time: 2022-06-07 09:00:06 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:00:10 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-07 09:00:10 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-07 09:00:37 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:02:21 UTC
# mode: r
+doc_topics <- mallet.doc.topics(topic_model, smoothed = TRUE, normalized = TRUE)

# time: 2022-06-07 09:02:21 UTC
# mode: r
+likelihoodTable <- data.frame(tibble(doc_topics))

# time: 2022-06-07 09:02:22 UTC
# mode: r
+row.names(likelihoodTable) <- c("bsh", "tech", "faults")

# time: 2022-06-07 09:02:22 UTC
# mode: r
+tibble(likelihoodTable)

# time: 2022-06-07 09:02:32 UTC
# mode: r
+saveRDS(topic_model, "BSH_LDA_topic_model.RDS")

# time: 2022-06-07 09:02:40 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:03:09 UTC
# mode: r
+N <- 100

# time: 2022-06-07 09:03:12 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:03:59 UTC
# mode: r
+issue_words 

# time: 2022-06-07 09:04:04 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:04:06 UTC
# mode: r
+issue_word_strengths 

# time: 2022-06-07 09:04:12 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:04:50 UTC
# mode: r
+tokens <- reddit_data %>% unnest_tokens(word, text)

# time: 2022-06-07 09:04:50 UTC
# mode: r
+ngrams <- reddit_data %>% mutate(original=text) %>%  unnest_tokens(word, text,token='ngrams', n=3)

# time: 2022-06-07 09:04:57 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:04:58 UTC
# mode: r
+issue_word_mapping <- filtered_ngrams %>% unnest_tokens(w, word) %>% mutate(issue_word = w %in% issue_words) %>% filter(issue_word) %>% left_join(filtered_ngrams)

# time: 2022-06-07 09:04:58 UTC
# mode: r
+names(issue_word_mapping) <- c("text", "ngram_ID", "word", "issue_word", "ngram")

# time: 2022-06-07 09:05:00 UTC
# mode: r
+plot_data <- issue_word_mapping %>% group_by(word, ngram) %>% summarize(N=n()) %>% filter(N > 5)

# time: 2022-06-07 09:05:00 UTC
# mode: r
+gr <- igraph::graph_from_data_frame(plot_data)

# time: 2022-06-07 09:05:01 UTC
# mode: r
+E(gr)$strength <- plot_data$N

# time: 2022-06-07 09:05:01 UTC
# mode: r
+text_aes <- unlist(lapply(V(gr)$name, function(x){ length(unlist(strsplit(x, " ")))  == 1}))

# time: 2022-06-07 09:05:02 UTC
# mode: r
+text_aes_v <- rep("", length(text_aes))

# time: 2022-06-07 09:05:02 UTC
# mode: r
+text_aes_v[text_aes] <- "bold"

# time: 2022-06-07 09:05:02 UTC
# mode: r
+text_aes_v[!text_aes] <- "plain"

# time: 2022-06-07 09:05:03 UTC
# mode: r
+V(gr)$text_aes <- text_aes_v

# time: 2022-06-07 09:05:03 UTC
# mode: r
+V(gr)$face <- c(rep("bold", vcount(gr))[V(gr)$name %in% c("TECH", "ISSUE", "OTHER")], rep("plain", vcount(gr) - 3))

# time: 2022-06-07 09:05:05 UTC
# mode: r
+ggraph(gr, layout = "fr") +
+    geom_edge_link(show.legend = FALSE, color = "gray80") +
+        geom_node_point(color = "black", size = 3) +
+            geom_node_point(color = "skyblue", size = 2) +
+                geom_node_text(aes(label = name, fontface=text_aes), nudge_y = -0.5, show.legend = FALSE, family = "Helvetica Neue", size = 5) +
+                    scale_color_manual(values = c("grey55", "black")) +
+                        theme(
+        panel.background = element_rect(fill = "white"),
+        text = element_text(family = "Helvetica Neue", size = 10)
+    )

# time: 2022-06-07 09:05:28 UTC
# mode: r
+issue_tokens <- paste0(issue_words, collapse=", ")

# time: 2022-06-07 09:05:28 UTC
# mode: r
+get_ratio <- function(text, word_list) {
+    tokenized <- unlist(strsplit(text, " "))
+    sum(tokenized %in% word_list) / length(tokenized)
+}

# time: 2022-06-07 09:05:31 UTC
# mode: r
+reddit_issue_rates <- reddit_data %>% 
+    rowwise() %>% 
+        mutate(issue_rate = get_ratio(text, issue_words)) %>% 
+            arrange(desc(issue_rate)) %>% 
+                dplyr::select(text, issue_rate)

# time: 2022-06-07 09:05:38 UTC
# mode: r
+reddit_issue_rates

# time: 2022-06-07 09:05:59 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:06:06 UTC
# mode: r
+reddit_issue_rates

# time: 2022-06-07 09:06:39 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:06:43 UTC
# mode: r
+reddit_issue_rates

# time: 2022-06-07 09:22:29 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-07 09:22:50 UTC
# mode: r
+write_csv(reddit_for_mallet, 'reddit_full_prepared.csv')

# time: 2022-06-07 11:00:24 UTC
# mode: r
+docs_for_mallet <- readRDS("LDA_text.RDS")

# time: 2022-06-07 11:00:28 UTC
# mode: r
+docs_for_mallet

# time: 2022-06-07 11:00:46 UTC
# mode: r
+write_csv(docs_for_mallet, 'reddit_full_prepared.csv')

# time: 2022-06-07 20:09:17 UTC
# mode: r
+current = 14421

# time: 2022-06-07 20:09:20 UTC
# mode: r
+    sping <- sample(seq(0,1,length=current),1)

# time: 2022-06-07 20:09:21 UTC
# mode: r
+    sping <- sample(seq(0,1,length=current),1)

# time: 2022-06-07 20:09:25 UTC
# mode: r
+    spin <- sample(seq(0,1,length=current),1)

# time: 2022-06-07 20:09:29 UTC
# mode: r
+sping

# time: 2022-06-07 20:09:30 UTC
# mode: r
+spin

# time: 2022-06-07 20:10:05 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    p <- proposed / current
+    spin <- sample(seq(0, 1, length = current), 1)
+    if (spin %in% seq(0, p)) {
+        TRUE
+    } else {
+        FALSE
+    }
+}

# time: 2022-06-07 20:10:16 UTC
# mode: r
+shall_move(71110,65666)

# time: 2022-06-07 20:10:41 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    p <- proposed / current
+    spin <- sample(seq(0, 1, length = current), 1)
+    if (spin %in% seq(0, p)) {
+        TRUE
+    } else {
+        FALSE
+    }
+}

# time: 2022-06-07 20:10:42 UTC
# mode: r
+shall_move(71110,65666)

# time: 2022-06-07 20:11:16 UTC
# mode: r
+moves <- c()

# time: 2022-06-07 20:11:17 UTC
# mode: r
+for (i in 1:100000) {
+    moves <- c(moves, shall_move(71110, 65666))
+}

# time: 2022-06-07 20:11:49 UTC
# mode: r
+moves <- rep(0, 100000)

# time: 2022-06-07 20:11:59 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    p <- proposed / current
+    spin <- sample(seq(0, 1, length = current), 1)
+    if (spin %in% seq(0, p)) {
+        TRUE
+    } else {
+        FALSE
+    }
+}

# time: 2022-06-07 20:12:00 UTC
# mode: r
+moves <- rep(0, 100000)

# time: 2022-06-07 20:12:03 UTC
# mode: r
+moves

# time: 2022-06-07 20:12:25 UTC
# mode: r
+moves <- rep(0, 100000)

# time: 2022-06-07 20:12:26 UTC
# mode: r
+for (i in 1:100000) {
+    moves[i] <- shall_move(43434, 23232)
+}

# time: 2022-06-07 20:12:46 UTC
# mode: r
+moves

# time: 2022-06-07 20:12:55 UTC
# mode: r
+plot(moves)

# time: 2022-06-07 20:13:09 UTC
# mode: r
+23232/43434

# time: 2022-06-07 20:13:24 UTC
# mode: r
+43433/23232

# time: 2022-06-07 20:13:55 UTC
# mode: r
+proposed=100

# time: 2022-06-07 20:13:59 UTC
# mode: r
+current = 88

# time: 2022-06-07 20:14:02 UTC
# mode: r
+    p <- proposed / current

# time: 2022-06-07 20:14:02 UTC
# mode: r
+    spin <- sample(seq(0, 1, length = current), 1)

# time: 2022-06-07 20:14:07 UTC
# mode: r
+spin

# time: 2022-06-07 20:14:09 UTC
# mode: r
+p

# time: 2022-06-07 20:14:19 UTC
# mode: r
+spin %in% seq(0, p)

# time: 2022-06-07 20:14:26 UTC
# mode: r
+seq(0,p)

# time: 2022-06-07 20:14:40 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    p <- proposed / current
+    spin <- sample(seq(0, 1, length = current), 1)
+    if (spin %in% seq(0, p, length=proposed)) {
+        TRUE
+    } else {
+        FALSE
+    }
+}

# time: 2022-06-07 20:14:41 UTC
# mode: r
+moves <- rep(0, 100000)

# time: 2022-06-07 20:14:41 UTC
# mode: r
+for (i in 1:100000) {
+    moves[i] <- shall_move(43434, 23232)
+}

# time: 2022-06-07 20:15:35 UTC
# mode: r
+plot(moves)

# time: 2022-06-07 20:16:08 UTC
# mode: r
+all(spin > 0, spin <= p)

# time: 2022-06-07 20:16:11 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    p <- proposed / current
+    spin <- sample(seq(0, 1, length = current), 1)
+    if (all(spin > 0, spin <= p)) {
+        TRUE
+    } else {
+        FALSE
+    }
+}

# time: 2022-06-07 20:16:22 UTC
# mode: r
+shall_move(123, 433)

# time: 2022-06-07 20:16:33 UTC
# mode: r
+moves <- rep(0, 100000)

# time: 2022-06-07 20:16:33 UTC
# mode: r
+for (i in 1:100000) {
+    moves[i] <- shall_move(123,456)
+}

# time: 2022-06-07 20:16:38 UTC
# mode: r
+plot(moves)

# time: 2022-06-07 20:16:55 UTC
# mode: r
+plot(moves, type='b')

# time: 2022-06-07 20:17:21 UTC
# mode: r
+plot(c(sum(moves), 100000-sum(moves)), type='b')

# time: 2022-06-07 20:17:41 UTC
# mode: r
+plot(c(sum(moves), 100000-sum(moves)), type='col')

# time: 2022-06-07 20:17:47 UTC
# mode: r
+plot(c(sum(moves), 100000-sum(moves)))

# time: 2022-06-07 20:25:16 UTC
# mode: r
+target_distribution <- seq(1, 9, by=1)

# time: 2022-06-07 20:25:41 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    p <- proposed / current
+    spin <- sample(seq(0, 1, length = current), 1)
+    if (all(spin > 0, spin <= p)) {
+        TRUE
+    } else {
+        FALSE
+    }
+}

# time: 2022-06-07 20:25:43 UTC
# mode: r
+target_distribution <- seq(1, 9, by=1)

# time: 2022-06-07 20:25:52 UTC
# mode: r
+target_distribution

# time: 2022-06-07 20:26:11 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-07 20:26:14 UTC
# mode: r
+target_distribution

# time: 2022-06-07 20:26:51 UTC
# mode: r
+    starting_location <- sample(seq(min(target_distribution), max(target_distribution), length=length(target_distribution)),1)

# time: 2022-06-07 20:26:54 UTC
# mode: r
+starting_location

# time: 2022-06-07 20:27:24 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-07 20:27:46 UTC
# mode: r
+get_choices <- function(actual, step=1){
+    c(actual-1, actual+1)
+}

# time: 2022-06-07 20:29:52 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-07 20:29:54 UTC
# mode: r
+        choices <- get_choices(position)

# time: 2022-06-07 20:29:59 UTC
# mode: r
+choices

# time: 2022-06-07 20:30:49 UTC
# mode: r
+        move <- sample(choices,1)

# time: 2022-06-07 20:30:51 UTC
# mode: r
+move

# time: 2022-06-07 20:31:06 UTC
# mode: r
+        proposed <- move

# time: 2022-06-07 20:31:06 UTC
# mode: r
+        current <- position

# time: 2022-06-07 20:31:26 UTC
# mode: r
+        move <- shall_move(proposed, current)

# time: 2022-06-07 20:31:28 UTC
# mode: r
+move

# time: 2022-06-07 20:32:36 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+        } else {
+            actual_step <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:32:45 UTC
# mode: r
+make_random_walk(target_distribution)

# time: 2022-06-07 20:32:52 UTC
# mode: r
+walk <- make_random_walk(target_distribution)

# time: 2022-06-07 20:32:58 UTC
# mode: r
+plot(walk)

# time: 2022-06-07 20:33:08 UTC
# mode: r
+walk

# time: 2022-06-07 20:33:44 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:33:44 UTC
# mode: r
+walk <- make_random_walk(target_distribution)

# time: 2022-06-07 20:33:48 UTC
# mode: r
+walk

# time: 2022-06-07 20:33:59 UTC
# mode: r
+plot(walk)

# time: 2022-06-07 20:34:19 UTC
# mode: r
+    walk <- c()

# time: 2022-06-07 20:34:20 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-07 20:34:23 UTC
# mode: r
+starting_location

# time: 2022-06-07 20:34:26 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-07 20:34:27 UTC
# mode: r
+        choices <- get_choices(position)

# time: 2022-06-07 20:34:27 UTC
# mode: r
+        move <- sample(choices, 1)

# time: 2022-06-07 20:34:28 UTC
# mode: r
+        proposed <- move

# time: 2022-06-07 20:34:28 UTC
# mode: r
+        current <- position

# time: 2022-06-07 20:34:29 UTC
# mode: r
+        move <- shall_move(proposed, current)

# time: 2022-06-07 20:34:31 UTC
# mode: r
+move

# time: 2022-06-07 20:34:33 UTC
# mode: r
+            actual_step <- proposed

# time: 2022-06-07 20:34:34 UTC
# mode: r
+            position <- proposed

# time: 2022-06-07 20:34:37 UTC
# mode: r
+actual_step

# time: 2022-06-07 20:34:43 UTC
# mode: r
+position

# time: 2022-06-07 20:34:46 UTC
# mode: r
+        names(actual_step) <- i

# time: 2022-06-07 20:34:48 UTC
# mode: r
+    walk <- c()

# time: 2022-06-07 20:34:50 UTC
# mode: r
+        walk <- c(walk, actual_step)

# time: 2022-06-07 20:34:53 UTC
# mode: r
+        choices <- get_choices(position)

# time: 2022-06-07 20:34:59 UTC
# mode: r
+choices

# time: 2022-06-07 20:36:50 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 7) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual +  1   > upper) {
+        high <- actual
+    } else {
+        high <- high+1
+    }
+
+    c(low, high)
+}

# time: 2022-06-07 20:36:51 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:36:52 UTC
# mode: r
+walk <- make_random_walk(target_distribution)

# time: 2022-06-07 20:37:01 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 7) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual +  1   > upper) {
+        high <- actual
+    } else {
+        high <- actual+1
+    }
+
+    c(low, high)
+}

# time: 2022-06-07 20:37:02 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:37:03 UTC
# mode: r
+walk <- make_random_walk(target_distribution)

# time: 2022-06-07 20:37:05 UTC
# mode: r
+plot(walk)

# time: 2022-06-07 20:37:47 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = current), 1)
+        if (all(spin > 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-07 20:37:48 UTC
# mode: r
+moves <- rep(0, 100000)

# time: 2022-06-07 20:37:48 UTC
# mode: r
+for (i in 1:100000) {
+    moves[i] <- shall_move(123, 456)
+}

# time: 2022-06-07 20:37:52 UTC
# mode: r
+plot(c(sum(moves), 100000 - sum(moves)))

# time: 2022-06-07 20:37:56 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-07 20:37:58 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-07 20:38:01 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-07 20:38:02 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:38:03 UTC
# mode: r
+walk <- make_random_walk(target_distribution)

# time: 2022-06-07 20:38:05 UTC
# mode: r
+plot(walk)

# time: 2022-06-07 20:38:14 UTC
# mode: r
+plot(walk, type='l')

# time: 2022-06-07 20:38:51 UTC
# mode: r
+table(walk)

# time: 2022-06-07 20:38:58 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-07 20:39:17 UTC
# mode: r
+plot(walk, type='l')

# time: 2022-06-07 20:39:40 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-07 20:42:04 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-07 20:42:20 UTC
# mode: r
+target_distribution 

# time: 2022-06-07 20:42:39 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = current), 1)
+        if (all(spin > 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-07 20:42:41 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 =< lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 >= upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-07 20:42:42 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:42:50 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 <= lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 >= upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-07 20:42:51 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:42:52 UTC
# mode: r
+walk <- make_random_walk(target_distribution)

# time: 2022-06-07 20:42:54 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-07 20:43:05 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-07 20:43:24 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = current), 1)
+        if (all(spin > 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-07 20:43:26 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 == lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 == upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-07 20:43:27 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:43:28 UTC
# mode: r
+walk <- make_random_walk(target_distribution)

# time: 2022-06-07 20:43:29 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-07 20:44:02 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1  > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-07 20:44:02 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:44:03 UTC
# mode: r
+walk <- make_random_walk(target_distribution)

# time: 2022-06-07 20:44:05 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-07 20:44:12 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-07 20:44:38 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1  > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-07 20:44:45 UTC
# mode: r
+get_choices(1)

# time: 2022-06-07 20:44:51 UTC
# mode: r
+get_choices(9)

# time: 2022-06-07 20:45:07 UTC
# mode: r
+get_choices(8)

# time: 2022-06-07 20:45:11 UTC
# mode: r
+get_choices(7)

# time: 2022-06-07 20:45:14 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = current), 1)
+        if (all(spin > 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-07 20:45:17 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-07 20:45:17 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-07 20:45:17 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1  > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-07 20:45:18 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-07 20:45:19 UTC
# mode: r
+walk <- make_random_walk(target_distribution)

# time: 2022-06-07 20:45:21 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-07 20:45:26 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-07 20:45:39 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps=20000)

# time: 2022-06-07 20:45:46 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-07 20:45:50 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-08 07:40:06 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = current), 1)
+        if (all(spin > 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 07:40:09 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 07:40:09 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 07:40:10 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1  > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 07:40:10 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-08 07:40:11 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps=20000)

# time: 2022-06-08 07:40:18 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-08 07:40:48 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps=50000)

# time: 2022-06-08 07:41:17 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-08 07:41:44 UTC
# mode: r
+spin = 0.6

# time: 2022-06-08 07:41:52 UTC
# mode: r
+p = 0.6

# time: 2022-06-08 07:42:06 UTC
# mode: r
+all(spin>0, spin<=p)

# time: 2022-06-08 07:42:16 UTC
# mode: r
+spin=0.7

# time: 2022-06-08 07:42:17 UTC
# mode: r
+all(spin>0, spin<=p)

# time: 2022-06-08 07:42:27 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps=50000)

# time: 2022-06-08 07:42:56 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-08 07:43:03 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-08 07:43:10 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps=100000)

# time: 2022-06-08 07:48:10 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-08 07:48:14 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-08 07:48:20 UTC
# mode: r
+get_choices(1)

# time: 2022-06-08 07:48:25 UTC
# mode: r
+c <- get_choices(1)

# time: 2022-06-08 07:48:33 UTC
# mode: r
+shall_move(c)

# time: 2022-06-08 07:48:41 UTC
# mode: r
+shall_move(c[1], c[2])

# time: 2022-06-08 07:49:04 UTC
# mode: r
+proposed <- 1

# time: 2022-06-08 07:49:06 UTC
# mode: r
+current <- 2

# time: 2022-06-08 07:49:06 UTC
# mode: r
+proposed <- 1

# time: 2022-06-08 07:49:09 UTC
# mode: r
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = current), 1)
+        if (all(spin > 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }

# time: 2022-06-08 07:49:15 UTC
# mode: r
+        p <- proposed / current

# time: 2022-06-08 07:49:18 UTC
# mode: r
+p

# time: 2022-06-08 07:49:20 UTC
# mode: r
+        spin <- sample(seq(0, 1, length = current), 1)

# time: 2022-06-08 07:49:23 UTC
# mode: r
+spin

# time: 2022-06-08 07:49:26 UTC
# mode: r
+        if (all(spin > 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }

# time: 2022-06-08 07:49:32 UTC
# mode: r
+spin

# time: 2022-06-08 07:49:36 UTC
# mode: r
+spin > 0

# time: 2022-06-08 07:49:41 UTC
# mode: r
+spin <= 0.5

# time: 2022-06-08 07:49:55 UTC
# mode: r
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }

# time: 2022-06-08 07:49:59 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = current), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 07:50:02 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 07:50:02 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 07:50:03 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1  > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 07:50:03 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-08 07:50:04 UTC
# mode: r
+c <- get_choices(1)

# time: 2022-06-08 07:50:04 UTC
# mode: r
+shall_move(c[1], c[2])

# time: 2022-06-08 07:50:10 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps=1000)

# time: 2022-06-08 07:50:11 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-08 07:50:15 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-08 07:52:25 UTC
# mode: r
+spin

# time: 2022-06-08 08:05:55 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 08:05:58 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 08:05:58 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 08:05:59 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1  > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 08:05:59 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+    }
+    walk
+}

# time: 2022-06-08 08:06:00 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps=1000)

# time: 2022-06-08 08:06:01 UTC
# mode: r
+plot(walk[1:200], type='l')

# time: 2022-06-08 08:06:07 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-08 08:06:15 UTC
# mode: r
+plot(walk[1:500], type='l')

# time: 2022-06-08 08:06:31 UTC
# mode: r
+plot(walk, type='l')

# time: 2022-06-08 08:06:43 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-08 08:06:50 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps=10000)

# time: 2022-06-08 08:06:52 UTC
# mode: r
+plot(table(walk))

# time: 2022-06-08 08:06:55 UTC
# mode: r
+plot(walk, type='l')

# time: 2022-06-08 08:07:36 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 08:08:10 UTC
# mode: r
+library(maggritr)

# time: 2022-06-08 08:08:11 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 08:08:15 UTC
# mode: r
+library(maggrittr)

# time: 2022-06-08 08:08:18 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 08:08:29 UTC
# mode: r
+    tibble(walk = walk)

# time: 2022-06-08 08:08:40 UTC
# mode: r
+    tibble(walk = walk, step = row_number())

# time: 2022-06-08 08:08:52 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 08:08:54 UTC
# mode: r
+    tibble(walk = walk, step = row_number())

# time: 2022-06-08 08:09:19 UTC
# mode: r
+    tibble(walk = walk) %>% mutate(step = row_number())

# time: 2022-06-08 08:09:51 UTC
# mode: r
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+        ggplot() +
+            geom_path(aes(step, walk))+
+                coord_flip()

# time: 2022-06-08 08:10:02 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/10)+
+    coord_flip()
+
+}

# time: 2022-06-08 08:10:09 UTC
# mode: r
+plot_walk(walk)

# time: 2022-06-08 08:10:25 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/10)+
+    geom_point(aes(step, walk), alpha = 1/5)+
+    coord_flip()
+}

# time: 2022-06-08 08:10:26 UTC
# mode: r
+plot_walk(walk)

# time: 2022-06-08 08:10:43 UTC
# mode: r
+plot_walk(walk[1:50])

# time: 2022-06-08 08:11:03 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/5)+
+    geom_point(aes(step, walk), alpha = 1/2)+
+    coord_flip()+
+    theme_light()
+}

# time: 2022-06-08 08:11:04 UTC
# mode: r
+plot_walk(walk[1:50])

# time: 2022-06-08 08:11:22 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-08 08:11:51 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/5, color="skyblue")+
+    geom_point(aes(step, walk), alpha = 1/2, color="skyblue")+
+    coord_flip()+
+    theme_light()
+}

# time: 2022-06-08 08:11:51 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-08 08:12:05 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/2, color="skyblue")+
+    geom_point(aes(step, walk), alpha = 1/1.5, color="skyblue")+
+    coord_flip()+
+    theme_light()
+}

# time: 2022-06-08 08:12:06 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-08 08:13:29 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/2, color="cornflowerblue")+
+    geom_point(aes(step, walk), alpha = 1/1.5, color="cornflowerblue")+
+    coord_flip()+
+    theme_light()
+}

# time: 2022-06-08 08:13:30 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-08 08:13:40 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/2, color="cornflowerblue")+
+    # geom_point(aes(step, walk), alpha = 1/1.5, color="cornflowerblue")+
+    coord_flip()+
+    theme_light()
+}

# time: 2022-06-08 08:13:41 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-08 08:13:50 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/2, color="cornflowerblue")+
+    # geom_point(aes(step, walk), alpha = 1/1.5, color="cornflowerblue")+
+    coord_flip()
+}

# time: 2022-06-08 08:13:50 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-08 08:13:57 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/2, color="cornflowerblue")+
+    # geom_point(aes(step, walk), alpha = 1/1.5, color="cornflowerblue")+
+    theme_light()
+}

# time: 2022-06-08 08:13:57 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-08 08:14:28 UTC
# mode: r
+plot_walk <- function(walk){
+    tibble(walk = walk) %>% mutate(step = row_number())  %>% 
+    ggplot() +
+    geom_path(aes(step, walk), alpha = 1/2, color="cornflowerblue")+
+    geom_point(aes(step, walk), alpha = 1/1.5, color="cornflowerblue", size=3)+
+    geom_point(aes(step, walk), alpha = 1/1.5, color="white", size=2)+
+    theme_light()
+}

# time: 2022-06-08 08:14:28 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-08 08:25:31 UTC
# mode: r
+1/1.5

# time: 2022-06-08 08:49:44 UTC
# mode: r
+    walk <- rep(0, length(target_distribution))

# time: 2022-06-08 08:50:02 UTC
# mode: r
+    probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 08:50:11 UTC
# mode: r
+probabilities

# time: 2022-06-08 08:50:25 UTC
# mode: r
+            probabilities[starting_location] <- 1

# time: 2022-06-08 08:50:29 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 08:50:32 UTC
# mode: r
+            probabilities[starting_location] <- 1

# time: 2022-06-08 08:50:36 UTC
# mode: r
+probabilities

# time: 2022-06-08 08:50:57 UTC
# mode: r
+            names(probabilities[starting_location]) <- i

# time: 2022-06-08 08:51:01 UTC
# mode: r
+=1

# time: 2022-06-08 08:51:06 UTC
# mode: r
+i=1

# time: 2022-06-08 08:51:07 UTC
# mode: r
+            names(probabilities[starting_location]) <- i

# time: 2022-06-08 08:51:40 UTC
# mode: r
+    starting_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 08:51:40 UTC
# mode: r
+    probabilities <- c()

# time: 2022-06-08 08:51:44 UTC
# mode: r
+            probabilities[starting_location] 

# time: 2022-06-08 08:51:52 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 08:52:02 UTC
# mode: r
+    starting_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 08:52:03 UTC
# mode: r
+    probabilities <- list()

# time: 2022-06-08 08:52:16 UTC
# mode: r
+            probabilities[starting_location]  <- starting_probabilities

# time: 2022-06-08 08:52:18 UTC
# mode: r
+    starting_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 08:52:18 UTC
# mode: r
+    probabilities <- list()

# time: 2022-06-08 08:52:20 UTC
# mode: r
+            probabilities[starting_location]  <- starting_probabilities

# time: 2022-06-08 08:52:28 UTC
# mode: r
+    probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 08:52:28 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 08:52:44 UTC
# mode: r
+    probabilities <- data.frame(probabilities)

# time: 2022-06-08 08:52:55 UTC
# mode: r
+    probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 08:52:55 UTC
# mode: r
+    names(probabilities) <- names(target_distribution)

# time: 2022-06-08 08:52:56 UTC
# mode: r
+    probabilities <- data.frame(probabilities)

# time: 2022-06-08 08:52:59 UTC
# mode: r
+probabilities

# time: 2022-06-08 08:53:10 UTC
# mode: r
+    probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 08:53:10 UTC
# mode: r
+    names(probabilities) <- names(target_distribution)

# time: 2022-06-08 08:53:11 UTC
# mode: r
+    probabilities <- data.frame(t(probabilities))

# time: 2022-06-08 08:53:13 UTC
# mode: r
+probabilities

# time: 2022-06-08 08:54:04 UTC
# mode: r
+n_steps = 10000

# time: 2022-06-08 08:54:05 UTC
# mode: r
+    probabilities <- data.frame(matrix(ncol=length(target_distribution), nrow=n_steps))

# time: 2022-06-08 08:54:09 UTC
# mode: r
+probabilities

# time: 2022-06-08 08:54:39 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 08:54:45 UTC
# mode: r
+    probabilities <- data.frame(matrix(ncol=length(target_distribution)+1, nrow=n_steps))

# time: 2022-06-08 08:54:45 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 08:54:55 UTC
# mode: r
+    probabilities <- data.frame(matrix(ncol=length(target_distribution)+1, nrow=n_steps), fill=0)

# time: 2022-06-08 08:54:57 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 08:54:59 UTC
# mode: r
+probabilities

# time: 2022-06-08 08:55:16 UTC
# mode: r
+    probabilities <- data.frame(matrix(ncol=length(target_distribution)+1, nrow=n_steps,data=0))

# time: 2022-06-08 08:55:17 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 08:55:20 UTC
# mode: r
+probabilities

# time: 2022-06-08 08:55:28 UTC
# mode: r
+probabilities[1,]

# time: 2022-06-08 08:55:34 UTC
# mode: r
+    probabilities <- data.frame(matrix(ncol=length(target_distribution)+1, nrow=n_steps,data=0))

# time: 2022-06-08 08:55:35 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 08:55:37 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 08:55:37 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 08:56:09 UTC
# mode: r
+            probabilities[i,starting_location] <- 1 

# time: 2022-06-08 08:56:10 UTC
# mode: r
+            probabilities[i,"step"] <- i

# time: 2022-06-08 08:56:13 UTC
# mode: r
+probabilities[1:2,]

# time: 2022-06-08 08:56:45 UTC
# mode: r
+        choices <- get_choices(position)

# time: 2022-06-08 08:59:51 UTC
# mode: r
+update_probabilities <- function(value) { 
+    c((3/4)*0.5*value, 0.5*(1-3/4)*value, 0.5*value)
+}

# time: 2022-06-08 09:00:02 UTC
# mode: r
+update_probabilities(1)

# time: 2022-06-08 09:00:07 UTC
# mode: r
+update_probabilities(0.5)

# time: 2022-06-08 09:01:16 UTC
# mode: r
+distribute_probabilities <- function(value) { 
+    c((3/4)*0.5*value, 0.5*(1-3/4)*value, 0.5*value)
+}

# time: 2022-06-08 09:01:32 UTC
# mode: r
+i =3

# time: 2022-06-08 09:01:34 UTC
# mode: r
+i=2

# time: 2022-06-08 09:01:35 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:01:37 UTC
# mode: r
+line

# time: 2022-06-08 09:01:47 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:01:48 UTC
# mode: r
+line

# time: 2022-06-08 09:01:53 UTC
# mode: r
+line[5]_1

# time: 2022-06-08 09:01:57 UTC
# mode: r
+line[5] = 1

# time: 2022-06-08 09:01:59 UTC
# mode: r
+line

# time: 2022-06-08 09:02:18 UTC
# mode: r
+typeof(line)

# time: 2022-06-08 09:02:34 UTC
# mode: r
+        lapply(line, function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:03:00 UTC
# mode: r
+        lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:03:39 UTC
# mode: r
+distribute_probabilities <- function(value) { 
+    if (value==0){
+        0
+    } else {
+    c((3/4)*0.5*value, 0.5*(1-3/4)*value, 0.5*value)
+
+    }
+}

# time: 2022-06-08 09:03:42 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:03:43 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:03:43 UTC
# mode: r
+        lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:03:48 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:03:48 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:03:48 UTC
# mode: r
+        lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:03:50 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:03:51 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:03:53 UTC
# mode: r
+line

# time: 2022-06-08 09:03:58 UTC
# mode: r
+line[5]=1

# time: 2022-06-08 09:04:00 UTC
# mode: r
+        lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:04:31 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:04:32 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:04:35 UTC
# mode: r
+line[5]=1

# time: 2022-06-08 09:04:38 UTC
# mode: r
+line[2]=1

# time: 2022-06-08 09:04:40 UTC
# mode: r
+        new_probabulities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:04:44 UTC
# mode: r
+new_probabulities

# time: 2022-06-08 09:05:18 UTC
# mode: r
+        for (i in new_probabilities){
+            print(i)
+        }

# time: 2022-06-08 09:05:26 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:05:26 UTC
# mode: r
+        for (i in new_probabilities){
+            print(i)
+        }

# time: 2022-06-08 09:05:45 UTC
# mode: r
+        for (i in new_probabilities){
+            if (length(i) > 1) {
+                print(i)
+            }
+        }

# time: 2022-06-08 09:07:01 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:07:01 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:07:02 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:07:02 UTC
# mode: r
+        for (i in seq_along(new_probabilities)){
+            if (length(new_probabilities[i]) > 1) {
+                line[i-1] <- line[i-1] + new_probabilities[1]
+                line[i] <- line[i] + new_probabilities[2]
+                line[i+] <- line[i+] + new_probabilities[3]
+            }
+        }

# time: 2022-06-08 09:07:12 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:07:13 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:07:13 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:07:15 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:07:15 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:07:17 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:07:19 UTC
# mode: r
+line

# time: 2022-06-08 09:07:26 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:07:27 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:07:30 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:07:30 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:07:32 UTC
# mode: r
+i

# time: 2022-06-08 09:07:34 UTC
# mode: r
+i =1

# time: 2022-06-08 09:07:36 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:07:37 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:08:07 UTC
# mode: r
+                line[j-1] <- line[j-1] + new_probabilities[1]

# time: 2022-06-08 09:08:08 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:08:09 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:08:09 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:08:10 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[1]
+                line[j] <- line[j] + new_probabilities[2]
+                line[j+1] <- line[j+1] + new_probabilities[3]
+            }
+        }

# time: 2022-06-08 09:08:12 UTC
# mode: r
+line

# time: 2022-06-08 09:08:16 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:08:17 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:08:17 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:08:18 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[1]
+                line[j] <- line[j] + new_probabilities[2]
+                line[j+1] <- line[j+1] + new_probabilities[3]
+            }
+        }

# time: 2022-06-08 09:08:25 UTC
# mode: r
+line[4]=0.5

# time: 2022-06-08 09:08:32 UTC
# mode: r
+line[6]=0.3

# time: 2022-06-08 09:08:34 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:08:35 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[1]
+                line[j] <- line[j] + new_probabilities[2]
+                line[j+1] <- line[j+1] + new_probabilities[3]
+            }
+        }

# time: 2022-06-08 09:08:37 UTC
# mode: r
+line

# time: 2022-06-08 09:08:46 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:08:48 UTC
# mode: r
+new_probabilities 

# time: 2022-06-08 09:08:52 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[1]
+                line[j] <- line[j] + new_probabilities[2]
+                line[j+1] <- line[j+1] + new_probabilities[3]
+            }
+        }

# time: 2022-06-08 09:08:58 UTC
# mode: r
+line

# time: 2022-06-08 09:09:03 UTC
# mode: r
+line[j-1]

# time: 2022-06-08 09:09:15 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 09:09:38 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:09:39 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:09:39 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:09:40 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j]) > 1) {
+                print(new_probabilities[j])
+                line[j-1] <- line[j-1] + new_probabilities[1]
+                line[j] <- line[j] + new_probabilities[2]
+                line[j+1] <- line[j+1] + new_probabilities[3]
+            }
+        }

# time: 2022-06-08 09:09:43 UTC
# mode: r
+line

# time: 2022-06-08 09:09:47 UTC
# mode: r
+line[4]=0.5

# time: 2022-06-08 09:09:54 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:09:54 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j]) > 1) {
+                print(new_probabilities[j])
+                line[j-1] <- line[j-1] + new_probabilities[1]
+                line[j] <- line[j] + new_probabilities[2]
+                line[j+1] <- line[j+1] + new_probabilities[3]
+            }
+        }

# time: 2022-06-08 09:10:04 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 09:10:08 UTC
# mode: r
+new_probabilities[4]

# time: 2022-06-08 09:10:16 UTC
# mode: r
+length(new_probabilities[4])

# time: 2022-06-08 09:10:20 UTC
# mode: r
+length(new_probabilities[4][[0]])\

# time: 2022-06-08 09:10:21 UTC
# mode: r
+length(new_probabilities[4][[0]])

# time: 2022-06-08 09:10:25 UTC
# mode: r
+length(new_probabilities[4][0])

# time: 2022-06-08 09:10:29 UTC
# mode: r
+length(new_probabilities[4][[1]])

# time: 2022-06-08 09:10:34 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:10:35 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                print(new_probabilities[j])
+                line[j-1] <- line[j-1] + new_probabilities[1]
+                line[j] <- line[j] + new_probabilities[2]
+                line[j+1] <- line[j+1] + new_probabilities[3]
+            }
+        }

# time: 2022-06-08 09:10:40 UTC
# mode: r
+line

# time: 2022-06-08 09:11:06 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:11:06 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }

# time: 2022-06-08 09:11:08 UTC
# mode: r
+line

# time: 2022-06-08 09:12:06 UTC
# mode: r
+        probabilities[i,1:length(starting_location)] <- line

# time: 2022-06-08 09:12:12 UTC
# mode: r
+probabilities[i,1:length(starting_location)] 

# time: 2022-06-08 09:12:24 UTC
# mode: r
+        probabilities[i,1:length(target_distribution)] <- line

# time: 2022-06-08 09:12:28 UTC
# mode: r
+        probabilities[i,1:length(target_distribution)]

# time: 2022-06-08 09:12:45 UTC
# mode: r
+line

# time: 2022-06-08 09:12:50 UTC
# mode: r
+        probabilities[i,] <- line

# time: 2022-06-08 09:12:59 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }
+    list('walk' = walk, 'probabilities' = probabilities)
+}

# time: 2022-06-08 09:13:01 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:13:04 UTC
# mode: r
+walk

# time: 2022-06-08 09:13:57 UTC
# mode: r
+        line <- probabilities[i,]

# time: 2022-06-08 09:14:00 UTC
# mode: r
+line

# time: 2022-06-08 09:14:11 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        }
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }
+    list('walk' = walk, 'probabilities' = probabilities)
+}

# time: 2022-06-08 09:14:12 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:14:15 UTC
# mode: r
+walk

# time: 2022-06-08 09:14:47 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }
+    }
+    list('walk' = walk, 'probabilities' = probabilities)
+}

# time: 2022-06-08 09:14:48 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:14:54 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:14:55 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:14:55 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:14:56 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:14:57 UTC
# mode: r
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }

# time: 2022-06-08 09:15:00 UTC
# mode: r
+walk

# time: 2022-06-08 09:15:04 UTC
# mode: r
+probabilities

# time: 2022-06-08 09:15:09 UTC
# mode: r
+probabilities[1:10,]

# time: 2022-06-08 09:15:15 UTC
# mode: r
+i

# time: 2022-06-08 09:15:18 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 09:15:18 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:15:19 UTC
# mode: r
+            probabilities[i, "step"] <- i

# time: 2022-06-08 09:15:23 UTC
# mode: r
+probabilities

# time: 2022-06-08 09:15:27 UTC
# mode: r
+probabilities[1,]

# time: 2022-06-08 09:15:42 UTC
# mode: r
+i =2

# time: 2022-06-08 09:15:44 UTC
# mode: r
+        choices <- get_choices(position)

# time: 2022-06-08 09:15:44 UTC
# mode: r
+        move <- sample(choices, 1)

# time: 2022-06-08 09:15:45 UTC
# mode: r
+        proposed <- move

# time: 2022-06-08 09:15:45 UTC
# mode: r
+        current <- position

# time: 2022-06-08 09:15:46 UTC
# mode: r
+        move <- shall_move(proposed, current)

# time: 2022-06-08 09:15:46 UTC
# mode: r
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }

# time: 2022-06-08 09:15:47 UTC
# mode: r
+        names(actual_step) <- i

# time: 2022-06-08 09:15:47 UTC
# mode: r
+        walk <- c(walk, actual_step)

# time: 2022-06-08 09:15:49 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:15:50 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:15:50 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:15:52 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }

# time: 2022-06-08 09:15:58 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 09:16:12 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:16:14 UTC
# mode: r
+starting_location

# time: 2022-06-08 09:16:18 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:16:20 UTC
# mode: r
+starting_location

# time: 2022-06-08 09:16:25 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 09:16:26 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:16:26 UTC
# mode: r
+            probabilities[i, "step"] <- i

# time: 2022-06-08 09:16:32 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:16:33 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:16:33 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:16:35 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 09:16:35 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:16:35 UTC
# mode: r
+            probabilities[i, "step"] <- i

# time: 2022-06-08 09:16:38 UTC
# mode: r
+i=2

# time: 2022-06-08 09:16:40 UTC
# mode: r
+        choices <- get_choices(position)

# time: 2022-06-08 09:16:40 UTC
# mode: r
+        move <- sample(choices, 1)

# time: 2022-06-08 09:16:40 UTC
# mode: r
+        proposed <- move

# time: 2022-06-08 09:16:41 UTC
# mode: r
+        current <- position

# time: 2022-06-08 09:16:41 UTC
# mode: r
+        move <- shall_move(proposed, current)

# time: 2022-06-08 09:16:41 UTC
# mode: r
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }

# time: 2022-06-08 09:16:42 UTC
# mode: r
+        names(actual_step) <- i

# time: 2022-06-08 09:16:42 UTC
# mode: r
+        walk <- c(walk, actual_step)

# time: 2022-06-08 09:16:43 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:16:43 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:16:44 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:16:44 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }

# time: 2022-06-08 09:16:46 UTC
# mode: r
+        probabilities[i,] <- line

# time: 2022-06-08 09:16:52 UTC
# mode: r
+probabilities[1:2,]

# time: 2022-06-08 09:16:56 UTC
# mode: r
+line

# time: 2022-06-08 09:16:59 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:17:01 UTC
# mode: r
+line

# time: 2022-06-08 09:17:05 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:17:15 UTC
# mode: r
+probabilities

# time: 2022-06-08 09:17:20 UTC
# mode: r
+probabilities[1,]

# time: 2022-06-08 09:17:26 UTC
# mode: r
+ starting_location

# time: 2022-06-08 09:17:28 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:17:40 UTC
# mode: r
+probabilities[i,]

# time: 2022-06-08 09:17:45 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:17:49 UTC
# mode: r
+starting_location

# time: 2022-06-08 09:17:52 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:17:55 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 09:17:56 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:17:56 UTC
# mode: r
+            probabilities[i, "step"] <- i

# time: 2022-06-08 09:17:59 UTC
# mode: r
+probabilities[i,]

# time: 2022-06-08 09:18:07 UTC
# mode: r
+i=2

# time: 2022-06-08 09:18:08 UTC
# mode: r
+        choices <- get_choices(position)

# time: 2022-06-08 09:18:09 UTC
# mode: r
+        move <- sample(choices, 1)

# time: 2022-06-08 09:18:09 UTC
# mode: r
+        proposed <- move

# time: 2022-06-08 09:18:09 UTC
# mode: r
+        current <- position

# time: 2022-06-08 09:18:09 UTC
# mode: r
+        move <- shall_move(proposed, current)

# time: 2022-06-08 09:18:10 UTC
# mode: r
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }

# time: 2022-06-08 09:18:10 UTC
# mode: r
+        names(actual_step) <- i

# time: 2022-06-08 09:18:11 UTC
# mode: r
+        walk <- c(walk, actual_step)

# time: 2022-06-08 09:18:12 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:18:12 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:18:13 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:18:14 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }

# time: 2022-06-08 09:18:15 UTC
# mode: r
+        probabilities[i,] <- line

# time: 2022-06-08 09:18:19 UTC
# mode: r
+probabilities[1:2,]

# time: 2022-06-08 09:18:24 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:18:26 UTC
# mode: r
+line

# time: 2022-06-08 09:18:33 UTC
# mode: r
+-1

# time: 2022-06-08 09:18:35 UTC
# mode: r
+i-1

# time: 2022-06-08 09:18:41 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 09:18:41 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:18:43 UTC
# mode: r
+            probabilities[i, "step"] <- i

# time: 2022-06-08 09:18:45 UTC
# mode: r
+probabilities

# time: 2022-06-08 09:18:49 UTC
# mode: r
+probabilities[1,]

# time: 2022-06-08 09:18:52 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }
+    }
+    list('walk' = walk, 'probabilities' = probabilities)
+}

# time: 2022-06-08 09:18:53 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:19:01 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:19:01 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:19:01 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:19:02 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:19:03 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }
+    }

# time: 2022-06-08 09:19:05 UTC
# mode: r
+    list('walk' = walk, 'probabilities' = probabilities)

# time: 2022-06-08 09:19:12 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:19:12 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:19:13 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:19:14 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }
+    }

# time: 2022-06-08 09:19:19 UTC
# mode: r
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }

# time: 2022-06-08 09:19:22 UTC
# mode: r
+i

# time: 2022-06-08 09:19:24 UTC
# mode: r
+=1

# time: 2022-06-08 09:19:28 UTC
# mode: r
+i=1

# time: 2022-06-08 09:19:32 UTC
# mode: r
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }

# time: 2022-06-08 09:19:34 UTC
# mode: r
+probabilities[1,]

# time: 2022-06-08 09:19:40 UTC
# mode: r
+i=2

# time: 2022-06-08 09:19:44 UTC
# mode: r
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+        }
+        probabilities[i,] <- line
+
+    }

# time: 2022-06-08 09:19:48 UTC
# mode: r
+probabilities[1,]

# time: 2022-06-08 09:19:51 UTC
# mode: r
+probabilities[1:2,]

# time: 2022-06-08 09:19:56 UTC
# mode: r
+probabilities[1:3,]

# time: 2022-06-08 09:19:59 UTC
# mode: r
+probabilities[1:4,]

# time: 2022-06-08 09:20:11 UTC
# mode: r
+probabilities[1:5,]

# time: 2022-06-08 09:20:14 UTC
# mode: r
+probabilities[1:10,]

# time: 2022-06-08 09:30:23 UTC
# mode: r
+distribute_probabilities <- function(value) { 
+    if (value==0){
+        0
+    } else {
+    c((3/4)*0.5*value, 0.5*(1-3/4)*value, 0.5*value)
+
+    }
+}

# time: 2022-06-08 09:30:59 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:31:04 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (i == 1) {
+                    line[j] <- line[j] + new_probabilities[j][[1]][2]
+                    line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- line[j-1] + new_probabilities[j][[1]][1]
+                line[j] <- line[j] + new_probabilities[j][[1]][2]
+                line[j+1] <- line[j+1] + new_probabilities[j][[1]][3]
+            }
+                    
+        }}
+        probabilities[i,] <- line
+
+    }
+    }
+    list('walk' = walk, 'probabilities' = probabilities)
+}

# time: 2022-06-08 09:31:06 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:31:39 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 09:31:40 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 09:31:40 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 09:31:40 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 09:31:41 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 09:31:43 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 09:31:43 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 09:31:44 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 09:31:44 UTC
# mode: r
+distribute_probabilities <- function(value) { 
+    if (value==0){
+        0
+    } else {
+    c((3/4)*0.5*value, 0.5*(1-3/4)*value, 0.5*value)
+
+    }
+}

# time: 2022-06-08 09:31:45 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (i == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}
+        probabilities[i,] <- line
+
+    }
+    }
+    list('walk' = walk, 'probabilities' = probabilities)
+}

# time: 2022-06-08 09:31:46 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:31:53 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:31:53 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:31:53 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:31:54 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:31:55 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (i == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}
+        probabilities[i,] <- line
+
+    }
+    }

# time: 2022-06-08 09:31:58 UTC
# mode: r
+    list('walk' = walk, 'probabilities' = probabilities)

# time: 2022-06-08 09:32:12 UTC
# mode: r
+i=5

# time: 2022-06-08 09:32:16 UTC
# mode: r
+        choices <- get_choices(position)

# time: 2022-06-08 09:32:16 UTC
# mode: r
+        move <- sample(choices, 1)

# time: 2022-06-08 09:32:17 UTC
# mode: r
+        proposed <- move

# time: 2022-06-08 09:32:17 UTC
# mode: r
+        current <- position

# time: 2022-06-08 09:32:18 UTC
# mode: r
+        move <- shall_move(proposed, current)

# time: 2022-06-08 09:32:18 UTC
# mode: r
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }

# time: 2022-06-08 09:32:19 UTC
# mode: r
+        names(actual_step) <- i

# time: 2022-06-08 09:32:19 UTC
# mode: r
+        walk <- c(walk, actual_step)

# time: 2022-06-08 09:32:20 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:32:21 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:32:24 UTC
# mode: r
+line

# time: 2022-06-08 09:32:30 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (i == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}

# time: 2022-06-08 09:32:38 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}

# time: 2022-06-08 09:32:40 UTC
# mode: r
+        probabilities[i,] <- line

# time: 2022-06-08 09:32:42 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 09:32:42 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 09:32:43 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 09:32:43 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 09:32:43 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 09:32:50 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 09:32:50 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 09:32:50 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 09:32:51 UTC
# mode: r
+distribute_probabilities <- function(value) { 
+    if (value==0){
+        0
+    } else {
+    c((3/4)*0.5*value, 0.5*(1-3/4)*value, 0.5*value)
+
+    }
+}

# time: 2022-06-08 09:32:52 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}
+        probabilities[i,] <- line
+
+    }
+    }
+    list('walk' = walk, 'probabilities' = probabilities)
+}

# time: 2022-06-08 09:32:53 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:32:55 UTC
# mode: r
+walk

# time: 2022-06-08 09:33:20 UTC
# mode: r
+plot(walk$probabilities[10,])

# time: 2022-06-08 09:33:30 UTC
# mode: r
+plot(walk$probabilities[10,1:9])

# time: 2022-06-08 09:33:38 UTC
# mode: r
+x_walk$probabilities[10,1:9]

# time: 2022-06-08 09:33:48 UTC
# mode: r
+x=walk$probabilities[10,1:9]

# time: 2022-06-08 09:33:49 UTC
# mode: r
+x

# time: 2022-06-08 09:33:55 UTC
# mode: r
+x = unlist(x)

# time: 2022-06-08 09:33:56 UTC
# mode: r
+x

# time: 2022-06-08 09:34:00 UTC
# mode: r
+plot(x)

# time: 2022-06-08 09:34:36 UTC
# mode: r
+ggplot(tibble(x=x)) +geom_col()

# time: 2022-06-08 09:34:44 UTC
# mode: r
+ggplot(tibble(x=x)) +geom_col(aes(x))

# time: 2022-06-08 09:35:07 UTC
# mode: r
+ggplot(tibble(y=x) %>% mutate(x=row_number())) +geom_col(aes(x,y))

# time: 2022-06-08 09:35:26 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 100)

# time: 2022-06-08 09:35:47 UTC
# mode: r
+x <- unlist(walk$probabilities[100,])

# time: 2022-06-08 09:35:48 UTC
# mode: r
+ggplot(tibble(y=x) %>% mutate(x=row_number())) +geom_col(aes(x,y))

# time: 2022-06-08 09:35:56 UTC
# mode: r
+x <- unlist(walk$probabilities[100,1:9])

# time: 2022-06-08 09:35:57 UTC
# mode: r
+ggplot(tibble(y=x) %>% mutate(x=row_number())) +geom_col(aes(x,y))

# time: 2022-06-08 09:36:09 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 09:36:14 UTC
# mode: r
+x <- unlist(walk$probabilities[1000,1:9])

# time: 2022-06-08 09:36:15 UTC
# mode: r
+ggplot(tibble(y=x) %>% mutate(x=row_number())) +geom_col(aes(x,y))

# time: 2022-06-08 09:36:21 UTC
# mode: r
+x <- unlist(walk$probabilities[1000,1:9])

# time: 2022-06-08 09:36:22 UTC
# mode: r
+x

# time: 2022-06-08 09:36:32 UTC
# mode: r
+xx <- unlist(walk$probabilities[900,1:9])

# time: 2022-06-08 09:36:34 UTC
# mode: r
+x <- unlist(walk$probabilities[900,1:9])

# time: 2022-06-08 09:36:35 UTC
# mode: r
+ggplot(tibble(y=x) %>% mutate(x=row_number())) +geom_col(aes(x,y))

# time: 2022-06-08 09:36:44 UTC
# mode: r
+walk

# time: 2022-06-08 09:37:46 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) { 
+    if (value==0){
+        0
+    } else {
+    c((proposed/current)*0.5*value, 0.5*(1-3/4)*value, 0.5*value)
+
+    }
+}

# time: 2022-06-08 09:37:51 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:37:51 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:37:54 UTC
# mode: r
+line

# time: 2022-06-08 09:38:56 UTC
# mode: r
+a = list()

# time: 2022-06-08 09:39:03 UTC
# mode: r
+append(a, 1)

# time: 2022-06-08 09:39:08 UTC
# mode: r
+a = append(a, 1)

# time: 2022-06-08 09:39:09 UTC
# mode: r
+a

# time: 2022-06-08 09:39:11 UTC
# mode: r
+a = append(a, 1)

# time: 2022-06-08 09:39:14 UTC
# mode: r
+a

# time: 2022-06-08 09:40:30 UTC
# mode: r
+            proposed <- names(target_values)[p-1]

# time: 2022-06-08 09:40:32 UTC
# mode: r
+        target_values <- line([1:length(target_distribution)])

# time: 2022-06-08 09:40:42 UTC
# mode: r
+        target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:40:44 UTC
# mode: r
+            proposed <- names(target_values)[p-1]

# time: 2022-06-08 09:40:59 UTC
# mode: r
+            current <- names(target_values)][p]

# time: 2022-06-08 09:41:01 UTC
# mode: r
+            proposed <- names(target_values)[p-1]

# time: 2022-06-08 09:41:01 UTC
# mode: r
+            current <- names(target_values)][p]

# time: 2022-06-08 09:41:05 UTC
# mode: r
+            current <- names(target_values)[p]

# time: 2022-06-08 09:41:06 UTC
# mode: r
+            estimate  <- distribute_probabilities(p)

# time: 2022-06-08 09:41:21 UTC
# mode: r
+            estimate  <- distribute_probabilities(p, as.numeric(proposed), as.numeric(current))

# time: 2022-06-08 09:41:23 UTC
# mode: r
+estimate

# time: 2022-06-08 09:41:42 UTC
# mode: r
+p

# time: 2022-06-08 09:41:44 UTC
# mode: r
+        target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:41:45 UTC
# mode: r
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(p, as.numeric(proposed), as.numeric(current))
+        }

# time: 2022-06-08 09:41:52 UTC
# mode: r
+        new_probabilities <- list()

# time: 2022-06-08 09:41:52 UTC
# mode: r
+        target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:41:53 UTC
# mode: r
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(p, as.numeric(proposed), as.numeric(current))
+            print(estimate)
+        }

# time: 2022-06-08 09:42:28 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:42:28 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:42:29 UTC
# mode: r
+        new_probabilities <- list()

# time: 2022-06-08 09:42:29 UTC
# mode: r
+        target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:42:29 UTC
# mode: r
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(p, as.numeric(proposed), as.numeric(current))
+            new_probabilities <- append(new_probabilities, estimate)
+        }

# time: 2022-06-08 09:42:30 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}

# time: 2022-06-08 09:42:32 UTC
# mode: r
+        probabilities[i,] <- line

# time: 2022-06-08 09:42:37 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 09:42:37 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 09:42:38 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 09:42:40 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 09:42:40 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 09:42:40 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 09:42:41 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) { 
+    if (value==0){
+        0
+    } else {
+    c((proposed/current)*0.5*value, 0.5*(1-3/4)*value, 0.5*value)
+
+    }
+}

# time: 2022-06-08 09:42:42 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        new_probabilities <- list()
+        target_values <- line[1:length(target_distribution)]
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(p, as.numeric(proposed), as.numeric(current))
+            new_probabilities <- append(new_probabilities, estimate)
+        }
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}
+        probabilities[i,] <- line
+
+    }
+    }
+    list('walk' = walk, 'probabilities' = probabilities)
+}

# time: 2022-06-08 09:42:44 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 09:42:48 UTC
# mode: r
+x <- unlist(walk$probabilities[900,1:9])

# time: 2022-06-08 09:42:48 UTC
# mode: r
+ggplot(tibble(y=x) %>% mutate(x=row_number())) +geom_col(aes(x,y))

# time: 2022-06-08 09:42:54 UTC
# mode: r
+x <- unlist(walk$probabilities[900,1:9])

# time: 2022-06-08 09:42:56 UTC
# mode: r
+x

# time: 2022-06-08 09:42:59 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 09:43:00 UTC
# mode: r
+walk 

# time: 2022-06-08 09:43:21 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:43:22 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:43:22 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:43:22 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:43:24 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        new_probabilities <- list()
+        target_values <- line[1:length(target_distribution)]
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(p, as.numeric(proposed), as.numeric(current))
+            new_probabilities <- append(new_probabilities, estimate)
+        }
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}
+        probabilities[i,] <- line
+
+    }
+    }

# time: 2022-06-08 09:43:32 UTC
# mode: r
+    list('walk' = walk, 'probabilities' = probabilities)

# time: 2022-06-08 09:44:04 UTC
# mode: r
+            proposed <- names(target_values)[p-1]

# time: 2022-06-08 09:44:05 UTC
# mode: r
+            current <- names(target_values)[p]

# time: 2022-06-08 09:44:07 UTC
# mode: r
+proposd

# time: 2022-06-08 09:44:11 UTC
# mode: r
+proposed

# time: 2022-06-08 09:44:13 UTC
# mode: r
+current

# time: 2022-06-08 09:44:15 UTC
# mode: r
+            estimate  <- distribute_probabilities(p, as.numeric(proposed), as.numeric(current))

# time: 2022-06-08 09:44:17 UTC
# mode: r
+estimate

# time: 2022-06-08 09:44:40 UTC
# mode: r
+            estimate  <- distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current))

# time: 2022-06-08 09:44:43 UTC
# mode: r
+estimate

# time: 2022-06-08 09:44:49 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:44:49 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:44:50 UTC
# mode: r
+        target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:44:50 UTC
# mode: r
+        new_probabilities <- list()

# time: 2022-06-08 09:44:51 UTC
# mode: r
+        target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:44:51 UTC
# mode: r
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current))
+            new_probabilities <- append(new_probabilities, estimate)
+        }

# time: 2022-06-08 09:44:54 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 09:44:59 UTC
# mode: r
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}

# time: 2022-06-08 09:45:02 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 09:45:02 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 09:45:02 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 09:45:03 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 09:45:03 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 09:45:05 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 09:45:05 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 09:45:06 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 09:45:06 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) { 
+    if (value==0){
+        0
+    } else {
+    c((proposed/current)*0.5*value, 0.5*(1-3/4)*value, 0.5*value)
+
+    }
+}

# time: 2022-06-08 09:45:07 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        new_probabilities <- list()
+        target_values <- line[1:length(target_distribution)]
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current))
+            new_probabilities <- append(new_probabilities, estimate)
+        }
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}
+        probabilities[i,] <- line
+
+    }
+    }
+    list('walk' = walk, 'probabilities' = probabilities)
+}

# time: 2022-06-08 09:45:08 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 09:45:12 UTC
# mode: r
+wal

# time: 2022-06-08 09:45:14 UTC
# mode: r
+walk

# time: 2022-06-08 09:45:35 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 09:45:36 UTC
# mode: r
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        new_probabilities <- list()
+        target_values <- line[1:length(target_distribution)]
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current))
+            new_probabilities <- append(new_probabilities, estimate)
+        }
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}
+        probabilities[i,] <- line
+
+    }

# time: 2022-06-08 09:45:45 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+
+        choices <- get_choices(position)
+        move <- sample(choices, 1)
+        proposed <- move
+        current <- position
+        move <- shall_move(proposed, current)
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }
+        names(actual_step) <- i
+        walk <- c(walk, actual_step)
+
+        # update probabilities
+        line <- probabilities[i-1,]
+        line['step'] <- i
+        # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+        new_probabilities <- list()
+        target_values <- line[1:length(target_distribution)]
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current))
+            new_probabilities <- append(new_probabilities, estimate)
+        }
+        for (j in seq_along(new_probabilities)){
+            if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                    line[j] <- new_probabilities[j][[1]][2]
+                    line[j+1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                line[j-1] <- new_probabilities[j][[1]][1]
+                line[j] <- new_probabilities[j][[1]][2]
+                line[j+1] <- new_probabilities[j][[1]][3]
+            }
+                    
+        }}
+        print(line)
+        probabilities[i,] <- line
+
+    }
+    }

# time: 2022-06-08 09:46:05 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:46:06 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:46:06 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:46:06 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:46:11 UTC
# mode: r
+i=1

# time: 2022-06-08 09:46:12 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 09:46:12 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:46:13 UTC
# mode: r
+            probabilities[i, "step"] <- i

# time: 2022-06-08 09:46:17 UTC
# mode: r
+i=2

# time: 2022-06-08 09:46:18 UTC
# mode: r
+        choices <- get_choices(position)

# time: 2022-06-08 09:46:19 UTC
# mode: r
+        move <- sample(choices, 1)

# time: 2022-06-08 09:46:19 UTC
# mode: r
+        proposed <- move

# time: 2022-06-08 09:46:20 UTC
# mode: r
+        current <- position

# time: 2022-06-08 09:46:20 UTC
# mode: r
+        move <- shall_move(proposed, current)

# time: 2022-06-08 09:46:20 UTC
# mode: r
+        if (move) {
+            actual_step <- proposed
+            position <- proposed
+        } else {
+            actual_step <- current
+            position <- current
+        }

# time: 2022-06-08 09:46:21 UTC
# mode: r
+        names(actual_step) <- i

# time: 2022-06-08 09:46:22 UTC
# mode: r
+        walk <- c(walk, actual_step)

# time: 2022-06-08 09:46:23 UTC
# mode: r
+        line <- probabilities[i-1,]

# time: 2022-06-08 09:46:23 UTC
# mode: r
+        line['step'] <- i

# time: 2022-06-08 09:46:26 UTC
# mode: r
+line

# time: 2022-06-08 09:46:32 UTC
# mode: r
+        new_probabilities <- list()

# time: 2022-06-08 09:46:33 UTC
# mode: r
+        target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:46:38 UTC
# mode: r
+target_values

# time: 2022-06-08 09:46:40 UTC
# mode: r
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current))
+            new_probabilities <- append(new_probabilities, estimate)
+        }

# time: 2022-06-08 09:46:44 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 09:46:54 UTC
# mode: r
+            estimate  <- distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current))

# time: 2022-06-08 09:46:57 UTC
# mode: r
+estimate

# time: 2022-06-08 09:47:31 UTC
# mode: r
+            estimate  <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))

# time: 2022-06-08 09:47:34 UTC
# mode: r
+estimate

# time: 2022-06-08 09:47:36 UTC
# mode: r
+            new_probabilities <- append(new_probabilities, estimate)

# time: 2022-06-08 09:47:38 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 09:47:52 UTC
# mode: r
+        new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})

# time: 2022-06-08 09:48:02 UTC
# mode: r
+        new_probabilities <- list()

# time: 2022-06-08 09:48:03 UTC
# mode: r
+        target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:48:05 UTC
# mode: r
+        for (p in seq_along(target_values)) {
+            proposed <- names(target_values)[p-1]
+            current <- names(target_values)[p]
+            estimate  <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+            new_probabilities <- append(new_probabilities, estimate)
+        }

# time: 2022-06-08 09:48:08 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 09:48:48 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+    if (value == 0) {
+        0
+    } else {
+        list(c((proposed / current) * 0.5 * value, 0.5 * (1 - 3 / 4) * value, 0.5 * value))
+    }
+}

# time: 2022-06-08 09:48:50 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:48:50 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:48:50 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:48:51 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:48:52 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities <- append(new_probabilities, estimate)
+            }
+            for (j in seq_along(new_probabilities)) {
+                if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    }
+                }
+            }
+            print(line)
+            probabilities[i, ] <- line
+        }
+    }

# time: 2022-06-08 09:48:59 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - 3 / 4) * value, 0.5 * value))
+    }

# time: 2022-06-08 09:49:01 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities <- append(new_probabilities, estimate)
+            }
+            for (j in seq_along(new_probabilities)) {
+                if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    }
+                }
+            }
+            print(line)
+            probabilities[i, ] <- line
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 09:49:02 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 09:49:06 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 09:49:06 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 09:49:07 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 09:49:07 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:49:07 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities <- append(new_probabilities, estimate)
+            }

# time: 2022-06-08 09:49:19 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:49:19 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:49:19 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:49:20 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:49:24 UTC
# mode: r
+ = 1

# time: 2022-06-08 09:49:27 UTC
# mode: r
+i = 1

# time: 2022-06-08 09:49:32 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 09:49:33 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:49:33 UTC
# mode: r
+            probabilities[i, "step"] <- i

# time: 2022-06-08 09:49:37 UTC
# mode: r
+probabilities

# time: 2022-06-08 09:49:41 UTC
# mode: r
+i=2

# time: 2022-06-08 09:49:46 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 09:49:47 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 09:49:47 UTC
# mode: r
+            proposed <- move

# time: 2022-06-08 09:49:48 UTC
# mode: r
+            current <- position

# time: 2022-06-08 09:49:48 UTC
# mode: r
+            move <- shall_move(proposed, current)

# time: 2022-06-08 09:49:48 UTC
# mode: r
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }

# time: 2022-06-08 09:49:49 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 09:49:49 UTC
# mode: r
+            walk <- c(walk, actual_step)

# time: 2022-06-08 09:49:50 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 09:49:50 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 09:49:51 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 09:49:51 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:49:55 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities <- append(new_probabilities, estimate)
+            }

# time: 2022-06-08 09:50:03 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - 3 / 4) * value, 0.5 * value))
+    }

# time: 2022-06-08 09:50:06 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 09:50:07 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 09:50:07 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 09:50:08 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:50:08 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities <- append(new_probabilities, estimate)
+            }

# time: 2022-06-08 09:52:44 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 09:52:44 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 09:52:44 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 09:52:45 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 09:52:47 UTC
# mode: r
+=1

# time: 2022-06-08 09:52:49 UTC
# mode: r
+i=1

# time: 2022-06-08 09:52:51 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 09:52:51 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 09:52:51 UTC
# mode: r
+            probabilities[i, "step"] <- i

# time: 2022-06-08 09:52:54 UTC
# mode: r
+i=2

# time: 2022-06-08 09:52:56 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 09:52:56 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 09:52:56 UTC
# mode: r
+            proposed <- move

# time: 2022-06-08 09:52:57 UTC
# mode: r
+            current <- position

# time: 2022-06-08 09:52:57 UTC
# mode: r
+            move <- shall_move(proposed, current)

# time: 2022-06-08 09:52:57 UTC
# mode: r
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }

# time: 2022-06-08 09:52:58 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 09:52:58 UTC
# mode: r
+            walk <- c(walk, actual_step)

# time: 2022-06-08 09:52:59 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 09:52:59 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 09:52:59 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 09:53:00 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:53:01 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities <- append(new_probabilities, estimate)
+            }

# time: 2022-06-08 09:53:10 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - 3 / 4) * value, 0.5 * value))
+    }

# time: 2022-06-08 09:53:27 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - 3 / 4) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 09:53:30 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 09:53:30 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 09:53:31 UTC
# mode: r
+            proposed <- move

# time: 2022-06-08 09:53:31 UTC
# mode: r
+            current <- position

# time: 2022-06-08 09:53:31 UTC
# mode: r
+            move <- shall_move(proposed, current)

# time: 2022-06-08 09:53:31 UTC
# mode: r
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }

# time: 2022-06-08 09:53:32 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 09:53:32 UTC
# mode: r
+            walk <- c(walk, actual_step)

# time: 2022-06-08 09:53:33 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 09:53:33 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 09:53:34 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 09:53:34 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:53:34 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities <- append(new_probabilities, estimate)
+            }

# time: 2022-06-08 09:53:38 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 09:53:54 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 09:54:02 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:54:05 UTC
# mode: r
+target_values 

# time: 2022-06-08 09:54:20 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 09:54:20 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:54:20 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p] <- estimate
+            }

# time: 2022-06-08 09:54:27 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 09:54:27 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 09:54:28 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }

# time: 2022-06-08 09:54:30 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 09:54:33 UTC
# mode: r
+            for (j in seq_along(new_probabilities)) {
+                if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    }
+                }
+            }

# time: 2022-06-08 09:54:35 UTC
# mode: r
+            print(line)

# time: 2022-06-08 09:54:39 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 09:54:39 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 09:54:39 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 09:54:39 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 09:54:40 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 09:54:42 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 09:54:42 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 09:54:42 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 09:54:43 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - 3 / 4) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 09:54:44 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            for (j in seq_along(new_probabilities)) {
+                if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    }
+                }
+            }
+            print(line)
+            probabilities[i, ] <- line
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 09:54:48 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:55:40 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 09:55:40 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            for (j in seq_along(new_probabilities)) {
+                if (length(new_probabilities[j][[1]]) > 1) {
+                    if (j == 1) {
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    } else if (j == length(target_distribution)) {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                    } else {
+                        line[j - 1] <- new_probabilities[j][[1]][1]
+                        line[j] <- new_probabilities[j][[1]][2]
+                        line[j + 1] <- new_probabilities[j][[1]][3]
+                    }
+                }
+            }
+            print(line)
+            probabilities[i, ] <- line
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 09:55:42 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 09:57:07 UTC
# mode: r
+a = c(0.2,0.3, 0.1, 0.05)

# time: 2022-06-08 09:57:19 UTC
# mode: r
+b = c(0,0,0.2,0.02)

# time: 2022-06-08 09:57:21 UTC
# mode: r
+a+b

# time: 2022-06-08 09:58:02 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 09:58:07 UTC
# mode: r
+current

# time: 2022-06-08 09:58:32 UTC
# mode: r
+length = 9

# time: 2022-06-08 09:58:49 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 09:58:50 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 09:58:50 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 09:58:50 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 09:58:50 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 09:58:52 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 09:58:52 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 09:58:53 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 09:59:21 UTC
# mode: r
+current=0

# time: 2022-06-08 09:59:22 UTC
# mode: r
+current=9

# time: 2022-06-08 09:59:26 UTC
# mode: r
+proposed=9

# time: 2022-06-08 09:59:28 UTC
# mode: r
+proposed=8

# time: 2022-06-08 09:59:33 UTC
# mode: r
+value=0.5

# time: 2022-06-08 09:59:35 UTC
# mode: r
+        estimate[] <- c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)

# time: 2022-06-08 09:59:38 UTC
# mode: r
+    estimate <- rep(0, length)

# time: 2022-06-08 09:59:44 UTC
# mode: r
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)

# time: 2022-06-08 10:00:04 UTC
# mode: r
+    estimate <- rep(0, length)

# time: 2022-06-08 10:00:10 UTC
# mode: r
+length=9

# time: 2022-06-08 10:00:11 UTC
# mode: r
+    estimate <- rep(0, length)

# time: 2022-06-08 10:00:16 UTC
# mode: r
+estimate

# time: 2022-06-08 10:00:35 UTC
# mode: r
+estimate[proposed:current]

# time: 2022-06-08 10:00:49 UTC
# mode: r
+estimate[proposed:current+1]

# time: 2022-06-08 10:01:24 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:01:31 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 10:01:31 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 10:01:33 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 10:01:34 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 10:01:34 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 10:01:35 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 10:01:38 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 10:01:39 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 10:01:40 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 10:01:41 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 10:01:41 UTC
# mode: r
+            proposed <- move

# time: 2022-06-08 10:01:41 UTC
# mode: r
+            current <- position

# time: 2022-06-08 10:01:42 UTC
# mode: r
+            move <- shall_move(proposed, current)

# time: 2022-06-08 10:01:42 UTC
# mode: r
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }

# time: 2022-06-08 10:01:43 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 10:01:43 UTC
# mode: r
+            walk <- c(walk, actual_step)

# time: 2022-06-08 10:01:47 UTC
# mode: r
+i=2

# time: 2022-06-08 10:01:49 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 10:01:49 UTC
# mode: r
+            walk <- c(walk, actual_step)

# time: 2022-06-08 10:01:50 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:01:51 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 10:01:51 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 10:01:52 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 10:01:53 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }

# time: 2022-06-08 10:01:57 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:01:58 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 10:01:58 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:02:02 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 10:02:05 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:02:14 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 10:02:20 UTC
# mode: r
+n_steps=100

# time: 2022-06-08 10:02:22 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 10:02:22 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 10:02:22 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 10:02:23 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 10:02:25 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 10:02:25 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 10:02:25 UTC
# mode: r
+            proposed <- move

# time: 2022-06-08 10:02:26 UTC
# mode: r
+            current <- position

# time: 2022-06-08 10:02:26 UTC
# mode: r
+            move <- shall_move(proposed, current)

# time: 2022-06-08 10:02:26 UTC
# mode: r
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }

# time: 2022-06-08 10:02:27 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 10:02:27 UTC
# mode: r
+            walk <- c(walk, actual_step)

# time: 2022-06-08 10:02:28 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:02:29 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 10:02:30 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 10:02:30 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 10:02:31 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }

# time: 2022-06-08 10:02:34 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 10:02:40 UTC
# mode: r
+line[5]=1

# time: 2022-06-08 10:02:45 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:02:45 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 10:02:46 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 10:02:46 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 10:02:47 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }

# time: 2022-06-08 10:02:49 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 10:02:56 UTC
# mode: r
+                proposed <- names(target_values)[p - 1]

# time: 2022-06-08 10:02:57 UTC
# mode: r
+                current <- names(target_values)[p]

# time: 2022-06-08 10:02:57 UTC
# mode: r
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))

# time: 2022-06-08 10:03:00 UTC
# mode: r
+estimate

# time: 2022-06-08 10:03:06 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:03:09 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:03:10 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 10:03:12 UTC
# mode: r
+line

# time: 2022-06-08 10:03:17 UTC
# mode: r
+line[5]=1

# time: 2022-06-08 10:03:24 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 10:03:28 UTC
# mode: r
+target_values

# time: 2022-06-08 10:03:30 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }

# time: 2022-06-08 10:03:32 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 10:04:07 UTC
# mode: r
+new_probabilities[5][[1]]=c(0.4,0.04, 0.32)

# time: 2022-06-08 10:04:12 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 10:04:20 UTC
# mode: r
+new_probabilities[3][[1]]=c(0.4,0.04, 0.32)

# time: 2022-06-08 10:04:21 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 10:04:29 UTC
# mode: r
+sum(new_probabilities)

# time: 2022-06-08 10:04:37 UTC
# mode: r
+sum(unlist(new_probabilities))

# time: 2022-06-08 10:05:24 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:05:28 UTC
# mode: r
+sum_probabilities

# time: 2022-06-08 10:05:51 UTC
# mode: r
+            for (e in new_probabilities){
+                if (length(e[[1]])>1) {
+                    print(e)
+                }
+
+            }

# time: 2022-06-08 10:05:59 UTC
# mode: r
+            for (e in new_probabilities){
+                if (length(e)>1) {
+                    print(e)
+                }
+
+            }

# time: 2022-06-08 10:06:16 UTC
# mode: r
+            for (e in new_probabilities){
+                if (length(e)>1) {
+                    sum_probabilities <- sum(sum_probabilities,e)
+                }
+
+            }

# time: 2022-06-08 10:06:20 UTC
# mode: r
+sum_probabilities

# time: 2022-06-08 10:06:30 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:06:31 UTC
# mode: r
+            for (e in new_probabilities){
+                if (length(e)>1) {
+                    sum_probabilities <- sum_probabilities + e
+                }
+
+            }

# time: 2022-06-08 10:06:34 UTC
# mode: r
+sum_probabilities

# time: 2022-06-08 10:06:41 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:06:43 UTC
# mode: r
+e

# time: 2022-06-08 10:06:51 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:06:51 UTC
# mode: r
+            for (e in new_probabilities){
+                if (length(e)>1) {
+                    print(e)
+                    sum_probabilities <- sum_probabilities + e
+                }
+
+            }

# time: 2022-06-08 10:07:27 UTC
# mode: r
+e = 1

# time: 2022-06-08 10:07:34 UTC
# mode: r
+new_probabilities[e]

# time: 2022-06-08 10:07:37 UTC
# mode: r
+new_probabilities[e][[1]]

# time: 2022-06-08 10:10:57 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 10:13:30 UTC
# mode: r
+                    for (i in new_probabilities[e][[1]]) {
+                        print(i)
+                    }

# time: 2022-06-08 10:13:42 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-08 10:13:43 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    for (i in new_probabilities[e][[1]]) {
+                        print(i)
+                    }
+
+
+                }
+
+            }
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            print(line)
+            probabilities[i, ] <- line
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:13:54 UTC
# mode: r
+n_steps=100

# time: 2022-06-08 10:14:06 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 10:14:07 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 10:14:07 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 10:14:07 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 10:14:13 UTC
# mode: r
+i=1

# time: 2022-06-08 10:14:15 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 10:14:15 UTC
# mode: r
+            probabilities[i, starting_location] <- 1

# time: 2022-06-08 10:14:15 UTC
# mode: r
+            probabilities[i, "step"] <- i

# time: 2022-06-08 10:14:18 UTC
# mode: r
+i=2

# time: 2022-06-08 10:14:20 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 10:14:20 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 10:14:21 UTC
# mode: r
+            proposed <- move

# time: 2022-06-08 10:14:21 UTC
# mode: r
+            current <- position

# time: 2022-06-08 10:14:21 UTC
# mode: r
+            move <- shall_move(proposed, current)

# time: 2022-06-08 10:14:22 UTC
# mode: r
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }

# time: 2022-06-08 10:14:23 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 10:14:24 UTC
# mode: r
+            walk <- c(walk, actual_step)

# time: 2022-06-08 10:14:25 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:14:25 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 10:14:27 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 10:14:28 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 10:14:28 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }

# time: 2022-06-08 10:14:32 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 10:14:34 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:14:36 UTC
# mode: r
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    for (i in new_probabilities[e][[1]]) {
+                        print(i)
+                    }
+
+
+                }
+
+            }

# time: 2022-06-08 10:15:40 UTC
# mode: r
+                    actual_distribution <- sum_probabilities

# time: 2022-06-08 10:15:41 UTC
# mode: r
+                    actual_distribution[e-1] <- new_probabilities[e][[1]][1]

# time: 2022-06-08 10:15:41 UTC
# mode: r
+                    actual_distribution[e] <- new_probabilities[e][[1]][2]

# time: 2022-06-08 10:15:42 UTC
# mode: r
+                    actual_distribution[e+1] <- new_probabilities[e][[1]][3]

# time: 2022-06-08 10:15:47 UTC
# mode: r
+actual_distribution

# time: 2022-06-08 10:15:51 UTC
# mode: r
+e

# time: 2022-06-08 10:16:00 UTC
# mode: r
+ new_probabilities[e][[1]]

# time: 2022-06-08 10:16:05 UTC
# mode: r
+e = 6

# time: 2022-06-08 10:16:07 UTC
# mode: r
+                    actual_distribution <- sum_probabilities

# time: 2022-06-08 10:16:11 UTC
# mode: r
+                    actual_distribution[e-1] <- new_probabilities[e][[1]][1]

# time: 2022-06-08 10:16:11 UTC
# mode: r
+                    actual_distribution[e] <- new_probabilities[e][[1]][2]

# time: 2022-06-08 10:16:11 UTC
# mode: r
+                    actual_distribution[e+1] <- new_probabilities[e][[1]][3]

# time: 2022-06-08 10:16:15 UTC
# mode: r
+actual_distribution

# time: 2022-06-08 10:16:58 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:17:01 UTC
# mode: r
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } elif (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+
+
+                }
+
+            }

# time: 2022-06-08 10:17:12 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:17:12 UTC
# mode: r
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+
+
+                }
+
+            }

# time: 2022-06-08 10:17:17 UTC
# mode: r
+actual_distribution

# time: 2022-06-08 10:17:39 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:17:39 UTC
# mode: r
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+
+
+                }
+
+            }

# time: 2022-06-08 10:17:43 UTC
# mode: r
+sum_probabilities

# time: 2022-06-08 10:18:03 UTC
# mode: r
+            line[1:length(target_distribution)] <- sum_probabilities

# time: 2022-06-08 10:18:06 UTC
# mode: r
+            print(line)

# time: 2022-06-08 10:18:07 UTC
# mode: r
+            probabilities[i, ] <- line

# time: 2022-06-08 10:18:09 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 10:18:09 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 10:18:10 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 10:18:10 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 10:18:10 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:18:12 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:18:12 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:18:13 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:18:13 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:18:14 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+
+
+                }
+
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            print(line)
+            probabilities[i, ] <- line
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:18:15 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:18:35 UTC
# mode: r
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))

# time: 2022-06-08 10:18:35 UTC
# mode: r
+    colnames(probabilities) <- c(names(target_distribution), "step")

# time: 2022-06-08 10:18:35 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 10:18:36 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 10:18:36 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+
+
+                }
+
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            print(line)
+            probabilities[i, ] <- line
+        }
+    }

# time: 2022-06-08 10:18:46 UTC
# mode: r
+i

# time: 2022-06-08 10:18:49 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 10:18:50 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 10:18:50 UTC
# mode: r
+            proposed <- move

# time: 2022-06-08 10:18:51 UTC
# mode: r
+            current <- position

# time: 2022-06-08 10:18:51 UTC
# mode: r
+            move <- shall_move(proposed, current)

# time: 2022-06-08 10:18:51 UTC
# mode: r
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }

# time: 2022-06-08 10:18:52 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 10:18:52 UTC
# mode: r
+            walk <- c(walk, actual_step)

# time: 2022-06-08 10:18:53 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:18:54 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 10:18:55 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 10:18:56 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 10:18:56 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                proposed <- names(target_values)[p - 1]
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }

# time: 2022-06-08 10:18:58 UTC
# mode: r
+                proposed <- names(target_values)[p - 1]

# time: 2022-06-08 10:18:59 UTC
# mode: r
+                current <- names(target_values)[p]

# time: 2022-06-08 10:19:00 UTC
# mode: r
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))

# time: 2022-06-08 10:19:14 UTC
# mode: r
+target_values[p]

# time: 2022-06-08 10:19:17 UTC
# mode: r
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))

# time: 2022-06-08 10:19:29 UTC
# mode: r
+proposed

# time: 2022-06-08 10:19:36 UTC
# mode: r
+                proposed <- names(target_values)[p - 1]

# time: 2022-06-08 10:19:39 UTC
# mode: r
+proposed

# time: 2022-06-08 10:19:42 UTC
# mode: r
+current

# time: 2022-06-08 10:20:13 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+
+
+                }
+
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            print(line)
+            probabilities[i, ] <- line
+        }
+    }

# time: 2022-06-08 10:20:20 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 10:20:20 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 10:20:21 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 10:20:21 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 10:20:21 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:20:23 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:20:24 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:20:24 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:20:25 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:20:43 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:20:45 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:21:33 UTC
# mode: r
+walk

# time: 2022-06-08 10:21:57 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 10:21:57 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 10:21:57 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 10:21:58 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:21:59 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:22:00 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:22:00 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:22:01 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:22:01 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:22:02 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:22:20 UTC
# mode: r
+x <- unlist(walk$probabilities[10, 1:9])

# time: 2022-06-08 10:22:20 UTC
# mode: r
+ggplot(tibble(y = x) %>% mutate(x = row_number())) +
+    geom_col(aes(x, y))

# time: 2022-06-08 10:23:27 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-08 10:23:29 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:23:31 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:23:31 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:23:32 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:23:32 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:23:33 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            print(new_probabilities)
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:23:34 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:24:12 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 10:24:13 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 10:24:13 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 10:24:13 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 10:24:14 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:24:16 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:24:16 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:24:16 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:24:17 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:24:17 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 2
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            print(new_probabilities)
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:24:18 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:24:46 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 10:24:46 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 10:24:46 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 10:24:47 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 10:24:47 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:24:49 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:24:49 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:24:50 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:24:50 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else if(proposed<0) {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:24:51 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 2
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            print(new_probabilities)
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:24:52 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:25:49 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current, length) {
+    if (value == 0) {
+        0
+    } else {
+        c((proposed / current) * 0.5 * value, 0.5 * (1 - proposed/current) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:25:50 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 2
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            print(new_probabilities)
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:25:52 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:32:40 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 10:32:40 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 10:32:40 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 10:32:41 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 10:32:41 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:32:43 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:32:43 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:32:44 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:32:44 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:32:45 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 2
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            print(new_probabilities)
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:32:46 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:33:21 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 2
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            print(new_probabilities)
+            sum_probabilities <- rep(0, length(target_distribution))
+            print(sum_probabilities)
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:33:22 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:33:47 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 2
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            print(new_probabilities)
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    print(actual_distribution)
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:33:48 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:34:43 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-08 10:34:44 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:34:45 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:34:45 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:34:46 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:34:46 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:34:47 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:34:52 UTC
# mode: r
+x <- unlist(walk$probabilities[10, 1:9])

# time: 2022-06-08 10:34:53 UTC
# mode: r
+ggplot(tibble(y = x) %>% mutate(x = row_number())) +
+ggplot(tibble(y = x) %>% mutate(x = row_number())) +
+    geom_col(aes(x, y))

# time: 2022-06-08 10:34:54 UTC
# mode: r
+ggplot(tibble(y = x) %>% mutate(x = row_number())) +
+    geom_col(aes(x, y))

# time: 2022-06-08 10:35:24 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            print(new_probabilities)
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:35:25 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:36:20 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:36:23 UTC
# mode: r
+line

# time: 2022-06-08 10:36:27 UTC
# mode: r
+=4

# time: 2022-06-08 10:36:30 UTC
# mode: r
+i=4

# time: 2022-06-08 10:36:37 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 10:36:38 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 10:36:38 UTC
# mode: r
+            proposed <- move

# time: 2022-06-08 10:36:38 UTC
# mode: r
+            current <- position

# time: 2022-06-08 10:36:38 UTC
# mode: r
+            move <- shall_move(proposed, current)

# time: 2022-06-08 10:36:39 UTC
# mode: r
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }

# time: 2022-06-08 10:36:39 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 10:36:40 UTC
# mode: r
+            walk <- c(walk, actual_step)

# time: 2022-06-08 10:36:40 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:36:41 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 10:36:43 UTC
# mode: r
+line

# time: 2022-06-08 10:36:54 UTC
# mode: r
+sum(line[1:9])

# time: 2022-06-08 10:37:16 UTC
# mode: r
+i = 3

# time: 2022-06-08 10:37:18 UTC
# mode: r
+            line <- probabilities[i - 1, ]

# time: 2022-06-08 10:37:19 UTC
# mode: r
+            line["step"] <- i

# time: 2022-06-08 10:37:21 UTC
# mode: r
+line

# time: 2022-06-08 10:37:24 UTC
# mode: r
+sum(line)

# time: 2022-06-08 10:37:28 UTC
# mode: r
+sum(line[1:9])

# time: 2022-06-08 10:37:39 UTC
# mode: r
+            new_probabilities <- list()

# time: 2022-06-08 10:37:39 UTC
# mode: r
+            target_values <- line[1:length(target_distribution)]

# time: 2022-06-08 10:37:40 UTC
# mode: r
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }

# time: 2022-06-08 10:37:43 UTC
# mode: r
+new_probabilities

# time: 2022-06-08 10:37:57 UTC
# mode: r
+sum(new_probabilities)

# time: 2022-06-08 10:38:06 UTC
# mode: r
+sum(unlist(new_probabilities))

# time: 2022-06-08 10:38:10 UTC
# mode: r
+            print(new_probabilities)

# time: 2022-06-08 10:38:10 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:38:11 UTC
# mode: r
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }

# time: 2022-06-08 10:38:15 UTC
# mode: r
+sum_probabilities

# time: 2022-06-08 10:38:22 UTC
# mode: r
+sum(sum_probabilities)

# time: 2022-06-08 10:38:59 UTC
# mode: r
+            print(new_probabilities)

# time: 2022-06-08 10:39:01 UTC
# mode: r
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    print(new_probabilities[e][[1]])
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }

# time: 2022-06-08 10:39:12 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:39:13 UTC
# mode: r
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    print(e)
+                    print(new_probabilities[e][[1]])
+                    actual_distribution <- sum_probabilities
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }

# time: 2022-06-08 10:40:07 UTC
# mode: r
+sum_probabilities

# time: 2022-06-08 10:40:45 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:40:45 UTC
# mode: r
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    print(e)
+                    print(new_probabilities[e][[1]])
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }

# time: 2022-06-08 10:40:48 UTC
# mode: r
+sum_probabilities

# time: 2022-06-08 10:40:55 UTC
# mode: r
+sum(sum_probabilities)

# time: 2022-06-08 10:41:01 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 10:41:01 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 10:41:02 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 10:41:02 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 10:41:02 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:41:04 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:41:05 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:41:05 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:41:06 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:41:06 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:41:07 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:41:12 UTC
# mode: r
+ggplot(tibble(y = x) %>% mutate(x = row_number())) +
+x <- unlist(walk$probabilities[10, 1:9])

# time: 2022-06-08 10:41:12 UTC
# mode: r
+x <- unlist(walk$probabilities[10, 1:9])

# time: 2022-06-08 10:41:13 UTC
# mode: r
+ggplot(tibble(y = x) %>% mutate(x = row_number())) +
+    geom_col(aes(x, y))

# time: 2022-06-08 10:41:25 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 100)

# time: 2022-06-08 10:41:30 UTC
# mode: r
+x <- unlist(walk$probabilities[100, 1:9])

# time: 2022-06-08 10:41:31 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-08 10:41:41 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 100)

# time: 2022-06-08 10:41:43 UTC
# mode: r
+x <- unlist(walk$probabilities[100, 1:9])

# time: 2022-06-08 10:41:44 UTC
# mode: r
+ggplot(tibble(y = x) %>% mutate(x = row_number())) +
+    geom_col(aes(x, y))

# time: 2022-06-08 10:41:58 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 10:42:08 UTC
# mode: r
+x <- unlist(walk$probabilities[1000, 1:9])

# time: 2022-06-08 10:42:09 UTC
# mode: r
+ggplot(tibble(y = x) %>% mutate(x = row_number())) +
+    geom_col(aes(x, y))

# time: 2022-06-08 10:42:37 UTC
# mode: r
+            sum_probabilities <- rep(0, length(target_distribution))

# time: 2022-06-08 10:42:38 UTC
# mode: r
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }

# time: 2022-06-08 10:43:14 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 10:43:14 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 10:43:14 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 10:43:14 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 10:43:15 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:43:17 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:43:17 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:43:17 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:43:18 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:43:19 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                    if (sum(sum_probabilities != 1)) {warning("Estimation is off, sumP is not 1.0")}
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:43:20 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 10:43:36 UTC
# mode: r
+warnings()

# time: 2022-06-08 10:44:14 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 10:44:14 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 10:44:15 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 10:44:15 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 10:44:15 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:44:17 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:44:18 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:44:18 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:44:19 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:44:19 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                    if (sum(sum_probabilities != 1)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, "iteration"))}
+                }
+            }
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:44:20 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 10:44:29 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:44:44 UTC
# mode: r
+warnings()

# time: 2022-06-08 10:44:59 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-08 10:45:00 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 10:45:02 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 10:45:02 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 10:45:03 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 10:45:03 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 10:45:04 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            if (sum(sum_probabilities != 1)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, "iteration"))}
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:45:05 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:45:20 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            if (sum(sum_probabilities != 1)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration"))}
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:45:22 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:45:57 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            if (sum(sum_probabilities != 1)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:45:58 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:46:56 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            if (!all.equal(sum(sum_probabilities1), 1)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:46:57 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:47:10 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            if (!all.equal(sum(sum_probabilities), 1)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:47:13 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:47:25 UTC
# mode: r
+sum(sum_probabilities)

# time: 2022-06-08 10:47:36 UTC
# mode: r
+all.equal(sum(sum_probabilities),1)

# time: 2022-06-08 10:47:53 UTC
# mode: r
+            if (!all.equal(sum(sum_probabilities), 1)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}

# time: 2022-06-08 10:48:03 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            if (!all.equal(sum(sum_probabilities), 1)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:48:04 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 10:48:29 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            if (!all.equal(sum(sum_probabilities), 1.0)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 10:48:31 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 20:01:33 UTC
# mode: r
+library(markovchain) 

# time: 2022-06-08 20:01:35 UTC
# mode: r
+sequence <- c("a", "b", "a", "a", "a", "a", "b", "a", "b", "a", 
+              "b", "a", "a", "b", "b", "b", "a")

# time: 2022-06-08 20:01:37 UTC
# mode: r
+mcFit <- markovchainFit(data=sequence)

# time: 2022-06-08 20:01:40 UTC
# mode: r
+mcFit

# time: 2022-06-08 20:02:37 UTC
# mode: r
+markovchainFit

# time: 2022-06-08 20:03:06 UTC
# mode: r
+mcFit <- markovchainFit(data=sequence, sanitize = T)

# time: 2022-06-08 20:03:10 UTC
# mode: r
+mcFit

# time: 2022-06-08 20:04:38 UTC
# mode: r
+trans.matrix <- function(X, prob=T)
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 20:04:38 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 20:04:41 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 20:04:42 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 20:04:51 UTC
# mode: r
+trans.matrux(as.matrix(target_distribution))

# time: 2022-06-08 20:04:58 UTC
# mode: r
+trans.matrix(as.matrix(target_distribution))

# time: 2022-06-08 20:05:06 UTC
# mode: r
+trans.matrix <- function(X, prob=T)
+{
+    tt <- table( c(X[,-ncol(X)]), c(X[,-1]) )
+    if(prob) tt <- tt / rowSums(tt)
+    tt
+}

# time: 2022-06-08 20:05:07 UTC
# mode: r
+trans.matrix(as.matrix(target_distribution))

# time: 2022-06-08 20:05:18 UTC
# mode: r
+as.matrix(target_distribution)

# time: 2022-06-08 20:05:30 UTC
# mode: r
+trans.matrix(as.matrix(t(target_distribution)))

# time: 2022-06-08 20:05:48 UTC
# mode: r
+trans.matrix(as.matrix(t(target_distribution)), prob=T)

# time: 2022-06-08 20:05:55 UTC
# mode: r
+trans.matrix(as.matrix(t(target_distribution)), prob=F)

# time: 2022-06-08 20:07:34 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 20:07:34 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 20:07:34 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 20:07:35 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 20:07:35 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 20:07:37 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 20:07:37 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 20:07:38 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 20:07:39 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 20:07:39 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    probabilities <- data.frame(matrix(
+        ncol = length(target_distribution) + 1,
+        nrow = n_steps, data = 0
+    ))
+    colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            probabilities[i, starting_location] <- 1
+            probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            line <- probabilities[i - 1, ]
+            line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            new_probabilities <- list()
+            target_values <- line[1:length(target_distribution)]
+            for (p in seq_along(target_values)) {
+                if (p==1){
+                    proposed = 1
+                } else {
+                    proposed <- names(target_values)[p - 1]
+                }
+                current <- names(target_values)[p]
+                estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+                new_probabilities[p][[1]] <- estimate
+            }
+            sum_probabilities <- rep(0, length(target_distribution))
+            for (e in seq_along(new_probabilities)){
+                if (length(new_probabilities[e][[1]])>1) {
+                    actual_distribution <- rep(0, length(target_distribution))
+                    if (e==1){
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+                    } else if (e==length(target_distribution)) {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+                    } else {
+                        actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+                        actual_distribution[e] <- new_probabilities[e][[1]][2]
+                        actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+                    }
+                    sum_probabilities <- sum_probabilities+actual_distribution
+                }
+            }
+            if (!all.equal(sum(sum_probabilities), 1.0)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            probabilities[i, ] <- line
+            # print(line)
+        }
+    }
+    list("walk" = walk, "probabilities" = probabilities)
+}

# time: 2022-06-08 20:07:42 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 20:08:38 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 20:08:39 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 20:08:39 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 20:08:40 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 20:08:40 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 20:08:42 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 20:08:42 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 20:08:43 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 20:08:45 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 20:08:45 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    # probabilities <- data.frame(matrix(
+    #     ncol = length(target_distribution) + 1,
+    #     nrow = n_steps, data = 0
+    # ))
+    # colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # probabilities[i, starting_location] <- 1
+            # probabilities[i, "step"] <- i
+        } else {
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            # line <- probabilities[i - 1, ]
+            # line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            # new_probabilities <- list()
+            # target_values <- line[1:length(target_distribution)]
+            # for (p in seq_along(target_values)) {
+            #     if (p==1){
+            #         proposed = 1
+            #     } else {
+            #         proposed <- names(target_values)[p - 1]
+            #     }
+            #     current <- names(target_values)[p]
+            #     estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+            #     new_probabilities[p][[1]] <- estimate
+            # }
+            # sum_probabilities <- rep(0, length(target_distribution))
+            # for (e in seq_along(new_probabilities)){
+            #     if (length(new_probabilities[e][[1]])>1) {
+            #         actual_distribution <- rep(0, length(target_distribution))
+            #         if (e==1){
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+            #         } else if (e==length(target_distribution)) {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+            #         } else {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+            #         }
+            #         sum_probabilities <- sum_probabilities+actual_distribution
+            #     }
+            # }
+            # if (!all.equal(sum(sum_probabilities), 1.0)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            # line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            # probabilities[i, ] <- line
+            # # print(line)
+        }
+    }
+    # list("walk" = walk, "probabilities" = probabilities)
+    walk
+}

# time: 2022-06-08 20:08:47 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 20:08:50 UTC
# mode: r
+walk

# time: 2022-06-08 20:09:12 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    # probabilities <- data.frame(matrix(
+    #     ncol = length(target_distribution) + 1,
+    #     nrow = n_steps, data = 0
+    # ))
+    # colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # probabilities[i, starting_location] <- 1
+            # probabilities[i, "step"] <- i
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            # line <- probabilities[i - 1, ]
+            # line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            # new_probabilities <- list()
+            # target_values <- line[1:length(target_distribution)]
+            # for (p in seq_along(target_values)) {
+            #     if (p==1){
+            #         proposed = 1
+            #     } else {
+            #         proposed <- names(target_values)[p - 1]
+            #     }
+            #     current <- names(target_values)[p]
+            #     estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+            #     new_probabilities[p][[1]] <- estimate
+            # }
+            # sum_probabilities <- rep(0, length(target_distribution))
+            # for (e in seq_along(new_probabilities)){
+            #     if (length(new_probabilities[e][[1]])>1) {
+            #         actual_distribution <- rep(0, length(target_distribution))
+            #         if (e==1){
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+            #         } else if (e==length(target_distribution)) {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+            #         } else {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+            #         }
+            #         sum_probabilities <- sum_probabilities+actual_distribution
+            #     }
+            # }
+            # if (!all.equal(sum(sum_probabilities), 1.0)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            # line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            # probabilities[i, ] <- line
+            # # print(line)
+        }
+    }

# time: 2022-06-08 20:09:15 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 20:09:19 UTC
# mode: r
+walk

# time: 2022-06-08 20:09:29 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 20:09:30 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 20:09:54 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 20:09:55 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 20:09:57 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-08 20:09:59 UTC
# mode: r
+            choices <- get_choices(position)

# time: 2022-06-08 20:09:59 UTC
# mode: r
+            move <- sample(choices, 1)

# time: 2022-06-08 20:10:00 UTC
# mode: r
+            proposed <- move

# time: 2022-06-08 20:10:00 UTC
# mode: r
+            current <- position

# time: 2022-06-08 20:10:01 UTC
# mode: r
+            move <- shall_move(proposed, current)

# time: 2022-06-08 20:10:01 UTC
# mode: r
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }

# time: 2022-06-08 20:10:02 UTC
# mode: r
+            names(actual_step) <- i

# time: 2022-06-08 20:10:07 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # probabilities[i, starting_location] <- 1
+            # probabilities[i, "step"] <- i
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            # line <- probabilities[i - 1, ]
+            # line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            # new_probabilities <- list()
+            # target_values <- line[1:length(target_distribution)]
+            # for (p in seq_along(target_values)) {
+            #     if (p==1){
+            #         proposed = 1
+            #     } else {
+            #         proposed <- names(target_values)[p - 1]
+            #     }
+            #     current <- names(target_values)[p]
+            #     estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+            #     new_probabilities[p][[1]] <- estimate
+            # }
+            # sum_probabilities <- rep(0, length(target_distribution))
+            # for (e in seq_along(new_probabilities)){
+            #     if (length(new_probabilities[e][[1]])>1) {
+            #         actual_distribution <- rep(0, length(target_distribution))
+            #         if (e==1){
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+            #         } else if (e==length(target_distribution)) {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+            #         } else {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+            #         }
+            #         sum_probabilities <- sum_probabilities+actual_distribution
+            #     }
+            # }
+            # if (!all.equal(sum(sum_probabilities), 1.0)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            # line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            # probabilities[i, ] <- line
+            # # print(line)
+        }

# time: 2022-06-08 20:10:15 UTC
# mode: r
+n_steps=1000

# time: 2022-06-08 20:10:21 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    # probabilities <- data.frame(matrix(
+    #     ncol = length(target_distribution) + 1,
+    #     nrow = n_steps, data = 0
+    # ))
+    # colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # probabilities[i, starting_location] <- 1
+            # probabilities[i, "step"] <- i
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            # line <- probabilities[i - 1, ]
+            # line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            # new_probabilities <- list()
+            # target_values <- line[1:length(target_distribution)]
+            # for (p in seq_along(target_values)) {
+            #     if (p==1){
+            #         proposed = 1
+            #     } else {
+            #         proposed <- names(target_values)[p - 1]
+            #     }
+            #     current <- names(target_values)[p]
+            #     estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+            #     new_probabilities[p][[1]] <- estimate
+            # }
+            # sum_probabilities <- rep(0, length(target_distribution))
+            # for (e in seq_along(new_probabilities)){
+            #     if (length(new_probabilities[e][[1]])>1) {
+            #         actual_distribution <- rep(0, length(target_distribution))
+            #         if (e==1){
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+            #         } else if (e==length(target_distribution)) {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+            #         } else {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+            #         }
+            #         sum_probabilities <- sum_probabilities+actual_distribution
+            #     }
+            # }
+            # if (!all.equal(sum(sum_probabilities), 1.0)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            # line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            # probabilities[i, ] <- line
+            # # print(line)
+        }
+    }

# time: 2022-06-08 20:10:24 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 20:10:27 UTC
# mode: r
+walk

# time: 2022-06-08 20:10:37 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 20:10:37 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 20:10:38 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # probabilities[i, starting_location] <- 1
+            # probabilities[i, "step"] <- i
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            # line <- probabilities[i - 1, ]
+            # line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            # new_probabilities <- list()
+            # target_values <- line[1:length(target_distribution)]
+            # for (p in seq_along(target_values)) {
+            #     if (p==1){
+            #         proposed = 1
+            #     } else {
+            #         proposed <- names(target_values)[p - 1]
+            #     }
+            #     current <- names(target_values)[p]
+            #     estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+            #     new_probabilities[p][[1]] <- estimate
+            # }
+            # sum_probabilities <- rep(0, length(target_distribution))
+            # for (e in seq_along(new_probabilities)){
+            #     if (length(new_probabilities[e][[1]])>1) {
+            #         actual_distribution <- rep(0, length(target_distribution))
+            #         if (e==1){
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+            #         } else if (e==length(target_distribution)) {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+            #         } else {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+            #         }
+            #         sum_probabilities <- sum_probabilities+actual_distribution
+            #     }
+            # }
+            # if (!all.equal(sum(sum_probabilities), 1.0)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            # line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            # probabilities[i, ] <- line
+            # # print(line)
+        }

# time: 2022-06-08 20:10:40 UTC
# mode: r
+    walk

# time: 2022-06-08 20:11:37 UTC
# mode: r
+    starting <- c()

# time: 2022-06-08 20:11:38 UTC
# mode: r
+    ending <- c()

# time: 2022-06-08 20:12:40 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-08 20:12:41 UTC
# mode: r
+library(magrittr)

# time: 2022-06-08 20:12:41 UTC
# mode: r
+library(tibble)

# time: 2022-06-08 20:12:41 UTC
# mode: r
+library(dplyr)

# time: 2022-06-08 20:12:42 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-08 20:12:43 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-08 20:12:43 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-08 20:12:44 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-08 20:12:44 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-08 20:12:45 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    # TODO: estimate probabilities per step
+    # TODO: register position too
+    # probabilities <- data.frame(matrix(
+    #     ncol = length(target_distribution) + 1,
+    #     nrow = n_steps, data = 0
+    # ))
+    # colnames(probabilities) <- c(names(target_distribution), "step")
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # probabilities[i, starting_location] <- 1
+            # probabilities[i, "step"] <- i
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            starting <- c(starting, position)
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+            # update probabilities
+            # line <- probabilities[i - 1, ]
+            # line["step"] <- i
+            # new_probabilities <- lapply(line[1:length(target_distribution)], function(x){distribute_probabilities(x)})
+            # new_probabilities <- list()
+            # target_values <- line[1:length(target_distribution)]
+            # for (p in seq_along(target_values)) {
+            #     if (p==1){
+            #         proposed = 1
+            #     } else {
+            #         proposed <- names(target_values)[p - 1]
+            #     }
+            #     current <- names(target_values)[p]
+            #     estimate <- as.numeric(distribute_probabilities(target_values[p], as.numeric(proposed), as.numeric(current)))
+            #     new_probabilities[p][[1]] <- estimate
+            # }
+            # sum_probabilities <- rep(0, length(target_distribution))
+            # for (e in seq_along(new_probabilities)){
+            #     if (length(new_probabilities[e][[1]])>1) {
+            #         actual_distribution <- rep(0, length(target_distribution))
+            #         if (e==1){
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+
+            #         } else if (e==length(target_distribution)) {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+
+            #         } else {
+            #             actual_distribution[e-1] <- new_probabilities[e][[1]][1]
+            #             actual_distribution[e] <- new_probabilities[e][[1]][2]
+            #             actual_distribution[e+1] <- new_probabilities[e][[1]][3]
+            #         }
+            #         sum_probabilities <- sum_probabilities+actual_distribution
+            #     }
+            # }
+            # if (!all.equal(sum(sum_probabilities), 1.0)) {warning(paste0("Estimation is off, sumP is not 1.0 at ", i, " iteration; it is ", sum(sum_probabilities)))}
+            # line[1:length(target_distribution)] <- sum_probabilities
+            # for (j in seq_along(new_probabilities)) {
+            #     if (length(new_probabilities[j][[1]]) > 1) {
+            #         if (j == 1) {
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         } else if (j == length(target_distribution)) {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #         } else {
+            #             line[j - 1] <- new_probabilities[j][[1]][1]
+            #             line[j] <- new_probabilities[j][[1]][2]
+            #             line[j + 1] <- new_probabilities[j][[1]][3]
+            #         }
+            #     }
+            # }
+            # probabilities[i, ] <- line
+            # # print(line)
+        }
+    }

# time: 2022-06-08 20:12:47 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 10)

# time: 2022-06-08 20:12:50 UTC
# mode: r
+walk

# time: 2022-06-08 20:12:58 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 20:13:01 UTC
# mode: r
+walk

# time: 2022-06-08 20:13:38 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            starting <- c(starting, position)
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+    }
+    list(walk, data.frame(starting, ending))
+}

# time: 2022-06-08 20:13:49 UTC
# mode: r
+make_random_walk(target_distribution, 1000)

# time: 2022-06-08 20:14:09 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 20:14:10 UTC
# mode: r
+    starting <- c()

# time: 2022-06-08 20:14:10 UTC
# mode: r
+    ending <- c()

# time: 2022-06-08 20:14:10 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 20:14:12 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            starting <- c(starting, position)
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+
+    }

# time: 2022-06-08 20:14:23 UTC
# mode: r
+    table(starting, ending)

# time: 2022-06-08 20:14:43 UTC
# mode: r
+make_random_walk(target_distribution, 1000)

# time: 2022-06-08 20:14:49 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-08 20:14:50 UTC
# mode: r
+plot(walk[1:500], type = "l")

# time: 2022-06-08 20:14:56 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            starting <- c(starting, position)
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    table(starting, ending)
+    list(walk, data.frame(starting, ending))
+}

# time: 2022-06-08 20:14:58 UTC
# mode: r
+make_random_walk(target_distribution, 1000)

# time: 2022-06-08 20:15:05 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-08 20:15:07 UTC
# mode: r
+walk

# time: 2022-06-08 20:15:20 UTC
# mode: r
+plot(walk$walk[1:500], type = "l")

# time: 2022-06-08 20:15:29 UTC
# mode: r
+walk$walk

# time: 2022-06-08 20:15:34 UTC
# mode: r
+walk

# time: 2022-06-08 20:15:43 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 20:15:43 UTC
# mode: r
+    starting <- c()

# time: 2022-06-08 20:15:43 UTC
# mode: r
+    ending <- c()

# time: 2022-06-08 20:15:44 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 20:15:45 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            starting <- c(starting, position)
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }

# time: 2022-06-08 20:15:48 UTC
# mode: r
+walk

# time: 2022-06-08 20:16:00 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            starting <- c(starting, position)
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    table(starting, ending)
+    walk
+}

# time: 2022-06-08 20:16:01 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-08 20:16:04 UTC
# mode: r
+walk

# time: 2022-06-08 20:16:06 UTC
# mode: r
+plot(walk$walk[1:500], type = "l")

# time: 2022-06-08 20:16:13 UTC
# mode: r
+plot(walk[1:500], type = "l")

# time: 2022-06-08 20:16:17 UTC
# mode: r
+plot_walk <- function(walk) {
+    tibble(walk = walk) %>%
+        mutate(step = row_number()) %>%
+        ggplot() +
+        geom_path(aes(step, walk), alpha = 1 / 2, color = "cornflowerblue") +
+        geom_point(aes(step, walk),
+            alpha = 1 / 1.5,
+            color = "cornflowerblue", size = 3
+        ) +
+        geom_point(aes(step, walk),
+            alpha = 1 / 1.5,
+            color = "white", size = 2
+        ) +
+        theme_light()
+}

# time: 2022-06-08 20:16:18 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-08 20:16:26 UTC
# mode: r
+    table(starting, ending)

# time: 2022-06-08 20:16:58 UTC
# mode: r
+    walk <- c()

# time: 2022-06-08 20:16:58 UTC
# mode: r
+    starting <- c()

# time: 2022-06-08 20:16:59 UTC
# mode: r
+    ending <- c()

# time: 2022-06-08 20:16:59 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-08 20:17:00 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }

# time: 2022-06-08 20:17:01 UTC
# mode: r
+    table(starting, ending)

# time: 2022-06-08 20:17:21 UTC
# mode: r
+    trans.matrix(table(starting, ending))

# time: 2022-06-08 20:17:36 UTC
# mode: r
+    table(starting, ending)

# time: 2022-06-08 20:18:08 UTC
# mode: r
+    TT <- table(starting, ending)

# time: 2022-06-08 20:18:21 UTC
# mode: r
+        TT <- TT/rowSums(TT)

# time: 2022-06-08 20:18:23 UTC
# mode: r
+TT

# time: 2022-06-08 20:19:31 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/rowSums(TT)
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-08 20:19:33 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-08 20:19:37 UTC
# mode: r
+walk

# time: 2022-06-08 20:19:51 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000, transition = T)

# time: 2022-06-08 20:19:53 UTC
# mode: r
+walk

# time: 2022-06-08 20:20:17 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/rowSums(n_steps)
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-08 20:20:24 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000, transition = T, prob=T)

# time: 2022-06-08 20:20:42 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000, transition = T, prob=T)make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-08 20:20:47 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-08 20:21:08 UTC
# mode: r
+make_random_walk(target_distribution, 1000, prob=T, transition=T)

# time: 2022-06-08 20:21:44 UTC
# mode: r
+TT=make_random_walk(target_distribution, 1000, prob=T, transition=T)

# time: 2022-06-08 20:21:55 UTC
# mode: r
+colSums(TT)

# time: 2022-06-08 20:22:01 UTC
# mode: r
+plot(colSums(TT))

# time: 2022-06-08 20:23:16 UTC
# mode: r
+TT=make_random_walk(target_distribution, 100000, prob=T, transition=T)

# time: 2022-06-08 20:23:33 UTC
# mode: r
+TT=make_random_walk(target_distribution, 10000, prob=T, transition=T)

# time: 2022-06-08 20:23:37 UTC
# mode: r
+plot(colSums(TT))

# time: 2022-06-08 20:23:50 UTC
# mode: r
+    TT <- table(starting, ending)

# time: 2022-06-08 20:23:53 UTC
# mode: r
+ TT

# time: 2022-06-10 08:12:32 UTC
# mode: r
+library(stringr)
+library(tidytext)
+library(readr)
+library(magrittr)
+library(dplyr)
+library(tibble)
+library(textclean)
+library(ggplot2)
+library(tidyr)
+library(topicmodels)
+library(igraph)
+library(ggraph)
+library(wordnet)
+
+remove_URL <- function(text) {
+    text <- replace_url(text)[[1]]
+    text
+}
+
+
+prefilter_text <- function(texts) {
+    texts <- unlist(texts)
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "_", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        str_replace_all(x, "[0-9]", "")
+    }))
+    texts <- unlist(lapply(texts, function(x) {
+        remove_URL(x)
+    }))
+    unlist(texts)
+}

# time: 2022-06-10 08:12:52 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-10 08:12:55 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv")

# time: 2022-06-10 08:12:59 UTC
# mode: r
+reddit_daa

# time: 2022-06-10 08:13:00 UTC
# mode: r
+reddit_data

# time: 2022-06-10 08:13:17 UTC
# mode: r
+reddit_data %>% unique()

# time: 2022-06-10 08:13:25 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv") %>% unique()

# time: 2022-06-10 08:13:31 UTC
# mode: r
+excluded <- c(8, 37)

# time: 2022-06-10 08:13:32 UTC
# mode: r
+reddit_data <- read_csv("data/reddit_full.csv") %>% unique()

# time: 2022-06-10 08:13:34 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-06-10 08:14:06 UTC
# mode: r
+unique(reddit_data$title)

# time: 2022-06-10 08:14:43 UTC
# mode: r
+excluded <- c(8, 37)

# time: 2022-06-10 08:14:45 UTC
# mode: r
+to_exclude_title <- unique(reddit_data$title)[excluded]

# time: 2022-06-10 08:14:54 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-10 08:14:56 UTC
# mode: r
+reddit_data <- reddit_data %>% filter(!title %in% to_exclude_title)

# time: 2022-06-10 08:14:57 UTC
# mode: r
+reddit_data <- reddit_data %>% mutate(text = prefilter_text(body))

# time: 2022-06-10 08:14:57 UTC
# mode: r
+reddit_archive <- reddit_archive %>% mutate(text = prefilter_text(text))

# time: 2022-06-10 08:14:58 UTC
# mode: r
+reddit_archive2 <- reddit_archive2 %>% mutate(text = prefilter_text(body)) %>% dplyr::select(text)

# time: 2022-06-10 08:14:58 UTC
# mode: r
+reddit_data <- reddit_data %>% dplyr::select(title, text)

# time: 2022-06-10 08:14:58 UTC
# mode: r
+reddit_archive <- reddit_archive %>% dplyr::select(title, text)

# time: 2022-06-10 08:14:58 UTC
# mode: r
+reddit_data <- bind_rows(reddit_data, reddit_archive) %>% dplyr::select(text)

# time: 2022-06-10 08:16:24 UTC
# mode: r
+library(wikifacts)

# time: 2022-06-10 08:16:24 UTC
# mode: r
+library(gutenbergr)

# time: 2022-06-10 08:16:32 UTC
# mode: r
+token_list <- read_csv("data/bsh_tokens.csv")

# time: 2022-06-10 08:16:33 UTC
# mode: r
+token_list <- token_list[,c(1,2)]

# time: 2022-06-10 08:16:33 UTC
# mode: r
+colnames(token_list) <- c("word", "list")

# time: 2022-06-10 08:16:33 UTC
# mode: r
+token_list <- token_list %>% filter(!is.na(list))

# time: 2022-06-10 08:16:33 UTC
# mode: r
+token_list <- token_list %>% mutate(list_name=if_else(list==1, "tech", if_else(list==2, "issue", "irrelevant")))

# time: 2022-06-10 08:16:39 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-10 08:17:36 UTC
# mode: r
+library(mallet)

# time: 2022-06-10 08:17:36 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-06-10 08:17:37 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-06-10 08:17:37 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-06-10 08:17:39 UTC
# mode: r
+saveRDS(docs_for_mallet, "LDA_text.RDS")

# time: 2022-06-10 08:17:41 UTC
# mode: r
+library(mallet)

# time: 2022-06-10 08:17:41 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-06-10 08:17:56 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-10 08:18:00 UTC
# mode: r
+library(mallet)

# time: 2022-06-10 08:18:00 UTC
# mode: r
+reddit_for_mallet <- paste0(reddit_for_mallet$text, collapse = " ")

# time: 2022-06-10 08:18:00 UTC
# mode: r
+reddit_for_mallet <- tibble(text = reddit_for_mallet, id = 1)

# time: 2022-06-10 08:18:01 UTC
# mode: r
+docs_for_mallet <- bind_rows(reddit_for_mallet, technical_for_mallet, faults_for_mallet)

# time: 2022-06-10 08:18:02 UTC
# mode: r
+saveRDS(docs_for_mallet, "LDA_text.RDS")

# time: 2022-06-10 08:18:02 UTC
# mode: r
+docs_for_mallet <- readRDS("LDA_text.RDS")

# time: 2022-06-10 08:18:10 UTC
# mode: r
+docs_for_mallet

# time: 2022-06-10 08:18:14 UTC
# mode: r
+NvimR.selection()

# time: 2022-06-10 08:18:36 UTC
# mode: r
+write_csv(docs_for_mallet, "reddit_full_prepared.csv")

# time: 2022-06-10 19:59:13 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-10 19:59:14 UTC
# mode: r
+library(magrittr)

# time: 2022-06-10 19:59:14 UTC
# mode: r
+library(tibble)

# time: 2022-06-10 19:59:14 UTC
# mode: r
+library(dplyr)

# time: 2022-06-12 19:32:28 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-12 19:32:29 UTC
# mode: r
+library(magrittr)

# time: 2022-06-12 19:32:29 UTC
# mode: r
+library(tibble)

# time: 2022-06-12 19:32:30 UTC
# mode: r
+library(dplyr)

# time: 2022-06-12 19:32:33 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-12 19:32:34 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-12 19:32:35 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-12 19:32:35 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-12 19:32:36 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-12 19:32:45 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:33:33 UTC
# mode: r
+n_steps=1000

# time: 2022-06-12 19:35:03 UTC
# mode: r
+    TT <- table(rep(0, length(target_distribution), rep(0, length(target_distribution))))

# time: 2022-06-12 19:35:19 UTC
# mode: r
+    TT <- table(rep(0, length(target_distribution)), rep(0, length(target_distribution)))

# time: 2022-06-12 19:35:22 UTC
# mode: r
+TT

# time: 2022-06-12 19:35:40 UTC
# mode: r
+target_distribution

# time: 2022-06-12 19:35:53 UTC
# mode: r
+length(target_distribution)

# time: 2022-06-12 19:36:09 UTC
# mode: r
+    l <- length(target_distribution)

# time: 2022-06-12 19:36:39 UTC
# mode: r
+rep(0,l)

# time: 2022-06-12 19:37:03 UTC
# mode: r
+    l <- length(target_distribution)

# time: 2022-06-12 19:37:03 UTC
# mode: r
+    TT <- table(rep(0, l), rep(0, l))

# time: 2022-06-12 19:37:05 UTC
# mode: r
+TT

# time: 2022-06-12 19:37:35 UTC
# mode: r
+    TT <- matrix(l, l, data=rep(, l*l))

# time: 2022-06-12 19:37:48 UTC
# mode: r
+    TT <- matrix(l, l, data=rep(0, l*l))

# time: 2022-06-12 19:37:50 UTC
# mode: r
+TT

# time: 2022-06-12 19:38:13 UTC
# mode: r
+    tranition <- matrix(l, l, data=rep(0, l*l))

# time: 2022-06-12 19:38:15 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-12 19:38:17 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-12 19:38:36 UTC
# mode: r
+    transition <- matrix(l, l, data=rep(0, l*l))

# time: 2022-06-12 19:39:01 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-12 19:39:03 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-12 19:39:03 UTC
# mode: r
+            w <- transition[position,]

# time: 2022-06-12 19:39:05 UTC
# mode: r
+w

# time: 2022-06-12 19:39:25 UTC
# mode: r
+w %*% transition

# time: 2022-06-12 19:40:09 UTC
# mode: r
+            position <- starting_location

# time: 2022-06-12 19:40:10 UTC
# mode: r
+            w <- transition[position,]

# time: 2022-06-12 19:40:11 UTC
# mode: r
+            transition[position,] <- w %*% transition

# time: 2022-06-12 19:40:59 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transition <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:41:02 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-12 19:42:21 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transition <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            TT <- table(starting, ending)
+            print(TT)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:42:22 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-12 19:43:18 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transition <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition <- table(starting, ending)
+            print(transition)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:43:19 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-12 19:43:20 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-12 19:44:16 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transition <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition[starting,ending] <- transition[starting, ending]+1
+            print(transition)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:44:17 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-12 19:45:04 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transition <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition[starting,ending] <- transition[starting, ending][[1]]+1
+            print(transition)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:45:09 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-12 19:45:28 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transition <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition[starting,ending] <- transition[starting, ending][1]+1
+            print(transition)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:45:30 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-12 19:46:07 UTC
# mode: r
+gg    transition <- matrix(l, l, data=rep(0, l*l))

# time: 2022-06-12 19:46:12 UTC
# mode: r
+starting=6

# time: 2022-06-12 19:46:15 UTC
# mode: r
+ending=8

# time: 2022-06-12 19:46:20 UTC
# mode: r
+            transition[starting,ending] <- transition[starting, ending]

# time: 2022-06-12 19:46:26 UTC
# mode: r
+transtion

# time: 2022-06-12 19:46:30 UTC
# mode: r
+            transition[starting,ending] <- transition[starting, ending] + 1

# time: 2022-06-12 19:46:33 UTC
# mode: r
+tranition

# time: 2022-06-12 19:46:48 UTC
# mode: r
+transition

# time: 2022-06-12 19:46:52 UTC
# mode: r
+            transition[starting,ending] <- transition[starting, ending] + 1

# time: 2022-06-12 19:46:55 UTC
# mode: r
+            print(transition)

# time: 2022-06-12 19:46:55 UTC
# mode: r
+            transition[starting,ending] <- transition[starting, ending] + 1

# time: 2022-06-12 19:46:56 UTC
# mode: r
+            print(transition)

# time: 2022-06-12 19:46:56 UTC
# mode: r
+            transition[starting,ending] <- transition[starting, ending] + 1

# time: 2022-06-12 19:46:57 UTC
# mode: r
+            print(transition)

# time: 2022-06-12 19:47:07 UTC
# mode: r
+    walk <- c()

# time: 2022-06-12 19:47:07 UTC
# mode: r
+    starting <- c()

# time: 2022-06-12 19:47:08 UTC
# mode: r
+    ending <- c()

# time: 2022-06-12 19:47:08 UTC
# mode: r
+    l <- length(target_distribution)

# time: 2022-06-12 19:47:09 UTC
# mode: r
+    transition <- matrix(l, l, data=rep(0, l*l))

# time: 2022-06-12 19:47:09 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-12 19:47:10 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition[starting,ending] <- transition[starting, ending] + 1
+            print(transition)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }

# time: 2022-06-12 19:48:07 UTC
# mode: r
+n_steps=10

# time: 2022-06-12 19:48:12 UTC
# mode: r
+    walk <- c()

# time: 2022-06-12 19:48:12 UTC
# mode: r
+    starting <- c()

# time: 2022-06-12 19:48:12 UTC
# mode: r
+    ending <- c()

# time: 2022-06-12 19:48:13 UTC
# mode: r
+    l <- length(target_distribution)

# time: 2022-06-12 19:48:13 UTC
# mode: r
+    transition <- matrix(l, l, data=rep(0, l*l))

# time: 2022-06-12 19:48:13 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-12 19:48:14 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition[starting,ending] <- transition[starting, ending] + 1
+            print(transition)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }

# time: 2022-06-12 19:48:43 UTC
# mode: r
+transition[starting,ending]

# time: 2022-06-12 19:48:49 UTC
# mode: r
+starting

# time: 2022-06-12 19:48:54 UTC
# mode: r
+ending

# time: 2022-06-12 19:49:41 UTC
# mode: r
+    transition <- matrix(l, l, data=rep(0, l*l))

# time: 2022-06-12 19:49:41 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-12 19:49:42 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition[current,proposed] <- transition[current, proposed] + 1
+            print(transition)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }

# time: 2022-06-12 19:49:47 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transition <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition[current,proposed] <- transition[current, proposed] + 1
+            print(transition)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:49:52 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 1000)

# time: 2022-06-12 19:49:58 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transition <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition[current,proposed] <- transition[current, proposed] + 1
+            print(transition)
+            w <- transition[position,]
+            transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:50:03 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 100)

# time: 2022-06-12 19:51:18 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transmat <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # w <- transmat[position,]
+            # transmat[position,] <- w %*% transmat
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transition[current,proposed] <- transition[current, proposed] + 1
+            print(transition)
+            # w <- transition[position,]
+            # transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:51:19 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 100)

# time: 2022-06-12 19:51:40 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transmat <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # w <- transmat[position,]
+            # transmat[position,] <- w %*% transmat
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transmat[current,proposed] <- transmat[current, proposed] + 1
+            print(transition)
+            # w <- transition[position,]
+            # transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:51:41 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 100)

# time: 2022-06-12 19:51:43 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-12 19:51:55 UTC
# mode: r
+    walk <- c()

# time: 2022-06-12 19:51:55 UTC
# mode: r
+    starting <- c()

# time: 2022-06-12 19:51:56 UTC
# mode: r
+    ending <- c()

# time: 2022-06-12 19:51:56 UTC
# mode: r
+    l <- length(target_distribution)

# time: 2022-06-12 19:51:56 UTC
# mode: r
+    transmat <- matrix(l, l, data=rep(0, l*l))

# time: 2022-06-12 19:51:57 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-12 19:52:02 UTC
# mode: r
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # w <- transmat[position,]
+            # transmat[position,] <- w %*% transmat
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transmat[current,proposed] <- transmat[current, proposed] + 1
+            print(transition)
+            # w <- transition[position,]
+            # transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }

# time: 2022-06-12 19:52:12 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transmat <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # w <- transmat[position,]
+            # transmat[position,] <- w %*% transmat
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transmat[current,proposed] <- transmat[current, proposed] + 1
+            print(transition)
+            # w <- transition[position,]
+            # transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:52:15 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 100)

# time: 2022-06-12 19:52:30 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transmat <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            # w <- transmat[position,]
+            # transmat[position,] <- w %*% transmat
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transmat[current,proposed] <- transmat[current, proposed] + 1
+            print(transmat)
+            # w <- transition[position,]
+            # transition[position,] <- w %*% transition
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+            # print(transition[position,])
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:52:31 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 100)

# time: 2022-06-12 19:53:36 UTC
# mode: r
+    walk <- c()

# time: 2022-06-12 19:53:36 UTC
# mode: r
+    starting <- c()

# time: 2022-06-12 19:53:37 UTC
# mode: r
+    ending <- c()

# time: 2022-06-12 19:53:37 UTC
# mode: r
+    l <- length(target_distribution)

# time: 2022-06-12 19:53:37 UTC
# mode: r
+    transmat <- matrix(l, l, data=rep(0, l*l))

# time: 2022-06-12 19:53:38 UTC
# mode: r
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)

# time: 2022-06-12 19:53:47 UTC
# mode: r
+transmat

# time: 2022-06-12 19:54:28 UTC
# mode: r
+            pmat <- transmat/i

# time: 2022-06-12 19:54:45 UTC
# mode: r
+            w <- pmat[position,]

# time: 2022-06-12 19:54:46 UTC
# mode: r
+            p <- w %*% pmat

# time: 2022-06-12 19:55:04 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transmat <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            pmat <- transmat/i
+            w <- pmat[position,]
+            p <- w %*% pmat
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transmat[current,proposed] <- transmat[current, proposed] + 1
+            pmat <- transmat/i
+            w <- pmat[position,]
+            p <- w %*% pmat
+            print(p)
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:55:05 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 100)

# time: 2022-06-12 19:55:22 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transmat <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            pmat <- transmat/i
+            w <- pmat[position,]
+            p <- w %*% pmat
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transmat[current,proposed] <- transmat[current, proposed] + 1
+            pmat <- transmat/i
+            w <- pmat[position,]
+            p <- w %*% pmat
+            print(p[proposed])
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:55:23 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 100)

# time: 2022-06-12 19:56:54 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transmat <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            pmat <- transmat/i
+            w <- pmat[position,]
+            p <- w %*% pmat
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transmat[current,proposed] <- transmat[current, proposed] + 1
+            pmat <- transmat/i
+            w <- pmat[position,]
+            p <- w %*% pmat
+            print(paste(proposed, " -> ",p[proposed]))
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-12 19:56:55 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 100)

# time: 2022-06-15 08:12:57 UTC
# mode: r
+library(ggplot2)

# time: 2022-06-15 08:12:59 UTC
# mode: r
+library(magrittr)

# time: 2022-06-15 08:12:59 UTC
# mode: r
+library(tibble)

# time: 2022-06-15 08:13:00 UTC
# mode: r
+library(dplyr)

# time: 2022-06-15 08:13:01 UTC
# mode: r
+shall_move <- function(proposed, current) {
+    if (proposed > current) {
+        return(TRUE)
+    } else {
+        p <- proposed / current
+        spin <- sample(seq(0, 1, length = 1000), 1)
+        if (all(spin >= 0, spin <= p)) {
+            TRUE
+        } else {
+            FALSE
+        }
+    }
+}

# time: 2022-06-15 08:13:03 UTC
# mode: r
+target_distribution <- seq(1, 9, by = 1)

# time: 2022-06-15 08:13:03 UTC
# mode: r
+names(target_distribution) <- target_distribution

# time: 2022-06-15 08:13:04 UTC
# mode: r
+get_choices <- function(actual, step = 1, lower = 1, upper = 9) {
+    if (actual - 1 < lower) {
+        low <- actual
+    } else {
+        low <- actual - 1
+    }
+    if (actual + 1 > upper) {
+        high <- actual
+    } else {
+        high <- actual + 1
+    }
+
+    c(low, high)
+}

# time: 2022-06-15 08:13:04 UTC
# mode: r
+distribute_probabilities <- function(value, proposed, current) {
+
+    if (value == 0) {
+        0
+    } else {
+        rate <- proposed/current
+        if (rate > 1) {rate <- 1}
+        c((rate) * 0.5 * value, 0.5 * (1 - rate) * value, 0.5 * value)
+    }
+}

# time: 2022-06-15 08:13:05 UTC
# mode: r
+make_random_walk <- function(target_distribution, n_steps = 10000, prob=F, transition=F) {
+    walk <- c()
+    starting <- c()
+    ending <- c()
+    l <- length(target_distribution)
+    transmat <- matrix(l, l, data=rep(0, l*l))
+    starting_location <- sample(seq(
+        min(target_distribution),
+        max(target_distribution),
+        length = length(target_distribution)
+    ), 1)
+
+    for (i in 1:n_steps) {
+        if (i == 1) {
+            position <- starting_location
+            pmat <- transmat/i
+            w <- pmat[position,]
+            p <- w %*% pmat
+        }
+            choices <- get_choices(position)
+            move <- sample(choices, 1)
+            proposed <- move
+            current <- position
+            move <- shall_move(proposed, current)
+            starting <- c(starting, position)
+            if (move) {
+                actual_step <- proposed
+                position <- proposed
+            } else {
+                actual_step <- current
+                position <- current
+            }
+            transmat[current,proposed] <- transmat[current, proposed] + 1
+            pmat <- transmat/i
+            w <- pmat[position,]
+            p <- w %*% pmat
+            print(paste(proposed, " -> ",p[proposed]))
+            ending <- c(ending, actual_step)
+            names(actual_step) <- i
+            walk <- c(walk, actual_step)
+    }
+    TT <- table(starting, ending)
+    if (prob){
+        TT <- TT/n_steps
+    }
+    if (transition){
+        TT
+    } else {
+    walk
+    }
+}

# time: 2022-06-15 08:13:07 UTC
# mode: r
+walk <- make_random_walk(target_distribution, 100)

# time: 2022-06-15 08:13:23 UTC
# mode: r
+walk <- make_random_walk(target_distribution, n_steps = 1000)

# time: 2022-06-15 08:13:24 UTC
# mode: r
+plot(walk[1:500], type = "l")

# time: 2022-06-15 08:13:30 UTC
# mode: r
+plot_walk <- function(walk) {
+    tibble(walk = walk) %>%
+        mutate(step = row_number()) %>%
+        ggplot() +
+        geom_path(aes(step, walk), alpha = 1 / 2, color = "cornflowerblue") +
+        geom_point(aes(step, walk),
+            alpha = 1 / 1.5,
+            color = "cornflowerblue", size = 3
+        ) +
+        geom_point(aes(step, walk),
+            alpha = 1 / 1.5,
+            color = "white", size = 2
+        ) +
+        theme_light()
+}

# time: 2022-06-15 08:13:31 UTC
# mode: r
+plot_walk(walk[1:500])

# time: 2022-06-15 08:13:38 UTC
# mode: r
+plot_walk(walk[1:1000])

# time: 2022-06-15 08:14:02 UTC
# mode: r
+library(markovchain) 

# time: 2022-06-15 08:14:04 UTC
# mode: r
+sequence <- c("a", "b", "a", "a", "a", "a", "b", "a", "b", "a", 
+              "b", "a", "a", "b", "b", "b", "a")

# time: 2022-06-15 08:14:04 UTC
# mode: r
+mcFit <- markovchainFit(data=sequence)

# time: 2022-06-15 14:25:40 UTC
# mode: r
+library(httpR)

# time: 2022-06-15 14:26:18 UTC
# mode: r
+library(httr)

# time: 2022-06-15 14:28:38 UTC
# mode: r
+NvimR.selection()
